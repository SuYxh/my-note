import{_ as t,c as e,o as a,V as p}from"./chunks/framework.hxTji2_l.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe/javascript/xhr/请求响应进度.md","filePath":"fe/javascript/xhr/请求响应进度.md","lastUpdated":1721552467000}'),c={name:"fe/javascript/xhr/请求响应进度.md"},o=p('<h2 id="如何实时获取请求响应的进度" tabindex="-1">如何实时获取请求响应的进度？ <a class="header-anchor" href="#如何实时获取请求响应的进度" aria-label="Permalink to &quot;如何实时获取请求响应的进度？&quot;">​</a></h2><p>其实这个问题最近几年很多人都反馈说面试中被问到，并且面试官会问你 <code>Xhr</code> 和 <code>Fetch</code> 这两种请求方式，他们各自的响应进度应该怎么获取~</p><h3 id="xhr-xmlhttprequest" tabindex="-1">Xhr（XMLHttpRequest） <a class="header-anchor" href="#xhr-xmlhttprequest" aria-label="Permalink to &quot;Xhr（XMLHttpRequest）&quot;">​</a></h3><p><code>Xhr</code> 的响应进度其实是比较好获取的，因为 JavaScript 官方提供了一个监听函数 <code>progress</code>来对响应进度进行监听</p><p><img src="https://qn.huat.xyz/mac/202407142230883.webp" alt="图片"></p><p>并且这个方法接收一个对象，对象中有两个属性很重要：</p><ul><li><p><strong>total：</strong> 总响应数据的长度</p></li><li><p><strong>loaded：</strong> 已加载的响应数据的长度</p></li></ul><p><img src="https://qn.huat.xyz/mac/202407142230898.webp" alt="图片"></p><p>所以我们可以根据这两个字段来算出百分比，进而展示出来~</p><p>在此之间我先自己用 <code>express</code> 在本地起了一个本地服务，用来演示发起请求</p><p><img src="https://qn.huat.xyz/mac/202407142231890.webp" alt="图片"></p><p>接着回到前端页面，我们使用组件库，写出一个页面</p><p><img src="https://qn.huat.xyz/mac/202407142231734.webp" alt="图片"></p><p>当我们点击按钮发起请求并收到响应后，会监听到每次的百分比</p><p><img src="https://qn.huat.xyz/mac/202407142231480.gif" alt="图片"></p><p>有了百分比，我们只需要把百分比放到 <code>Progress</code> 组件中即可实现展示效果</p><p><img src="https://qn.huat.xyz/mac/202407142231570.webp" alt="图片"></p><p><img src="https://qn.huat.xyz/mac/202407142231705.gif" alt="图片"></p><h3 id="fetch" tabindex="-1">Fetch <a class="header-anchor" href="#fetch" aria-label="Permalink to &quot;Fetch&quot;">​</a></h3><p>其实 <code>Fetch</code> 也是同理，只要我们能拿到 <code>total</code> 和 <code>loaded</code> ，也就是 <code>数据总长度</code> 和 <code>已加载长度</code>，就能算出百分比</p><p>但是 <code>Fetch</code> 没有监听函数，所以得换一种方式去获取，大概思路就是</p><ul><li><p>先从请求头获取到 <code>content-length</code> 总长度</p></li><li><p>再用数据流的 API <code>body.getReader</code> 去读取响应体当前已加载的长度</p></li></ul><p><img src="https://qn.huat.xyz/mac/202407142232071.webp" alt="图片"></p><p><img src="https://qn.huat.xyz/mac/202407142232747.webp" alt="图片"></p><p>最终也能达到我们想要的结果</p><p><img src="https://qn.huat.xyz/mac/202407142232467.gif" alt="图片"></p><h2 id="上传进度" tabindex="-1">上传进度 <a class="header-anchor" href="#上传进度" aria-label="Permalink to &quot;上传进度&quot;">​</a></h2><p>说完响应进度，我们再来说说上传进度应该怎么去监听呢？</p><h3 id="xhr" tabindex="-1">XHR <a class="header-anchor" href="#xhr" aria-label="Permalink to &quot;XHR&quot;">​</a></h3><p>XHR 可以使用<code>XMLHttpRequest.upload</code>自带的监听函数<code>progress</code>去做</p><p><img src="https://qn.huat.xyz/mac/202407142232327.webp" alt="图片"></p><p><img src="https://qn.huat.xyz/mac/202407142233129.webp" alt="图片"></p><h3 id="fetch-1" tabindex="-1">Fetch <a class="header-anchor" href="#fetch-1" aria-label="Permalink to &quot;Fetch&quot;">​</a></h3><p>目前还未有办法可以监听.</p>',34),r=[o];function h(s,d,l,i,n,m){return a(),e("div",null,r)}const x=t(c,[["render",h]]);export{_ as __pageData,x as default};
