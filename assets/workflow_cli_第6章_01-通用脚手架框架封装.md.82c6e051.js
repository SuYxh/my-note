import{_ as a,o as s,c as l,Q as n}from"./chunks/framework.fb3766a7.js";const _=JSON.parse('{"title":"通用脚手架框架封装","description":"","frontmatter":{},"headers":[],"relativePath":"workflow/cli/第6章/01-通用脚手架框架封装.md","lastUpdated":1707145584000}'),e={name:"workflow/cli/第6章/01-通用脚手架框架封装.md"},o=n(`<h1 id="通用脚手架框架封装" tabindex="-1">通用脚手架框架封装 <a class="header-anchor" href="#通用脚手架框架封装" aria-label="Permalink to &quot;通用脚手架框架封装&quot;">​</a></h1><h2 id="开发流程" tabindex="-1">开发流程 <a class="header-anchor" href="#开发流程" aria-label="Permalink to &quot;开发流程&quot;">​</a></h2><ul><li>脚手架通用框架开发流程 <ul><li>脚手架初始化</li><li>脚手架命令注册和执行</li><li>脚手架自动化测试</li></ul></li></ul><h2 id="脚手架初始化" tabindex="-1">脚手架初始化 <a class="header-anchor" href="#脚手架初始化" aria-label="Permalink to &quot;脚手架初始化&quot;">​</a></h2><ul><li>通过 lerna 创建 package</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">packages</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cli</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 脚手架入口</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">command</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 命令基础类</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">init</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 脚手架1：项目初始化命令</span></span>
<span class="line"><span style="color:#FFCB6B;">└──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">utils</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 通用工具类</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="脚手架命令注册和执行" tabindex="-1">脚手架命令注册和执行 <a class="header-anchor" href="#脚手架命令注册和执行" aria-label="Permalink to &quot;脚手架命令注册和执行&quot;">​</a></h2><ul><li>使用 Commander 框架</li><li>封装通用的 Command 类</li><li>基于 Command 派生出 InitCommand 类</li><li>实现新命令的快速注册和执行</li><li>解决 CommonJS 和 ESM 混合开发的问题</li></ul><h2 id="脚手架自动化测试" tabindex="-1">脚手架自动化测试 <a class="header-anchor" href="#脚手架自动化测试" aria-label="Permalink to &quot;脚手架自动化测试&quot;">​</a></h2><ul><li>使用 Jest 实现脚手架自动化测试</li><li>解决 Jest 测试过程中 CommonJS 和 ESM 的兼容性问题</li></ul><p><img src="https://qn.huat.xyz/mac/202309022027514.png" alt="image-20230902202733472"></p>`,11),t=[o];function i(p,r,c,d,m,h){return s(),l("div",null,t)}const y=a(e,[["render",i]]);export{_ as __pageData,y as default};
