import{_ as s,c as i,o as a,V as e}from"./chunks/framework.hxTji2_l.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe/basicknowledge/browser/页面渲染.md","filePath":"fe/basicknowledge/browser/页面渲染.md","lastUpdated":1718195154000}'),n={name:"fe/basicknowledge/browser/页面渲染.md"},l=e(`<h3 id="dom树" tabindex="-1">DOM树 <a class="header-anchor" href="#dom树" aria-label="Permalink to &quot;DOM树&quot;">​</a></h3><p><img src="https://qn.huat.xyz/mac/202406121259105.png" alt="下载"></p><h3 id="cssom树" tabindex="-1">CSSOM树 <a class="header-anchor" href="#cssom树" aria-label="Permalink to &quot;CSSOM树&quot;">​</a></h3><p><img src="https://qn.huat.xyz/mac/202406121300750.png" alt="下载 (1)"></p><h3 id="render-tree渲染树" tabindex="-1">Render-Tree渲染树 <a class="header-anchor" href="#render-tree渲染树" aria-label="Permalink to &quot;Render-Tree渲染树&quot;">​</a></h3><p><img src="https://qn.huat.xyz/mac/202406121300031.png" alt="下载 (2)"></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>处理 HTML 标记，构建 DOM 树</li><li>处理 CSS 标记，构建 CSSOM 树</li><li>将 DOM 树和 CSSOM 树融合成渲染树</li><li>根据生成的渲染树，计算它们在设备视口(viewport)内的确切位置和大小，这个计算的阶段就是回流 =&gt; 布局（Layout）或 重排（reflow）</li><li>根据渲染树以及回流得到的几何信息，得到节点的绝对像素 =&gt; 绘制（painting）</li></ul><p><img src="https://qn.huat.xyz/mac/202406121301016.png" alt="下载 (3)"></p><h3 id="优化方案" tabindex="-1">优化方案 <a class="header-anchor" href="#优化方案" aria-label="Permalink to &quot;优化方案&quot;">​</a></h3><ul><li><p>标签语义化和避免深层次嵌套</p></li><li><p>CSS选择器渲染是从右到左</p></li><li><p>尽早尽快地把CSS下载到客户端（充分利用HTTP多请求并发机制）</p><ul><li><code>style</code></li><li><code>link</code></li><li><code>@import</code></li><li>放到顶部</li></ul></li><li><p>避免阻塞的JS加载</p><ul><li><p><code>async</code></p></li><li><p><code>defer</code></p></li><li><p>放到底部</p><p><img src="https://qn.huat.xyz/mac/202406121301724.png" alt="下载 (4)"></p></li></ul></li><li><p>减少DOM的回流和重绘</p></li></ul><h3 id="重绘回流" tabindex="-1">重绘回流 <a class="header-anchor" href="#重绘回流" aria-label="Permalink to &quot;重绘回流&quot;">​</a></h3><h4 id="重绘" tabindex="-1">重绘 <a class="header-anchor" href="#重绘" aria-label="Permalink to &quot;重绘&quot;">​</a></h4><p>元素样式的改变(但宽高、大小、位置等不变)。</p><p>重绘改变<code>外观属性</code>而不影响<code>几何属性</code>的渲染</p><h4 id="回流" tabindex="-1">回流 <a class="header-anchor" href="#回流" aria-label="Permalink to &quot;回流&quot;">​</a></h4><p>元素的大小或者位置发生了变化(当页面布局和几何信息发生变化的时候)，触发了重新布局导致渲染树重新计算布局和渲染。</p><p>回流改变<code>几何属性</code>的渲染。</p><blockquote><p>回流一定会触发重绘，而重绘不一定会回流</p></blockquote><h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h4><p><strong>几何属性</strong>：包括布局、尺寸等可用数学几何衡量的属性</p><ul><li>布局：<code>display</code>、<code>float</code>、<code>position</code>、<code>list</code>、<code>table</code>、<code>flex</code>、<code>columns</code>、<code>grid</code>等</li><li>尺寸：<code>margin</code>、<code>padding</code>、<code>border</code>、<code>width</code>、<code>height</code>等</li></ul><p><strong>外观属性</strong>：包括界面、文字等可用状态向量描述的属性</p><ul><li>界面：<code>appearance</code>、<code>outline</code>、<code>background</code>、<code>mask</code>、<code>box-shadow</code>、<code>box-reflect</code>、<code>filter</code>、<code>opacity</code>、<code>clip</code>等</li><li>文字：<code>text</code>、<code>font</code>、<code>word</code>等</li></ul><h3 id="避免回流" tabindex="-1">避免回流 <a class="header-anchor" href="#避免回流" aria-label="Permalink to &quot;避免回流&quot;">​</a></h3><p><strong>回流必定引发重绘，重绘不一定引发回流</strong>，可利用该法则解决一些因为回流重绘而引发的性能问题。在优化性能前，需了解什么情况可能产生性能问题，以下罗列一些常见情况。</p><ul><li>改变窗口大小</li><li>修改盒模型</li><li>增删样式</li><li>重构布局</li><li>重设尺寸</li><li>改变字体</li><li>改动文字</li></ul><h4 id="分离读写操作" tabindex="-1">分离读写操作 <a class="header-anchor" href="#分离读写操作" aria-label="Permalink to &quot;分离读写操作&quot;">​</a></h4><p>把设置元素样式的代码和获取元素样式的代码分离编写，不要穿插混合一起</p><p>渲染队列机制：当代浏览器的机制，当前上下文代码执行过程中，遇到修改元素样式(操作DOM)的代码，浏览器并没有立即去处理，而是先存放在渲染队列中；当遇到获取元素样式操作(或者当前上下文代码执行完毕)，才会刷新渲染队列(也就是把队列中对DOM的操作统一进行处理)，引发一次回流!!</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box.style.width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;200px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box.style.height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;300px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(box.offsetWidth);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(box.offsetHeight);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box.offsetWidth;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box.offsetHeight;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box.style.width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box.style.height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="缓存布局信息" tabindex="-1">缓存布局信息 <a class="header-anchor" href="#缓存布局信息" aria-label="Permalink to &quot;缓存布局信息&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.style.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> divoffsetLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.style.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.offsetlop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;px&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> curLeft</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.offsetLeft; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> curTop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.offsetTop;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.style.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;px;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">divstyle.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="统一修改样式" tabindex="-1">统一修改样式 <a class="header-anchor" href="#统一修改样式" aria-label="Permalink to &quot;统一修改样式&quot;">​</a></h4><ul><li><p>把需要修改的样式事先写在样式表中，基于修改元素的样式类名达到修改样式的需求，也只会引发一次回流</p><pre><code>    \`\`\`js
    box.classList.add(&#39;active&#39;);
    \`\`\`
</code></pre></li><li><p>基于cssText处理</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box.style.cssText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;width:200px;height:300px;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="批量统一新增dom" tabindex="-1">批量统一新增DOM <a class="header-anchor" href="#批量统一新增dom" aria-label="Permalink to &quot;批量统一新增DOM&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDocumentFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建容器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    box.innerHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    frag.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(box); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//把每一次创建的div先存放在文档碎片中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(frag); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//最后把容器插入到body末尾</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="使用transform代替top" tabindex="-1">使用transform代替top <a class="header-anchor" href="#使用transform代替top" aria-label="Permalink to &quot;使用transform代替top&quot;">​</a></h4><p><code>top</code>是几何属性，操作<code>top</code>会改变节点位置引发回流，使用<code>transform:translate3d(x,0,0)</code>代替<code>top</code>，只会引发图层重绘，还会间接启动GPU加速。</p><p>修改元素的样式尽可能使用 transform 变形属性 / opacity，因为它的改变不会引发DOM回流「浏览器内部对其做了硬件加速，也可以理解为这就是“规定”」</p><h4 id="避免使用table布局" tabindex="-1">避免使用Table布局 <a class="header-anchor" href="#避免使用table布局" aria-label="Permalink to &quot;避免使用Table布局&quot;">​</a></h4><p>牵一发而动全身用在<code>Table布局</code>身上就很适合了，可能很小的一个改动就会造成整个<code>&lt;table&gt;</code>回流，有兴趣的同学可用<code>Chrome Devtools</code>的<code>Performance</code>调试看看，在此就不演示了。</p><p>通常可用<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>和<code>&lt;span&gt;</code>等标签取代<code>table系列标签</code>生成表格。</p><h4 id="脱离文档流" tabindex="-1">脱离文档流 <a class="header-anchor" href="#脱离文档流" aria-label="Permalink to &quot;脱离文档流&quot;">​</a></h4><p>动画效果应用到position属性为absolute或fixed的元素上(脱离文档流 )</p>`,45),t=[l];function h(p,k,r,d,o,c){return a(),i("div",null,t)}const y=s(n,[["render",h]]);export{g as __pageData,y as default};
