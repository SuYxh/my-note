import{_ as s,c as a,o as i,V as n}from"./chunks/framework.hxTji2_l.js";const u=JSON.parse('{"title":"使用 docker 部署 node 项目-基础版","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/deploy/docker/Docker部署node-基础版.md","filePath":"engineering/deploy/docker/Docker部署node-基础版.md","lastUpdated":1718603374000}'),e={name:"engineering/deploy/docker/Docker部署node-基础版.md"},l=n(`<p><img src="https://qn.huat.xyz/mac/202404131853683.png" alt="Node项目"></p><p>仓库地址： <a href="https://github.com/SuYxh/docker-study" target="_blank" rel="noreferrer">https://github.com/SuYxh/docker-study</a></p><ul><li><a href="https://github.com/SuYxh/docker-study/blob/main/1.docker%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80node%E9%A1%B9%E7%9B%AE/README.md" target="_blank" rel="noreferrer">docker部署基础node项目</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/2.docker%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80node%E9%A1%B9%E7%9B%AE-env/README.md" target="_blank" rel="noreferrer">docker部署基础node项目-env</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/3.docker%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80node%E9%A1%B9%E7%9B%AE-%E6%8C%82%E8%BD%BD/README.md" target="_blank" rel="noreferrer">docker部署基础node项目-挂载</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/4.docker%E9%83%A8%E7%BD%B2express%E5%92%8CMySQL/README.md" target="_blank" rel="noreferrer">docker部署express和MySQL</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/5.docker%E9%83%A8%E7%BD%B2express%E5%92%8CMySQL%E5%92%8CRedis/README.md" target="_blank" rel="noreferrer">docker部署express和MySQL和Redis</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/6.docker%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/README.md" target="_blank" rel="noreferrer">docker部署Vue项目</a></li></ul><h1 id="使用-docker-部署-node-项目-基础版" tabindex="-1">使用 docker 部署 node 项目-基础版 <a class="header-anchor" href="#使用-docker-部署-node-项目-基础版" aria-label="Permalink to &quot;使用 docker 部署 node 项目-基础版&quot;">​</a></h1><p>普通nodejs程序，以express为例</p><ul><li>没有使用数据库</li><li>没有使用 redis</li><li>无环境变量</li></ul><h2 id="创建-dockerfile" tabindex="-1">创建 Dockerfile <a class="header-anchor" href="#创建-dockerfile" aria-label="Permalink to &quot;创建 Dockerfile&quot;">​</a></h2><div class="language-dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于 Node.js 官方镜像</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:18</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建并设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /usr/src/app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制 package.json 和 package-lock.json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package*.json ./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装项目依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制项目文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建应用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暴露端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3002</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动应用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><code>FROM node:18</code></p><ul><li>这一行指定了基础镜像，即构建您的镜像所依赖的镜像。这里使用的是官方的 Node.js 镜像，标签为 <code>18</code>，表示使用 Node.js 的 18.x 版本。Docker 会从 Docker Hub 上拉取这个基础镜像。</li></ul><p><code>WORKDIR /usr/src/app</code></p><ul><li><code>WORKDIR</code> 用于设置容器内的工作目录。之后的命令（如 <code>COPY</code> 和 <code>RUN</code>）都会在这个目录下执行。这里将工作目录设置为 <code>/usr/src/app</code>。</li></ul><p><code>COPY package*.json ./</code></p><ul><li>这一行将项目的 <code>package.json</code> 和 <code>package-lock.json</code>（如果存在）复制到工作目录中。这是为了在下一步中安装依赖时使用。</li></ul><p><code>RUN npm install</code></p><ul><li>这条命令在容器内运行 <code>npm install</code>，根据 <code>package.json</code> 和 <code>package-lock.json</code> 安装项目所需的依赖。</li></ul><p><code>COPY . .</code></p><ul><li>这条命令将项目中的所有文件复制到容器内的工作目录中。注意，这里使用了两个 <code>.</code>，第一个表示当前项目目录，第二个表示容器内的工作目录。</li></ul><p><code>RUN npm run build</code></p><ul><li>这条命令运行 <code>npm run build</code>，这通常是在生产环境下构建项目的命令。请确保您的 <code>package.json</code> 中有 <code>build</code> 脚本。</li></ul><p><code>EXPOSE 3002</code></p><ul><li>这条命令告诉 Docker 在运行容器时应该暴露哪个端口。这里暴露的是 3002 端口，因为您的应用程序是在这个端口上运行的。</li></ul><p><code>CMD [&quot;npm&quot;, &quot;run&quot;, &quot;prod&quot;]</code></p><ul><li><code>CMD</code> 指定了容器启动时要运行的命令。这里使用 <code>npm start</code> 来启动您的 Express 应用程序。这个命令应该在 <code>package.json</code> 的 <code>scripts</code> 部分定义。</li></ul><h2 id="构建-docker-镜像" tabindex="-1"><strong>构建 Docker 镜像</strong> <a class="header-anchor" href="#构建-docker-镜像" aria-label="Permalink to &quot;**构建 Docker 镜像**&quot;">​</a></h2><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build -t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-dockerhub-usernam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build -t jarvis0426/chatgpt-web-service-base:1.0.0 .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>解析：</p><ul><li><code>docker build</code>: 这是 Docker 的构建命令，用于从 Dockerfile 创建镜像。</li><li><code>-t</code> 参数用于为构建的镜像指定一个标签（tag）。这个标签通常包括仓库名、镜像名和版本号，格式为 <code>&lt;repository&gt;/&lt;image-name&gt;:&lt;tag&gt;</code>。在您的例子中，<code>jarvis0426</code> 是 Docker Hub 的用户名，<code>chatgpt-web-service-base</code> 是镜像的名称，<code>1.0.0</code> 是版本号。</li><li><code>.</code>: 这指定了 Dockerfile 的位置。在这个例子中，<code>.</code> 表示当前目录，意味着 Docker 将在当前目录下查找名为 <code>Dockerfile</code> 的文件，并使用它来构建镜像。</li></ul><p>其他常见参数：</p><ul><li><code>--file</code> 或 <code>-f</code>: 指定要使用的 Dockerfile 路径。默认情况下，Docker 会在当前目录下查找名为 <code>Dockerfile</code> 的文件。如果您的 Dockerfile 位于不同的位置或有不同的名称，您可以使用这个参数指定它。例如：<code>docker build -f path/to/your/Dockerfile .</code></li><li><code>--build-arg</code>: 设置构建时的变量。这些变量可以在 Dockerfile 中使用，通常用于传递敏感信息或配置数据。例如：<code>docker build --build-arg API_KEY=your_api_key .</code></li><li><code>--no-cache</code>: 构建镜像时不使用缓存。这确保了每一层都将重新构建，有助于获取最新的依赖和更新。例如：<code>docker build --no-cache -t my-image .</code></li><li><code>--pull</code>: 总是尝试从远程仓库拉取更新的基础镜像，即使本地已经有了该镜像。这有助于确保基础镜像是最新的。例如：<code>docker build --pull -t my-image .</code></li><li><code>--rm</code>: 构建完成后删除临时容器。这是默认行为，但如果您之前更改过此设置，可以使用此参数确保临时容器被清理。例如：<code>docker build --rm -t my-image .</code></li></ul><p>问题</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>❯ docker build -t jarvis0426/chatgpt-web-service-base:1.0.0 .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ERROR: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span></span>
<span class="line"><span></span></span>
<span class="line"><span>解决：把 docker 跑起来就好了。比如 如果你是 mac，你可以把 Docker 这个 APP 运行起来就好了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="https://qn.huat.xyz/mac/202404121054236.png" alt="image-20240412105407127"></p><h2 id="运行-docker-容器" tabindex="-1"><strong>运行 Docker 容器</strong> <a class="header-anchor" href="#运行-docker-容器" aria-label="Permalink to &quot;**运行 Docker 容器**&quot;">​</a></h2><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3002 --name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3002 --name chatgpt-service-base jarvis0426/chatgpt-web-service-base:1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>解析：</p><ul><li><code>docker run</code>: 这是 Docker 的运行命令，用于从镜像启动容器。</li><li><code>-d</code>: 这个选项让容器在后台运行（detached mode）。</li><li><code>-p 3002:3002</code>: 格式为 <code>-p &lt;宿主机端口&gt;:&lt;容器端口&gt;</code>。 这个选项映射了容器的端口到宿主机的端口。在这个例子中，容器的 3002 端口被映射到宿主机的 3002 端口，这意味着你可以通过访问宿主机的 3002 端口来访问容器中应用的服务。</li><li><code>--name chatgpt-service-base</code>: 这个选项给容器指定了一个名称，这样你可以通过名称来引用容器，而不是使用容器的 ID。</li><li><code>jarvis0426/chatgpt-web-service-base:1.0.0</code>: 这指定了要从哪个镜像启动容器。在这个例子中，它使用的是之前构建的 <code>jarvis0426/chatgpt-web-service-base</code> 镜像的 <code>1.0.0</code> 版本。</li></ul><p>其他常见参数：</p><ul><li><code>--name &lt;容器名&gt;</code>: 为容器指定一个名称，这样可以更方便地管理和引用容器。例如：<code>--name my-container</code>。</li><li><code>-e &lt;环境变量&gt;</code> 或 <code>--env &lt;环境变量&gt;</code>: 设置容器内的环境变量。可以多次使用此参数来设置多个环境变量。例如：<code>-e MY_VAR=my_value</code>。</li><li><code>-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</code> 或 <code>--volume &lt;宿主机目录&gt;:&lt;容器目录&gt;</code>: 将宿主机的目录或文件挂载到容器中的指定目录。这用于数据持久化和共享文件。例如：<code>-v /host/path:/container/path</code>。</li><li><code>--restart &lt;策略&gt;</code>: 设置容器的重启策略。常见的策略包括 <code>no</code>（不重启，默认）、<code>always</code>（总是重启）、<code>on-failure</code>（失败时重启）。例如：<code>--restart always</code>。</li><li><code>--network &lt;网络名&gt;</code>: 将容器连接到指定的网络。这用于配置容器的网络连接。例如：<code>--network my-network</code>。</li><li><code>--rm</code>: 容器退出时自动删除容器。这对于临时容器很有用，可以避免留下无用的容器实例。</li></ul><h2 id="分享-docker-镜像" tabindex="-1"><strong>分享 Docker 镜像</strong> <a class="header-anchor" href="#分享-docker-镜像" aria-label="Permalink to &quot;**分享 Docker 镜像**&quot;">​</a></h2><h3 id="本地分享" tabindex="-1"><strong>本地分享</strong> <a class="header-anchor" href="#本地分享" aria-label="Permalink to &quot;**本地分享**&quot;">​</a></h3><p>可以将构建好的镜像保存为一个文件，然后分享给他人。使用以下命令保存镜像为文件：</p><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save -o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.tar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save -o chatgpt-web-service-base.tar chatgpt-web-service-base:1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将生成的 <code>chatgpt-web-service-base.tar</code> 文件分享给他人，他们可以使用以下命令加载镜像：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load -i chatgpt-web-service-base.tar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用-docker-hub" tabindex="-1"><strong>使用 Docker Hub</strong> <a class="header-anchor" href="#使用-docker-hub" aria-label="Permalink to &quot;**使用 Docker Hub**&quot;">​</a></h3><p>您可以将镜像推送到 Docker Hub 或其他容器镜像仓库，然后他人可以直接从仓库拉取镜像。首先，需要在 Docker Hub 上创建一个仓库，然后使用以下命令推送镜像：</p><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-dockerhub-usernam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-dockerhub-usernam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag chatgpt-web-service-base:1.0.0 jarvis0426/chatgpt-web-service-base:1.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push jarvis0426/chatgpt-web-service-base:1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>他人可以使用以下命令拉取并运行镜像：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull jarvis0426/chatgpt-web-service-base:1.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3002 --name chatgpt-service jarvis0426/chatgpt-web-service-base:1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>问题</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker login</span></span>
<span class="line"><span>docker tag chatgpt-web-service-base:1.0.0 jarvis0426/chatgpt-web-service-base:1.0.0</span></span>
<span class="line"><span>docker push jarvis0426/chatgpt-web-service-base:1.0.0</span></span>
<span class="line"><span>从这个命令可以看出，在推送到 docker hub  之前先登录，然后执行了 docker tag ，最后执行了 docker push ，如果不执行 docker tag 可以吗？</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>是的，如果您在构建镜像时已经使用了完整的名称（包括用户名和仓库名），那么在推送到 Docker Hub 之前，您不一定需要执行 \`docker tag\` 命令。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>例如，如果您在构建镜像时直接使用了如下命令：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`sh</span></span>
<span class="line"><span>docker build -t jarvis0426/chatgpt-web-service-base:1.0.0 .</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>那么，您可以直接在登录 Docker Hub 之后执行 \`docker push\` 命令，而无需再次使用 \`docker tag\` 命令：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`sh</span></span>
<span class="line"><span>docker login</span></span>
<span class="line"><span>docker push jarvis0426/chatgpt-web-service-base:1.0.0</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>在这种情况下，由于镜像已经被正确地标记为 \`jarvis0426/chatgpt-web-service-base:1.0.0\`，所以直接推送即可。\`docker tag\` 命令主要用于给已有的镜像添加新的标签（tag），如果镜像在构建时已经被赋予了正确的标签，那么就不需要再次使用 \`docker tag\`。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="构建优化" tabindex="-1">构建优化 <a class="header-anchor" href="#构建优化" aria-label="Permalink to &quot;构建优化&quot;">​</a></h2><p>不同版本的镜像大小：</p><p><img src="https://qn.huat.xyz/mac/202404121142346.png" alt="image-20240412114223252"></p><h3 id="_1-46g" tabindex="-1">1.46G <a class="header-anchor" href="#_1-46g" aria-label="Permalink to &quot;1.46G&quot;">​</a></h3><p>1.0.3 这个版本是没有做任何优化的，大小居然达到了<strong>1.46G</strong>，对应的 Dockerfile</p><div class="language-dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于 Node.js 官方镜像</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:18</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建并设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /usr/src/app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制 package.json 和 package-lock.json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package*.json ./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装项目依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制项目文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建应用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暴露端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3002</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动应用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>Docker 镜像大小主要取决于基础镜像的大小和在构建过程中添加的内容。由于基础镜像是 Node.js 的官方镜像，它本身就相对较大，再加上应用程序和依赖项，最终的镜像大小可能会变得相当大。</p><h3 id="_493mb" tabindex="-1">493MB <a class="header-anchor" href="#_493mb" aria-label="Permalink to &quot;493MB&quot;">​</a></h3><ul><li><strong>使用更轻量的基础镜像</strong></li></ul><p>考虑使用 Node.js 的官方轻量级镜像，如 <code>node:18-alpine</code>。Alpine Linux 是一个非常小的 Linux 发行版，专为容器化而设计，可以显著减小镜像大小。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>FROM node:18-alpine</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>只修改这一行代码，就能镜像大小就能降低约三分之二。</p><h3 id="_318mb" tabindex="-1">318MB <a class="header-anchor" href="#_318mb" aria-label="Permalink to &quot;318MB&quot;">​</a></h3><ul><li><strong>多阶段构建</strong></li></ul><p>使用多阶段构建可以将构建过程分为多个阶段，每个阶段使用不同的基础镜像，最终只保留所需的文件。这样可以减少最终镜像的大小。</p><div class="language-dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:18-alpine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /usr/src/app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package*.json ./</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:18-alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /usr/src/app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=builder /usr/src/app/build ./build</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package*.json ./</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3002</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="构建阶段" tabindex="-1">构建阶段 <a class="header-anchor" href="#构建阶段" aria-label="Permalink to &quot;构建阶段&quot;">​</a></h4><ul><li><code>FROM node:18-alpine as builder</code>: 这一行指定了构建阶段使用的基础镜像（<code>node:18-alpine</code>），并给这个阶段命名为 <code>builder</code>。这个名称将在后面的阶段中用于引用当前阶段构建的结果。</li><li><code>WORKDIR /usr/src/app</code>: 设置工作目录为 <code>/usr/src/app</code>。</li><li><code>COPY package*.json ./</code>: 将 <code>package.json</code> 和 <code>package-lock.json</code>（如果存在）复制到工作目录。</li><li><code>RUN npm install</code>: 安装项目依赖。</li><li><code>COPY . .</code>: 将项目的所有其他文件复制到工作目录。</li><li><code>RUN npm run build</code>: 执行构建命令，通常会生成一个 <code>build</code> 目录，其中包含编译后的代码。</li></ul><h4 id="运行阶段" tabindex="-1">运行阶段 <a class="header-anchor" href="#运行阶段" aria-label="Permalink to &quot;运行阶段&quot;">​</a></h4><ul><li><code>FROM node:18-alpine</code>: 这一行开始了新的阶段，同样使用 <code>node:18-alpine</code> 作为基础镜像。这个阶段是为了运行应用准备的。</li><li><code>WORKDIR /usr/src/app</code>: 再次设置工作目录。</li><li><code>COPY --from=builder /usr/src/app/build ./build</code>: 从之前的构建阶段（名为 <code>builder</code>）复制 <code>build</code> 目录到当前工作目录的 <code>build</code> 目录中。这里只复制了我们需要运行应用的编译后的代码。</li><li><code>COPY package*.json ./</code>: 再次复制 <code>package.json</code> 和 <code>package-lock.json</code>（如果存在）。</li><li><code>RUN npm install</code>: 安装依赖。</li><li><code>EXPOSE 3002</code>: 暴露端口 3002。</li><li><code>CMD [&quot;node&quot;, &quot;build/index.mjs&quot;]</code>: 设置容器启动时执行的命令，这里是使用 Node.js 运行编译后的代码。</li></ul><h4 id="为什么使用多阶段构建" tabindex="-1">为什么使用多阶段构建？ <a class="header-anchor" href="#为什么使用多阶段构建" aria-label="Permalink to &quot;为什么使用多阶段构建？&quot;">​</a></h4><ul><li><strong>减小镜像大小</strong>：通过在构建阶段安装所有依赖和编译代码，然后在运行阶段只复制所需的编译后的代码和生产依赖，可以显著减小最终镜像的大小。</li><li><strong>提高安全性</strong>：构建阶段可能需要额外的工具和依赖，这些在运行阶段是不必要的，通过分离这两个阶段，可以减少最终镜像中潜在的安全风险。</li><li><strong>优化构建缓存</strong>：在多阶段构建中，每个阶段都可以利用 Docker 的层缓存，这可以加快后续构建的速度。</li></ul><h3 id="_173mb" tabindex="-1">173MB <a class="header-anchor" href="#_173mb" aria-label="Permalink to &quot;173MB&quot;">​</a></h3><ul><li><strong>仅安装生产依赖</strong></li></ul><p>在安装依赖时，使用 <code>npm install --only=production</code> 命令，这样可以避免安装不必要的开发依赖。</p><div class="language-dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:18-alpine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /usr/src/app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package*.json ./</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:18-alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /usr/src/app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=builder /usr/src/app/build ./build</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package*.json ./</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install --only=production</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3002</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><code>RUN npm install --only=production</code>: 安装仅生产环境所需的依赖，这样可以避免安装不必要的开发依赖，从而减小镜像大小。</p>`,91),p=[l];function t(r,h,k,d,c,o){return i(),a("div",null,p)}const b=s(e,[["render",t]]);export{u as __pageData,b as default};
