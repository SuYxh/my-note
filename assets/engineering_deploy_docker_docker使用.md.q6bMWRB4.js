import{_ as e,c as s,o as a,V as i}from"./chunks/framework.hxTji2_l.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/deploy/docker/docker使用.md","filePath":"engineering/deploy/docker/docker使用.md","lastUpdated":1716803380000}'),l={name:"engineering/deploy/docker/docker使用.md"},n=i(`<p><img src="https://qn.huat.xyz/mac/202404131850557.png" alt="基本操作"></p><p>仓库地址： <a href="https://github.com/SuYxh/docker-study" target="_blank" rel="noreferrer">https://github.com/SuYxh/docker-study</a></p><ul><li><a href="https://github.com/SuYxh/docker-study/blob/main/1.docker%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80node%E9%A1%B9%E7%9B%AE/README.md" target="_blank" rel="noreferrer">docker部署基础node项目</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/2.docker%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80node%E9%A1%B9%E7%9B%AE-env/README.md" target="_blank" rel="noreferrer">docker部署基础node项目-env</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/3.docker%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80node%E9%A1%B9%E7%9B%AE-%E6%8C%82%E8%BD%BD/README.md" target="_blank" rel="noreferrer">docker部署基础node项目-挂载</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/4.docker%E9%83%A8%E7%BD%B2express%E5%92%8CMySQL/README.md" target="_blank" rel="noreferrer">docker部署express和MySQL</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/5.docker%E9%83%A8%E7%BD%B2express%E5%92%8CMySQL%E5%92%8CRedis/README.md" target="_blank" rel="noreferrer">docker部署express和MySQL和Redis</a></li><li><a href="https://github.com/SuYxh/docker-study/blob/main/6.docker%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/README.md" target="_blank" rel="noreferrer">docker部署Vue项目</a></li></ul><h3 id="构建镜像" tabindex="-1"><strong>构建镜像</strong> <a class="header-anchor" href="#构建镜像" aria-label="Permalink to &quot;**构建镜像**&quot;">​</a></h3><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build -t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-dockerhub-usernam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build -t jarvis0426/chatgpt-web-service-base:1.0.0 .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>解析：</p><ul><li><code>docker build</code>: 这是 Docker 的构建命令，用于从 Dockerfile 创建镜像。</li><li><code>-t</code> 参数用于为构建的镜像指定一个标签（tag）。这个标签通常包括仓库名、镜像名和版本号，格式为 <code>&lt;repository&gt;/&lt;image-name&gt;:&lt;tag&gt;</code>。在您的例子中，<code>jarvis0426</code> 是 Docker Hub 的用户名，<code>chatgpt-web-service-base</code> 是镜像的名称，<code>1.0.0</code> 是版本号。</li><li><code>.</code>: 这指定了 Dockerfile 的位置。在这个例子中，<code>.</code> 表示当前目录，意味着 Docker 将在当前目录下查找名为 <code>Dockerfile</code> 的文件，并使用它来构建镜像。</li></ul><p>其他常见参数：</p><ul><li><code>--file</code> 或 <code>-f</code>: 指定要使用的 Dockerfile 路径。默认情况下，Docker 会在当前目录下查找名为 <code>Dockerfile</code> 的文件。如果您的 Dockerfile 位于不同的位置或有不同的名称，您可以使用这个参数指定它。例如：<code>docker build -f path/to/your/Dockerfile .</code></li><li><code>--build-arg</code>: 设置构建时的变量。这些变量可以在 Dockerfile 中使用，通常用于传递敏感信息或配置数据。例如：<code>docker build --build-arg API_KEY=your_api_key .</code></li><li><code>--no-cache</code>: 构建镜像时不使用缓存。这确保了每一层都将重新构建，有助于获取最新的依赖和更新。例如：<code>docker build --no-cache -t my-image .</code></li><li><code>--pull</code>: 总是尝试从远程仓库拉取更新的基础镜像，即使本地已经有了该镜像。这有助于确保基础镜像是最新的。例如：<code>docker build --pull -t my-image .</code></li><li><code>--rm</code>: 构建完成后删除临时容器。这是默认行为，但如果您之前更改过此设置，可以使用此参数确保临时容器被清理。例如：<code>docker build --rm -t my-image .</code></li></ul><p>接下来，我将继续介绍更多关于 Docker 的常用操作和命令。</p><h3 id="启动容器" tabindex="-1"><strong>启动容器</strong> <a class="header-anchor" href="#启动容器" aria-label="Permalink to &quot;**启动容器**&quot;">​</a></h3><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run [OPTIONS] IMAGE [COMMAND] [ARG...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:5000 --name myapp jarvis0426/chatgpt-web-service-base:1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>解析：</p><ul><li><code>docker run</code>: 这是启动 Docker 容器的命令。</li><li><code>-d</code>: 后台运行容器，并返回容器 ID。</li><li><code>-p 5000:5000</code>: 将容器内部的 5000 端口映射到主机的 5000 端口。</li><li><code>--name myapp</code>: 为运行的容器指定一个名称 <code>myapp</code>。</li><li><code>jarvis0426/chatgpt-web-service-base:1.0.0</code>: 指定要运行的镜像。</li></ul><p>其他常见参数：</p><ul><li><code>--env</code> 或 <code>-e</code>: 设置环境变量。例如：<code>docker run -e MY_VAR=my_value my-image</code></li><li><code>--volume</code> 或 <code>-v</code>: 挂载卷，用于数据持久化或目录共享。例如：<code>docker run -v /host/path:/container/path my-image</code></li><li><code>--restart</code>: 设置重启策略。例如：<code>docker run --restart=always my-image</code></li></ul><h3 id="查看容器信息" tabindex="-1"><strong>查看容器信息</strong> <a class="header-anchor" href="#查看容器信息" aria-label="Permalink to &quot;**查看容器信息**&quot;">​</a></h3><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>解析：</p><ul><li><code>docker ps</code>: 显示运行中的容器。</li><li><code>-a</code>: 显示所有容器，包括未运行的。</li></ul><h3 id="停止和删除容器" tabindex="-1"><strong>停止和删除容器</strong> <a class="header-anchor" href="#停止和删除容器" aria-label="Permalink to &quot;**停止和删除容器**&quot;">​</a></h3><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop CONTAINER</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm CONTAINER</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop myapp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm myapp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>解析：</p><ul><li><code>docker stop</code>: 停止一个运行中的容器。</li><li><code>docker rm</code>: 删除一个容器。如果容器正在运行，需要先停止。</li></ul><h3 id="停止和删除所有容器" tabindex="-1">停止和删除所有容器 <a class="header-anchor" href="#停止和删除所有容器" aria-label="Permalink to &quot;停止和删除所有容器&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker rm $(docker stop $(docker ps -a -q))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="查看镜像和删除镜像" tabindex="-1"><strong>查看镜像和删除镜像</strong> <a class="header-anchor" href="#查看镜像和删除镜像" aria-label="Permalink to &quot;**查看镜像和删除镜像**&quot;">​</a></h3><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi IMAGE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi jarvis0426/chatgpt-web-service-base:1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>解析：</p><ul><li><code>docker images</code>: 列出本地的所有镜像。</li><li><code>docker rmi</code>: 删除一个镜像。</li></ul><p>强制删除</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker image rm -f c502452cef3c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>清理未使用的镜像</p><p>如果您想清理所有悬空（未被任何容器引用）的镜像，可以使用 Docker 的垃圾收集命令：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image prune</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这会删除所有未被标记和未被任何容器引用的镜像。要删除特定未使用的镜像，您可以结合过滤器使用：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image prune -a --filter &quot;until=24h&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令将删除所有创建时间超过24小时的未使用镜像。</p><p>在处理镜像删除时，请确保您不会意外删除正在使用或未来可能需要的镜像。如果不确定，最好先单独删除每个标签，以避免数据丢失。</p><h3 id="删除所有镜像" tabindex="-1">删除所有镜像 <a class="header-anchor" href="#删除所有镜像" aria-label="Permalink to &quot;删除所有镜像&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker rmi $(docker images -q)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="容器日志" tabindex="-1"><strong>容器日志</strong> <a class="header-anchor" href="#容器日志" aria-label="Permalink to &quot;**容器日志**&quot;">​</a></h3><p>语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs CONTAINER</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs myapp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>解析：</p><ul><li><code>docker logs</code>: 获取容器的日志输出。</li></ul><h3 id="进入容器" tabindex="-1"><strong>进入容器</strong> <a class="header-anchor" href="#进入容器" aria-label="Permalink to &quot;**进入容器**&quot;">​</a></h3><h4 id="方式一" tabindex="-1">方式一 <a class="header-anchor" href="#方式一" aria-label="Permalink to &quot;方式一&quot;">​</a></h4><p>要进入正在运行的 Docker 容器并与其交互，您可以使用 <code>docker exec</code> 命令配合 <code>-it</code> 参数，这将允许您开启一个交互式终端。如果您想要进入名为 <code>my-node-app-test</code> 的容器，通常使用的命令是：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec -it my-node-app-test /bin/sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里的命令解释如下：</p><ul><li><code>docker exec</code>: 运行一个命令在运行中的容器里。</li><li><code>-it</code>: 这个参数组合是 <code>-i</code> 和 <code>-t</code> 的缩写，<code>-i</code> 表示开启交互式模式，允许您与容器进行交互；<code>-t</code> 分配一个伪终端，这让您感觉就像在使用一个常规终端一样。</li><li><code>my-node-app-test</code>: 指定要进入的容器的名称。</li><li><code>/bin/sh</code>: 在容器中执行的命令，这里是启动一个 shell。根据容器内部的 Linux 发行版，您也可以尝试使用 <code>/bin/bash</code>，但在大多数基于 Alpine 的容器（如您的示例中所用的 <code>node:18-alpine</code>）中，默认的 shell 是 <code>sh</code>。</li></ul><p>一旦执行这个命令，您将会进入容器的终端，可以浏览文件系统、运行命令、查看日志文件等等。当您完成操作并想退出容器时，可以简单地键入 <code>exit</code>。</p><p>这种方法是处理容器问题、进行故障诊断或容器内部探索的常用技巧。</p><h4 id="方式二" tabindex="-1">方式二 <a class="header-anchor" href="#方式二" aria-label="Permalink to &quot;方式二&quot;">​</a></h4><p>要查看在 Docker 容器中的文件内容，您可以使用 <code>docker exec</code> 命令来执行容器内部的命令，比如 <code>cat</code>，来查看文件内容。以下是步骤和命令示例：</p><h5 id="运行容器" tabindex="-1">运行容器 <a class="header-anchor" href="#运行容器" aria-label="Permalink to &quot;运行容器&quot;">​</a></h5><p>假设您已经按照前面的指示构建并运行了容器，容器名为 <code>my-node-app-test</code>。如果还未运行，可以使用如下命令启动：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3002 --name my-node-app-test jarvis0426/my-node-app:test1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="查看文件内容" tabindex="-1">查看文件内容 <a class="header-anchor" href="#查看文件内容" aria-label="Permalink to &quot;查看文件内容&quot;">​</a></h5><p>运行下面的命令来查看容器内 <code>/usr/src/app/env</code> 文件的内容：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec my-node-app-test cat /usr/src/app/env</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令的组成如下：</p><ul><li><code>docker exec</code>: 这个命令用于在运行中的容器内执行命令。</li><li><code>my-node-app-test</code>: 指定要在其中执行命令的容器的名称。</li><li><code>cat /usr/src/app/env</code>: <code>cat</code> 是一个查看文件内容的命令，<code>/usr/src/app/env</code> 是要查看的文件的路径。</li></ul><h3 id="推送镜像" tabindex="-1">推送镜像 <a class="header-anchor" href="#推送镜像" aria-label="Permalink to &quot;推送镜像&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker login</span></span>
<span class="line"><span>docker tag chatgpt-web-service:latest yourusername/chatgpt-web-service:latest</span></span>
<span class="line"><span>docker push yourusername/chatgpt-web-service:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果您在构建镜像时已经使用了完整的名称（包括用户名和仓库名），那么在推送到 Docker Hub 之前，您不一定需要执行 <code>docker tag</code> 命令。</p>`,84),d=[n];function p(t,r,o,c,h,k){return a(),s("div",null,d)}const g=e(l,[["render",p]]);export{b as __pageData,g as default};
