import{_ as e,c as o,o as c,V as d}from"./chunks/framework.hxTji2_l.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/package/符号.md","filePath":"engineering/package/符号.md","lastUpdated":1716774423000}'),a={name:"engineering/package/符号.md"},l=d('<p>符号</p><p>在 <code>package.json</code> 文件中，使用 <code>^</code> 和 <code>~</code> 这样的符号来指定依赖项的版本号非常常见。它们属于版本范围修饰符，帮助定义了可以安装的依赖版本的范围。以下是这些符号的具体用途和含义：</p><h3 id="符号-脱字符" tabindex="-1">符号 <code>^</code> (脱字符) <a class="header-anchor" href="#符号-脱字符" aria-label="Permalink to &quot;符号 `^` (脱字符)&quot;">​</a></h3><ul><li><strong>用途</strong>：当在版本号前使用 <code>^</code> 符号时，它允许安装与指定版本在最左边的非零数字相同的主版本号的任何新版本。这意味着可以进行次要版本和补丁版本的更新。</li><li><strong>例子</strong>： <ul><li><code>^1.2.3</code> 表示安装 <code>1.x.x</code> 版本中，大于或等于 <code>1.2.3</code> 且小于 <code>2.0.0</code> 的最新版本。</li><li><code>^0.2.3</code> 通常只会更新到 <code>0.2.x</code> 中最新的版本，因为在 <code>0</code> 为主版本号时，npm 将其视为每次次要版本更新都可能引入重大更改。</li></ul></li></ul><h3 id="符号-波浪号" tabindex="-1">符号 <code>~</code> (波浪号) <a class="header-anchor" href="#符号-波浪号" aria-label="Permalink to &quot;符号 `~` (波浪号)&quot;">​</a></h3><ul><li><strong>用途</strong>：当在版本号前使用 <code>~</code> 符号时，它允许安装的版本只在补丁级别上与指定版本相同的次要版本。这意味着只进行补丁级别的更新，通常用于需要更精细控制版本的场合。</li><li><strong>例子</strong>： <ul><li><code>~1.2.3</code> 表示安装 <code>1.2.x</code> 版本中，大于或等于 <code>1.2.3</code> 且小于 <code>1.3.0</code> 的最新版本。</li><li><code>~1.2</code> 等同于 <code>~1.2.0</code>，意味着安装 <code>1.2.x</code> 中大于或等于 <code>1.2.0</code> 且小于 <code>1.3.0</code> 的版本。</li></ul></li></ul><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li>使用 <code>^</code> 更适合那些你信任其遵循语义化版本控制的库，这样可以自动接受新的功能和补丁，带来的风险相对较小。</li><li>使用 <code>~</code> 当你需要更谨慎地更新依赖，尤其是当库的更新可能引入更敏感或破坏性变更时。</li></ul><p>这些符号的选择依赖于你对项目依赖的管理策略和对依赖库更新的信任程度。正确使用它们可以帮助你有效地管理项目依赖的稳定性和最新性。</p><p>在 <code>package.json</code> 中，除了 <code>^</code> 和 <code>~</code> 外，还有其他几种符号和方式可以用来指定依赖的版本。这些符号帮助开发者更精确地控制项目依赖的版本，以确保项目的稳定性和兼容性。下面是一些常见的符号及其用途：</p><h3 id="无符号" tabindex="-1">无符号 <a class="header-anchor" href="#无符号" aria-label="Permalink to &quot;无符号&quot;">​</a></h3><ul><li><strong>用途</strong>：直接指定一个具体的版本号，没有任何前缀符号，这将精确地锁定依赖到这个特定版本。</li><li><strong>例子</strong>：<code>&quot;1.2.3&quot;</code> 指定使用版本号为 <code>1.2.3</code> 的依赖。</li></ul><h3 id="符号-、-、-、" tabindex="-1">符号 <code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code> <a class="header-anchor" href="#符号-、-、-、" aria-label="Permalink to &quot;符号 `&gt;`、`&lt;`、`&gt;=`、`&lt;=`&quot;">​</a></h3><ul><li><strong>用途</strong>：这些符号表示大于、小于、大于等于、小于等于某个版本。</li><li><strong>例子</strong>： <ul><li><code>&quot;&gt;1.2.3&quot;</code> 表示使用大于 <code>1.2.3</code> 的版本。</li><li><code>&quot;&lt;1.2.3&quot;</code> 表示使用小于 <code>1.2.3</code> 的版本。</li><li><code>&quot;&gt;=1.2.3&quot;</code> 表示使用大于等于 <code>1.2.3</code> 的版本。</li><li><code>&quot;&lt;=1.2.3&quot;</code> 表示使用小于等于 <code>1.2.3</code> 的版本。</li></ul></li></ul><h3 id="符号" tabindex="-1">符号 <code>||</code> <a class="header-anchor" href="#符号" aria-label="Permalink to &quot;符号 `||`&quot;">​</a></h3><ul><li><strong>用途</strong>：表示逻辑 OR，允许多个版本范围。</li><li><strong>例子</strong>：<code>&quot;&gt;=1.2.3 &lt;2.0.0 || &gt;=2.1.0 &lt;3.0.0&quot;</code> 允许使用 <code>1.2.3</code> 到 <code>2.0.0</code> 之间（不包括 <code>2.0.0</code>）或 <code>2.1.0</code> 到 <code>3.0.0</code> 之间（不包括 <code>3.0.0</code>）的版本。</li></ul><h3 id="符号-通配符" tabindex="-1">符号 <code>*</code> (通配符) <a class="header-anchor" href="#符号-通配符" aria-label="Permalink to &quot;符号 `*` (通配符)&quot;">​</a></h3><ul><li><strong>用途</strong>：表示接受任何版本。</li><li><strong>例子</strong>：<code>&quot;*&quot;</code> 表示可以使用该依赖的任何版本。</li></ul><h3 id="特定前缀" tabindex="-1">特定前缀 <a class="header-anchor" href="#特定前缀" aria-label="Permalink to &quot;特定前缀&quot;">​</a></h3><ul><li><strong><code>x</code></strong>：可以用作版本号中的通配符，例如 <code>1.2.x</code> 或 <code>1.x</code>。 <ul><li><code>1.2.x</code> 表示 <code>1.2.0</code>、<code>1.2.1</code> 等。</li><li><code>1.x</code> 表示 <code>1.0.0</code>、<code>1.1.0</code>、<code>1.2.0</code> 等。</li></ul></li><li><strong><code>-</code></strong>：范围修饰符，例如 <code>1.2.3 - 2.3.4</code> 表示从 <code>1.2.3</code> 到 <code>2.3.4</code> 的所有版本。</li></ul><h3 id="锁定版本" tabindex="-1">锁定版本 <a class="header-anchor" href="#锁定版本" aria-label="Permalink to &quot;锁定版本&quot;">​</a></h3><p>要完全锁定一个依赖的版本，只需在 <code>package.json</code> 中指定该版本号，不使用任何前缀符号。例如：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;some-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.2.3&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这种方式确保安装的 <code>some-package</code> 版本始终是 <code>1.2.3</code>。除此之外，你还可以使用工具如 <code>npm shrinkwrap</code> 或 <code>pnpm</code> 和 <code>yarn</code> 的锁文件（如 <code>pnpm-lock.yaml</code> 或 <code>yarn.lock</code>）来锁定整个项目依赖的精确版本，这在团队开发中尤其有用，以确保所有开发者和部署环境使用完全一致的依赖版本。</p>',24),i=[l];function t(s,n,r,h,u,p){return c(),o("div",null,i)}const q=e(a,[["render",t]]);export{k as __pageData,q as default};
