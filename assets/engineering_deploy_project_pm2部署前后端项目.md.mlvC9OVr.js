import{_ as s,c as a,o as n,V as i}from"./chunks/framework.hxTji2_l.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/deploy/project/pm2部署前后端项目.md","filePath":"engineering/deploy/project/pm2部署前后端项目.md","lastUpdated":1709799029000}'),e={name:"engineering/deploy/project/pm2部署前后端项目.md"},p=i(`<h2 id="pm2-简介" tabindex="-1">pm2 简介 <a class="header-anchor" href="#pm2-简介" aria-label="Permalink to &quot;pm2 简介&quot;">​</a></h2><p>PM2 是常用的 node 进程管理工具，它可以提供 node.js 应用管理，如自动重载、性能监控、负载均衡等。同类工具有 Supervisor、Forever 等。</p><p>pm2 是一个进程管理工具,可以用它来管理你的 node 进程，并查看 node 进程的状态，当然也支持性能监控，进程守护，负载均衡等功能。pm2 基本是 Nodejs 应用程序不二的守护进程选择，事实上它并不仅仅可以启动 Nodejs 的程序，只要是一般的脚本的程序它同样可以胜任。</p><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><h3 id="配置-ssh-链接服务器" tabindex="-1">配置 SSH 链接服务器 <a class="header-anchor" href="#配置-ssh-链接服务器" aria-label="Permalink to &quot;配置 SSH 链接服务器&quot;">​</a></h3><p>目的： 在执行 pm2 部署命令的时候不需要频繁的输入服务器的密码</p><h4 id="生成密钥" tabindex="-1">生成密钥 <a class="header-anchor" href="#生成密钥" aria-label="Permalink to &quot;生成密钥&quot;">​</a></h4><p>本地执行生成密钥对命令，生成的密钥位于<code>~/.ssh</code>目录中，此处生成的公钥为<code>id_ed25519.pub</code>，私钥为<code>id_ed25519</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ssh-keygen -t ed25519 -C &quot;xxx@163.com&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://qn.huat.xyz/mac/20230503095440.png#id=AQ8cQ&amp;originHeight=712&amp;originWidth=1104&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="修改本地-ssh-配置" tabindex="-1">修改本地 SSH 配置 <a class="header-anchor" href="#修改本地-ssh-配置" aria-label="Permalink to &quot;修改本地 SSH 配置&quot;">​</a></h4><p><code>vim ~/.ssh/config</code> ，如果没有就新建一个。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Host huaweiyun # 登录的服务器别名</span></span>
<span class="line"><span>  HostName 233.233.233.233  # 要登录的服务器ip</span></span>
<span class="line"><span>  User root   # 登录名</span></span>
<span class="line"><span>  IdentityFile ~/.ssh/id_ed25519 # 你的私钥路径</span></span>
<span class="line"><span>  ServerAliveInterval 30</span></span>
<span class="line"><span>  TCPKeepAlive yes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="修改服务器配置" tabindex="-1">修改服务器配置 <a class="header-anchor" href="#修改服务器配置" aria-label="Permalink to &quot;修改服务器配置&quot;">​</a></h4><p><code>cat ~/.ssh/id_ed25519.pub</code> 复制本地生成的公钥内容，粘贴到云服务器的 <code>~/.ssh/authorized_keys</code> 文件中</p><h4 id="链接服务器" tabindex="-1">链接服务器 <a class="header-anchor" href="#链接服务器" aria-label="Permalink to &quot;链接服务器&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ssh huaweiyun</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>配置完成后，就可以通过 ssh 登陆了</p><h3 id="保证服务器可拉取仓库代码" tabindex="-1">保证服务器可拉取仓库代码 <a class="header-anchor" href="#保证服务器可拉取仓库代码" aria-label="Permalink to &quot;保证服务器可拉取仓库代码&quot;">​</a></h3><blockquote><p>以码云私有仓库为例</p></blockquote><p>1、在云服务器上通过以下命令生成一份密钥对</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ssh-keygen -t ed25519 -C &quot;xxx@163.com&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 其他</span></span>
<span class="line"><span>ssh-keygen -t rsa -C &quot;xxx@xx.com&quot;</span></span>
<span class="line"><span>// 验证</span></span>
<span class="line"><span>ssh -T git@gitlab.example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>2、然后将公钥放入仓库的部署公钥中</p><p><img src="https://qn.huat.xyz/mac/20230503100503.png#id=GmwvX&amp;originHeight=1232&amp;originWidth=2578&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>3、在服务器上先创建个文件夹，测试一下拉取</p><h2 id="部署项目" tabindex="-1">部署项目 <a class="header-anchor" href="#部署项目" aria-label="Permalink to &quot;部署项目&quot;">​</a></h2><p>在项目根目录下新建一个 deploy.yaml 文件</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># deploy.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./app.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 入口文件</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 程序名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 环境变量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      COMMON_VARIABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_production</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      NODE_ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 部署脚本</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  production</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生产环境</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 服务器的用户名</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.1.124.96</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 服务器的ip地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ssh端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">origin/master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 要拉取的git分支</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ssh_options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">StrictHostKeyChecking=yes</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # SSH 公钥检查</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">git@gitee.com:dahuang/deploy_test.git</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 远程仓库地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/www/demo/deploy_test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 拉取到服务器某个目录下</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    pre-deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">git pull</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 部署前执行</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    post-deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install &amp;&amp; pm2 restart app</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 部署后执行</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      NODE_ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>如果是 eggjs 项目，部署完成后，在服务器上的 config 文件夹中新建 env 文件，写入 prod</p></blockquote><h3 id="首次部署" tabindex="-1">首次部署 <a class="header-anchor" href="#首次部署" aria-label="Permalink to &quot;首次部署&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 deploy deploy.yaml production setup</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>部署完成后，可登陆服务器查看配置的目录下是否从 git 上拉取了项目</p><h3 id="后续部署" tabindex="-1">后续部署 <a class="header-anchor" href="#后续部署" aria-label="Permalink to &quot;后续部署&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 deploy deploy.yaml production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="前端项目" tabindex="-1">前端项目 <a class="header-anchor" href="#前端项目" aria-label="Permalink to &quot;前端项目&quot;">​</a></h3><p>如 vue-cli 的项目，自动部署到服务器，自动执行 npm run build 命令，生成的 dist 目录，指定到 nginx 的静态文件目录下</p><p>或者直接使用命令，将打包后的 dist 文件夹，上传到服务器的静态文件夹</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>scp -r ./dist root@120.46.190.74:/www/wwwroot/admin1.ironc.cn/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="可能会遇到的坑" tabindex="-1">可能会遇到的坑 <a class="header-anchor" href="#可能会遇到的坑" aria-label="Permalink to &quot;可能会遇到的坑&quot;">​</a></h2><p>1、在 window 系统下 vscode 的命令行程序，以及 powershell 执行部署的命令时，出现部署失败</p><p><img src="https://qn.huat.xyz/mac/20230503101235.png#id=kpant&amp;originHeight=101&amp;originWidth=447&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>解决方案：使用 git 命令行来执行</p><p>2、 pm2 command not found post-deploy hook failed Deploy failed 1</p><blockquote><p>如果使用 宝塔搭的环境可能存在这个问题</p></blockquote><p><strong>原因</strong></p><p>这个提示是找不到 npm 跟 pm2 命令， 但是我们在服务器上使用 npm -v  pm2 -v 是可以查看到版本好的， 也就是安装好的。这个时候提示  command not found 是因为在自动部署的时候 使用的全局下的 npm pm2 命令，在全局环境下 找不到这两个命令， 自然就报错了，为了验证， 可以执行 <code>sudo npm -v</code>  <code>sudo pm2 -v</code>   也会提示 <code>command not found</code></p><p><strong>解决方案</strong></p><p>为了解决这个问题需要让 npm pm2 建立软连接，相当于放在环境变量中。首先查看 npm 的安装位置，可以使用 <code>whereis npm</code> 查看 npm 的安装路径， 如果 <code>whereis npm</code>   显示路径为空，则使用 <code>which npm</code> 比如 这里显示的路径是 <code>/usr/local/src/node-v10.16.3-linux-x64/bin/npm</code> ，然后执行</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo ln -s  /usr/local/src/node-v10.16.3-linux-x64/bin/npm  /usr/bin/npm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这就相当于把 npm 链接到了 全局环境变量中，这时候在执行 sudo npm -v   就不报错了。</p><p>注意：</p><p>需要先将 node 和 npm 链接到全局环境变量中，在将 pm2 链接到全局环境变量中，再去使用 <code>sudo npm -v</code> 测试</p><p>如果配置软连接后还不行，那么就单独安装 nodejs，然后再用 npm 全局安装 pm2， 具体方法：</p><ol><li>首先更新本地安装的软件包列表：</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo apt-get update</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>安装 Node.js 16：</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo apt-get install nodejs=16.*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将安装 Node.js 16 版本以及 npm 包管理器，并且使用&quot;=16.*&quot;来安装 Node.js 16.x.x 的最新版。 注意：如果你要安装最新的 Node.js 16，可以将上面的命令替换为： <code>-y</code>选项将自动确认所有安装过程中提示的问题。</p><ol start="3"><li>验证安装是否成功：</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将显示 Node.js 的版本号，如果成功安装，则应该显示 16.x.x 版本号。</p><h2 id="测试部署代码" tabindex="-1">测试部署代码 <a class="header-anchor" href="#测试部署代码" aria-label="Permalink to &quot;测试部署代码&quot;">​</a></h2><p><a href="https://wwa.lanzous.com/iFlDomye3ud" target="_blank" rel="noreferrer">https://wwa.lanzous.com/iFlDomye3ud</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.cnblogs.com/yalong/p/13935503.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/yalong/p/13935503.html</a><a href="https://www.cnblogs.com/kunmomo/p/14990703.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/kunmomo/p/14990703.html</a></p><p><a href="https://www.cnblogs.com/yalong/p/13935503.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/yalong/p/13935503.html</a><a href="https://www.cnblogs.com/lentoo/p/9539137.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/lentoo/p/9539137.html</a> GitHub action 部署 vue 项目：<a href="https://www.bilibili.com/video/BV1vX4y1K7bQ?p=15" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1vX4y1K7bQ?p=15</a></p><p>若有收获，就点个赞吧</p>`,67),l=[p];function t(r,h,o,d,c,k){return n(),a("div",null,l)}const b=s(e,[["render",t]]);export{u as __pageData,b as default};
