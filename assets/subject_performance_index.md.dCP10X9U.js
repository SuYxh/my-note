import{_ as e,c as t,o as a,V as o}from"./chunks/framework.hxTji2_l.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"subject/performance/index.md","filePath":"subject/performance/index.md","lastUpdated":1718171256000}'),r={name:"subject/performance/index.md"},s=o('<p>性能优化检测方法</p><p>量化性能优化的结果是评估优化效果的关键步骤，它帮助你理解所做的优化是否有效，以及优化的程度如何。以下是一些常用的方法和工具，用于量化Web性能优化的结果：</p><h3 id="_1-使用性能评估工具" tabindex="-1">1. 使用性能评估工具 <a class="header-anchor" href="#_1-使用性能评估工具" aria-label="Permalink to &quot;1. 使用性能评估工具&quot;">​</a></h3><ul><li><strong>Lighthouse</strong>：Google的Lighthouse是一个开源工具，可以对网页进行全面的性能评估，包括加载性能、可访问性、应用程序的最佳实践和SEO。Lighthouse可以直接从Chrome DevTools运行，也可以作为CLI工具或Node模块使用。</li><li><strong>WebPageTest</strong>：WebPageTest是一个在线工具，允许你从不同地理位置和不同设备配置进行网页性能测试。它提供了详细的加载水平线图和建议，帮助你识别性能瓶颈。</li><li><strong>PageSpeed Insights</strong>：Google的PageSpeed Insights提供了一个网页性能评分，并基于实际的用户数据（如果可用）和实验室数据给出优化建议。</li></ul><h3 id="_2-浏览器开发者工具" tabindex="-1">2. 浏览器开发者工具 <a class="header-anchor" href="#_2-浏览器开发者工具" aria-label="Permalink to &quot;2. 浏览器开发者工具&quot;">​</a></h3><ul><li><strong>Chrome DevTools</strong>：Chrome浏览器内置的开发者工具提供了性能分析功能，包括网络请求监控、JavaScript和CSS性能分析等。使用这些工具可以帮助你直观地了解页面加载过程和潜在的性能问题。</li></ul><h3 id="_3-自定义性能监控" tabindex="-1">3. 自定义性能监控 <a class="header-anchor" href="#_3-自定义性能监控" aria-label="Permalink to &quot;3. 自定义性能监控&quot;">​</a></h3><ul><li><strong>Performance API</strong>：现代浏览器提供的Performance API允许你收集和分析页面加载和运行时的性能数据。使用这些API，你可以测量特定操作的耗时，例如页面渲染时间、动态加载资源的时间等。</li><li><strong>Google Analytics</strong>：Google Analytics的“站点速度”报告可以提供基于真实用户数据的网站性能指标，帮助你了解用户在实际使用中的体验。</li></ul><h3 id="_4-关注关键性能指标-kpis" tabindex="-1">4. 关注关键性能指标（KPIs） <a class="header-anchor" href="#_4-关注关键性能指标-kpis" aria-label="Permalink to &quot;4. 关注关键性能指标（KPIs）&quot;">​</a></h3><p>确定并监控几个关键性能指标（KPIs）对于量化性能改进非常重要。常见的性能KPIs包括：</p><ul><li><strong>首次内容绘制（FCP）</strong>：页面首个内容（如文本、图片等）渲染的时间。</li><li><strong>最大内容绘制（LCP）</strong>：页面上最大内容元素加载的时间。</li><li><strong>首次有意义绘制（FMP）</strong>：页面主要内容变得可见的时间。</li><li><strong>时间到可交互（TTI）</strong>：页面完全可交互的时间。</li><li><strong>总阻塞时间（TBT）</strong>：页面加载过程中所有任务阻塞用户输入的总时长。</li></ul><h3 id="_5-对比优化前后的结果" tabindex="-1">5. 对比优化前后的结果 <a class="header-anchor" href="#_5-对比优化前后的结果" aria-label="Permalink to &quot;5. 对比优化前后的结果&quot;">​</a></h3><p>进行优化后，使用上述工具和指标对比优化前后的数据，关注关键性能指标的变化。理想情况下，优化应该导致加载时间缩短、性能评分提高、用户体验改善。</p><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h3><p>前端性能测试工具 Lighthouse(灯塔)使用</p><p><a href="https://juejin.cn/post/7220230543005253691" target="_blank" rel="noreferrer">https://juejin.cn/post/7220230543005253691</a></p><p>如何使用Lighthouse性能检测工具</p><p><a href="https://juejin.cn/post/6950855971379871757" target="_blank" rel="noreferrer">https://juejin.cn/post/6950855971379871757</a></p>',18),n=[s];function i(l,h,c,p,d,g){return a(),t("div",null,n)}const P=e(r,[["render",i]]);export{u as __pageData,P as default};
