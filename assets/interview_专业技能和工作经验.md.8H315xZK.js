import{_ as s,c as a,o as i,V as n}from"./chunks/framework.hxTji2_l.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/专业技能和工作经验.md","filePath":"interview/专业技能和工作经验.md","lastUpdated":1716774476000}'),e={name:"interview/专业技能和工作经验.md"},p=n(`<p>面试官，您好，我叫杨鑫昊。一名充满热情的前端开发工程师！在过去的几年中，我在公司负责过多样化的业务，独立开发了包括基于React技术栈的中后台项目；基于转转生态的VSCode插件，增强了团队的开发效率和开发体验；以及基于 nodejs 的游戏账号数据分析与验号报告系统，为业务带来了巨大的业务价值，每月能够多赚 30 万！我也乐于在日常工作中发现并解决潜在的业务挑战。</p><p>对于技术方面，始终保持着热爱和好奇心，并付之于行动，拥有个人博客，累积了丰富的项目模板，并结合自己的脚手架能快速创建项目；并且对AIGC的应用前景保持着极高的兴趣和实践探索。</p><p>同时，我也注重个人成长，会为自己的学习和发展制定计划，并且持续投入实践中。</p><p>很期待能为贵公司贡献我的能力和热情。</p><h2 id="专业技能" tabindex="-1">专业技能 <a class="header-anchor" href="#专业技能" aria-label="Permalink to &quot;专业技能&quot;">​</a></h2><ul><li><p>熟练使用HTML5和CSS3，掌握各种布局，如Flex</p><p>header、footer、main、article、section等，好处： 有利于 <code>SEO</code> 优化、增强了代码的可读性和可维护性、方便其他设备解析（屏幕阅读器、盲人阅读器）提升了用户体验</p></li><li><p>熟练使用JavaScript及ECMAScript 6+，掌握面向对象编程思想</p></li><li><p>熟练使用Vue全家桶，熟练使用Composition API开发，具备组件化开发经验</p></li><li><p>熟悉React和umi框架，能够高效地进行项目开发和维护</p></li><li><p>熟练使用Element Plus、Ant Design、ProComponents、Vant等流行的UI组件库</p></li><li><p>熟悉Webpack和Vite构建工具，能够自定义配置以优化前端资源的打包和加载</p></li><li><p>熟悉Egg.js、Koa、Express等Node.js框架，了解NestJS，具备后端服务开发能力</p></li><li><p>熟悉MySQL数据库，掌握Sequelize ORM的使用，能够设计和优化数据存储方案</p></li><li><p>了解CI/CD流程，能够运用Docker和GitHub Actions实现自动化部署</p></li><li><p>了解AIGC应用和AI知识库的构建，对接入人工智能技术到前端项目有初步实践</p></li><li><p>了解鸿蒙系统开发</p></li></ul><h3 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h3><h4 id="描述一下你使用docker部署前端应用的流程。" tabindex="-1"><strong>描述一下你使用Docker部署前端应用的流程。</strong> <a class="header-anchor" href="#描述一下你使用docker部署前端应用的流程。" aria-label="Permalink to &quot;**描述一下你使用Docker部署前端应用的流程。**&quot;">​</a></h4><ul><li><p>我会创建一个Dockerfile来定义一个镜像，其中包括我的前端应用的构建过程。然后，我会使用Docker命令构建这个镜像，并将其推送到容器仓库。在服务器上，我会拉取这个镜像并运行一个容器，这个容器会启动一个Web服务器（如Nginx），并将构建好的前端文件提供服务。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 构建阶段</span></span>
<span class="line"><span>FROM node:lts-alpine as build-stage</span></span>
<span class="line"><span>WORKDIR /app</span></span>
<span class="line"><span>COPY package*.json ./</span></span>
<span class="line"><span>RUN npm install</span></span>
<span class="line"><span>COPY . .</span></span>
<span class="line"><span>RUN npm run build</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 生产阶段</span></span>
<span class="line"><span>FROM nginx:stable-alpine as production-stage</span></span>
<span class="line"><span>COPY --from=build-stage /app/dist /usr/share/nginx/html</span></span>
<span class="line"><span>EXPOSE 80</span></span>
<span class="line"><span>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 构建Docker镜像</span></span>
<span class="line"><span>docker build -t my-vue-app .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 运行Docker容器</span></span>
<span class="line"><span>docker run -it -p 8080:80 my-vue-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h4 id="你如何在项目中实现持续集成和持续部署-ci-cd" tabindex="-1"><strong>你如何在项目中实现持续集成和持续部署（CI/CD）？</strong> <a class="header-anchor" href="#你如何在项目中实现持续集成和持续部署-ci-cd" aria-label="Permalink to &quot;**你如何在项目中实现持续集成和持续部署（CI/CD）？**&quot;">​</a></h4><ul><li>我会使用GitHub Actions或Jenkins等工具来设置CI/CD管道。每当有新的代码推送到仓库时，CI工具会自动运行构建和测试流程，确保代码质量。如果构建和测试成功，CD流程会自动将代码部署到生产环境或测试环境。</li></ul><h4 id="你如何看待ai在前端开发中的应用-能否提供一个实际的例子" tabindex="-1"><strong>你如何看待AI在前端开发中的应用？能否提供一个实际的例子？</strong> <a class="header-anchor" href="#你如何看待ai在前端开发中的应用-能否提供一个实际的例子" aria-label="Permalink to &quot;**你如何看待AI在前端开发中的应用？能否提供一个实际的例子？**&quot;">​</a></h4><ul><li>我认为AI可以在前端开发中扮演重要角色，比如通过机器学习改善用户体验，自动化测试等。一个实际的例子是使用TensorFlow.js来实现一个图片分类器，用户上传图片后，前端应用能够即时显示图片的分类信息。</li></ul><p>CI/CD 是持续集成（Continuous Integration）和持续交付或持续部署（Continuous Delivery/Continuous Deployment）的缩写，它们是现代软件开发实践中的关键概念，特别是在敏捷开发和DevOps文化中。</p><h4 id="持续集成-ci" tabindex="-1">持续集成（CI） <a class="header-anchor" href="#持续集成-ci" aria-label="Permalink to &quot;持续集成（CI）&quot;">​</a></h4><p>持续集成是一种软件开发实践，在这种实践中，开发人员频繁地（通常是每天多次）将代码变更合并到主分支中。每次合并后，自动化的构建和测试流程会运行，以确保这些变更不会导致生产问题。这样可以尽早发现和解决集成错误，提高软件质量，减少发布新版本时的风险。</p><p>CI的关键实践包括：</p><ul><li><strong>版本控制</strong>：所有代码变更都提交到版本控制系统中。</li><li><strong>自动化构建</strong>：代码变更后自动运行构建过程。</li><li><strong>自动化测试</strong>：在构建阶段后自动运行测试套件。</li><li><strong>快速反馈</strong>：如果构建或测试失败，立即通知开发团队。</li></ul><h4 id="持续交付-持续部署-cd" tabindex="-1">持续交付/持续部署（CD） <a class="header-anchor" href="#持续交付-持续部署-cd" aria-label="Permalink to &quot;持续交付/持续部署（CD）&quot;">​</a></h4><p>持续交付和持续部署是持续集成的延伸。它们涉及自动化软件的发布过程，以便可以快速、可靠地将新版本的软件部署到生产环境中。</p><ul><li><strong>持续交付</strong>：是指自动化测试通过后，软件的新版本可以被频繁地并且可靠地发布到预生产或生产环境中。在持续交付中，部署到生产的步骤通常需要手动触发。</li><li><strong>持续部署</strong>：如果持续交付的流程中，部署步骤也被自动化，那么就变成了持续部署。这意味着每次提交后，如果自动化测试通过，代码就会自动部署到生产环境中。</li></ul><p>CI/CD的实施通常依赖于自动化服务器（如Jenkins、Travis CI、GitLab CI、CircleCI等）来执行这些任务，并且还需要一套良好的测试套件来保证代码质量。通过CI/CD，团队可以更快地交付产品功能、修复bug，并响应客户需求。</p><h4 id="脚手架" tabindex="-1">脚手架 <a class="header-anchor" href="#脚手架" aria-label="Permalink to &quot;脚手架&quot;">​</a></h4><p>1、为什么要学习脚手架开发？</p><p>提高开发效率、流程自动化，项目创建、下载、测试、提交和发布</p><p>2、原理</p><ul><li>Shell 是操作系统提供的接口程序，用于接收用户输入的命令，交给操作系统内核执行并接收响应结果</li><li>Bash 是 Shell 的一个实现，用于执行用户输入的命令</li><li>CLI 是 Bash 的运行环境，CLI 接收用户键盘输入，交给 Bash 执行，并将程序处理结果结果以文本形式进行显示</li></ul><p><img src="https://qn.huat.xyz/mac/202311121007448.png" alt="cli_process"></p><p>开发流程</p><ul><li>创建 <code>npm</code> 项目</li><li>创建脚手架入口文件，最上方添加：</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>配置 <code>package.json</code>，添加 <code>bin</code> 属性</li><li>编写脚手架代码</li><li>将脚手架发布到 <code>npm</code></li></ul><p>commander、chalk、ora、inquirer</p><h4 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h4><p><code>git merge</code> 和 <code>git rebase</code> 都是 Git 版本控制系统中用于合并不同分支更改的命令，但它们的工作方式和结果各有不同。</p><p><code>git merge</code></p><ol><li><p><strong>工作原理</strong>：<code>git merge</code> 会创建一个新的“合并提交”来合并两个分支的更改。这种方法保留了项目历史的完整性和分支结构。</p></li><li><p><strong>结果</strong>：合并后的历史是一个非线性的历史。这意味着所有的提交（来自两个分支）都将按照它们原始的提交顺序显示。</p></li><li><p><strong>适用场景</strong>：更适合于合并公共或共享分支，比如将 <code>feature</code> 分支合并回 <code>main</code> 或 <code>develop</code> 分支。</p></li><li><p><strong>优点</strong>：保持了完整的历史记录，可以清楚地看到所有更改和合并点。</p></li><li><p><strong>缺点</strong>：可能会导致复杂的分支历史，特别是在频繁合并的项目中。</p></li></ol><p><code>git rebase</code></p><ol><li><p><strong>工作原理</strong>：<code>git rebase</code> 会重新应用一个分支上的更改到另一个分支。它会将分支上的每个提交“拾取”出来，然后在另一个分支的顶端重新提交。</p></li><li><p><strong>结果</strong>：合并后的历史是一个线性的历史。这意味着所有的提交都将按照新的顺序排列。</p></li><li><p><strong>适用场景</strong>：更适合于个人分支或者在还没有共享到远程仓库之前的分支，以获得更干净、线性的历史。</p></li><li><p><strong>优点</strong>：创建一个更干净、直线型的项目历史，没有多余的合并提交。</p></li><li><p><strong>缺点</strong>：可以改变历史（如果对已经推送到共享仓库的分支进行 rebase，会造成问题）。不适合公共分支，因为它会重写历史。</p></li></ol><p>区别和联系</p><ul><li><strong>区别</strong>：主要在于它们如何整合历史。<code>merge</code> 保留了所有的历史和分支结构，而 <code>rebase</code> 则创建一个更线性的历史。</li><li><strong>联系</strong>：它们都用于将更改从一个分支合并到另一个分支，但使用场景和合并后的历史不同。</li></ul><p>总之，选择 <code>merge</code> 还是 <code>rebase</code> 取决于你希望项目历史呈现的方式以及你正在操作的分支类型。通常，在公共分支上使用 <code>merge</code>，在私人或本地分支上使用 <code>rebase</code> 是一个好的实践。</p><p>转转投资红布林后，新起二手奢侈品业务，包含奢侈品的售卖和回收。主要负责的工作有：</p><p>1、负责基于Hybrid + vue技术栈的回收业务日常的开发迭代和优化工作，通过使用预渲染等技术，使首屏时间从平均1500ms降低到400ms，达到秒开的体验</p><p>2、参与基础组件库的研发，为其设计了配套的vscode插件，显著提高了团队的开发效率，并在公司进行了发布。随着前端生态的不断丰富，Yao插件通过集成最新的OpenAI GPT-4技术，不仅实现了代码的智能生成与解读，更通过智能mock等高级功能极大地丰富了开发体验，并荣获公司AIGC开发大赛三等奖</p><p>3、基于React + Umi4从0到1的搭建CRM系统，并接入SSO和RBAC权限管理平台；修改Nginx配置，使其达到多页应用的效果，从而接入第三方外呼系统；使用websocket进行实时通知等</p><p>4、技术赋能业务，基于nodejs的Eggjs框架设计了一套数据爬取服务，解决了游戏商品存在但是无法被搜索到，同时将抓取的数据包装成验号报告提高买家的信任度。上线后，账号整体支付率提升0.5%，按照当时商详UV6万，发货率40%，每天可以提升发货120单，预估每日新增利润11000元， 每月增加30万</p><h2 id="工作经历" tabindex="-1">工作经历 <a class="header-anchor" href="#工作经历" aria-label="Permalink to &quot;工作经历&quot;">​</a></h2><p>在转转投资红布林后，为了推进二手奢侈品业务的发展，包括奢侈品的售卖和回收，我承担了关键的技术开发和业务优化任务。我的工作贡献如下：</p><ol><li><strong>Hybrid App性能优化：</strong> 负责基于Hybrid + Vue技术栈的二手奢侈品回收业务的开发迭代。通过使用预渲染等技术，成功将首屏加载时间从平均1500ms优化至495ms，实现了接近秒开的用户体验。</li><li><strong>提效工具开发：</strong> 针对zzui组件库设计开发了配套的VSCode插件，显著提高了团队的开发效率。此外，Yao插件集成了OpenAI GPT-4技术，开发了代码智能生成、解读、优化和ts转json等高级功能，极大地丰富了开发体验，该项目在公司AIGC开发大赛中荣获三等奖。</li><li><strong>CRM系统搭建与权限管理：</strong> 从零开始基于React + Umi4搭建CRM系统，成功接入SSO和RBAC权限管理平台。通过修改Nginx配置，实现了多页应用的接入，以及第三方外呼系统的集成。此外，通过WebSocket实现了实时通知功能，增强了业务响应的即时性。</li><li><strong>技术赋能业务增长：</strong> 基于Node.js的Egg.js框架，设计并实现了一套数据爬取服务。此服务有效解决了游戏商品搜索不准确的问题，同时生成的验号报告显著提高了买家信任度。该技术解决方案的上线，使账号整体支付率提升0.5%，根据当时的商详UV和发货率，每天预估可提升发货量120单，预估每日新增利润11,000元，从而每月增加约30万元的收入。</li></ol><h2 id="转转奢侈品交易" tabindex="-1">转转奢侈品交易 <a class="header-anchor" href="#转转奢侈品交易" aria-label="Permalink to &quot;转转奢侈品交易&quot;">​</a></h2><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>在业务快速发展和与红布林深入合作的背景下，同红布林一起开发了上门回收的流程，转转侧承担了上门回收师APP的开发。目前转转系 <code>App</code> 是一个典型的 <code>Hybrid App</code>，采用的是业内主流的做法：客户端内有大量业务页面使用 <code>WebView</code> 加载 H5 页面承载。</p><h3 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h3><p>Hybrid + vue系列</p><h3 id="职责" tabindex="-1">职责 <a class="header-anchor" href="#职责" aria-label="Permalink to &quot;职责&quot;">​</a></h3><ol><li><strong>页面加载优化：</strong> 通过离线包、预渲染、预请求等技术，实现了页面的秒开效果，极大提高了用户体验。</li><li><strong>技术栈升级：</strong> 在Vue2中引入<code>@vue/composition-api</code>进行项目开发，使用Vite进行高效构建，并采用pnpm作为包管理工具，优化了开发流程和构建速度。</li><li><strong>地理位置服务：</strong> 利用<code>navigator.geolocation</code>获取位置信息，并集成腾讯地图进行地址解析、逆地址解析和路径规划，提高了服务的准确性和便利性。</li><li><strong>智能搜索与效率提升：</strong> 封装<code>useSearch</code> Hook，采用正则表达式和策略组合提高搜索匹配精度，并通过动态正则实现搜索结果高亮，直接提升预约订单转化率3.46%。</li><li><strong>高质量页面设计：</strong> 基于多端多角色多状态的页面设计经验，完成了高质量、易维护的页面开发。</li><li><strong>跨部门协同工作：</strong> 与红布林公司紧密协作，负责上门服务APP的开发，积累了丰富的跨部门沟通和合作开发经验。</li><li><strong>UI还原与效率工具：</strong> 实现了UI设计的100%还原，并采用UI-Diff工具进行UI走查，有效提高了UI审查效率。</li><li><strong>小程序与H5互动：</strong> 通过<code>URL Link</code>技术，在H5页面中拉起微信小程序，便捷地进行客服咨询操作，有效提升了客服咨询率。</li><li><strong>JSBridge通信：</strong> 使用JSBridge技术与客户端进行深度通信，实现了商品标签打印和上门回收过程录音等功能，进一步优化了服务流程。</li></ol><h3 id="问题预设" tabindex="-1">问题预设 <a class="header-anchor" href="#问题预设" aria-label="Permalink to &quot;问题预设&quot;">​</a></h3><h4 id="_1、pnpm" tabindex="-1">1、pnpm <a class="header-anchor" href="#_1、pnpm" aria-label="Permalink to &quot;1、pnpm&quot;">​</a></h4><h4 id="_2、如何解析用户输入-如何进行高效搜索-如何进行精确匹配-如何进行结果高亮" tabindex="-1">2、如何解析用户输入？如何进行高效搜索？如何进行精确匹配？如何进行结果高亮？ <a class="header-anchor" href="#_2、如何解析用户输入-如何进行高效搜索-如何进行精确匹配-如何进行结果高亮" aria-label="Permalink to &quot;2、如何解析用户输入？如何进行高效搜索？如何进行精确匹配？如何进行结果高亮？&quot;">​</a></h4><p>如何解析用户输入：使用正则提取出用户输入的 汉字、字母、数字，然后合并成为一个数组</p><p>// 匹配汉字 const zhReg = /[\\u4e00-\\u9fa5]+/g</p><p>// 匹配数字 const numReg = /[\\d]+/g</p><p>// 匹配字母 const letterReg = /[a-zA-Z]+/g</p><p>如何进行精确匹配：</p><ul><li>单一字段匹配： 根据标题，然后去重 [...<strong>new</strong> <em>Set</em>(allSelect)]</li><li>多字段匹配： 根据标题和描述，然后去重 [...<strong>new</strong> <em>Set</em>(allSelect)]</li></ul><p>以为brandName匹配为例，拿到数据源某一条的brandName 和 解析出的用户词组， 判断 brandName 中是否包含用户输入的keyword进行分词后的数据</p><p>如何进行结果高亮: 动态正则</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inputArr.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;i&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  replaceText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replaceText.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg)?.[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`&lt;em style=&quot;color: #ff483c&quot;&gt;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)?.[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&lt;/em&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_3、h5的开发经验-a标签能做哪些事情-input-能做哪些事情" tabindex="-1">3、h5的开发经验，a标签能做哪些事情？ input 能做哪些事情？ <a class="header-anchor" href="#_3、h5的开发经验-a标签能做哪些事情-input-能做哪些事情" aria-label="Permalink to &quot;3、h5的开发经验，a标签能做哪些事情？ input 能做哪些事情？&quot;">​</a></h4><p>a标签</p><ol><li><strong>页面跳转：</strong> 最基本的用途，通过<code>href</code>属性指定链接目标地址。</li><li><strong>锚点定位：</strong> 使用<code>href=&quot;#anchorName&quot;</code>跳转到同一页面的指定锚点位置。</li><li><strong>电话拨打：</strong> 设置<code>href=&quot;tel:电话号码&quot;</code>，允许用户点击拨打电话。</li><li><strong>发送邮件：</strong> 设置<code>href=&quot;mailto:邮箱地址&quot;</code>，点击后可以打开用户的邮件客户端并创建一封新邮件。</li><li><strong>下载文件：</strong> 通过添加<code>download</code>属性，点击链接可以下载资源而非打开。</li><li><strong>打开新窗口：</strong> 使用<code>target=&quot;_blank&quot;</code>属性，可以在新的浏览器标签页中打开链接地址。</li><li><strong>使用JavaScript：</strong> 通过<code>href=&quot;javascript:代码;&quot;</code>执行JavaScript代码，但出于安全和可维护性考虑，这种用法不推荐。</li></ol><p>input</p><ol><li><strong>文本输入：</strong> <code>type=&quot;text&quot;</code>用于接收单行文本输入。</li><li><strong>密码输入：</strong> <code>type=&quot;password&quot;</code>用于密码输入，输入内容会被隐藏。</li><li><strong>电子邮件地址：</strong> <code>type=&quot;email&quot;</code>用于接收电子邮件地址，带有基本的格式验证。</li><li><strong>数字输入：</strong> <code>type=&quot;number&quot;</code>用于接收数字，可以设置最大、最小值和步长。</li><li><strong>日期和时间选择：</strong> 包括<code>type=&quot;date&quot;</code>, <code>type=&quot;time&quot;</code>, <code>type=&quot;datetime-local&quot;</code>等，提供了日期和时间的选择器。</li><li><strong>文件选择：</strong> <code>type=&quot;file&quot;</code>用于选择文件上传。</li><li><strong>颜色选择：</strong> <code>type=&quot;color&quot;</code>提供颜色选择器。</li><li><strong>范围选择：</strong> <code>type=&quot;range&quot;</code>创建滑动条，用于选择指定范围内的值。</li><li><strong>复选框和单选按钮：</strong> <code>type=&quot;checkbox&quot;</code>和<code>type=&quot;radio&quot;</code>用于创建复选框和单选按钮。</li><li><strong>提交和重置按钮：</strong> <code>type=&quot;submit&quot;</code>和<code>type=&quot;reset&quot;</code>用于提交和重置表单。</li><li><strong>搜索框：</strong> <code>type=&quot;search&quot;</code>为搜索字段优化，可能会包括清除按钮。</li><li><strong>电话号码输入：</strong> <code>type=&quot;tel&quot;</code>用于电话号码输入，具有格式灵活性。</li></ol><h4 id="_4、hybrid-是什么-存在什么问题-有哪些优化手段" tabindex="-1">4、Hybrid 是什么？ 存在什么问题？ 有哪些优化手段? <a class="header-anchor" href="#_4、hybrid-是什么-存在什么问题-有哪些优化手段" aria-label="Permalink to &quot;4、Hybrid 是什么？ 存在什么问题？ 有哪些优化手段?&quot;">​</a></h4><blockquote><p>转转Hybrid体系建设-前端视角</p><p><a href="https://mp.weixin.qq.com/s/-9-hnl2Raxzo-0RngqVMsQ" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/-9-hnl2Raxzo-0RngqVMsQ</a></p><p>转转Hybrid体系建设历程-客户端视角</p><p><a href="https://mp.weixin.qq.com/s/kY-Cmsfc0ATNzXgi-0oWUw" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/kY-Cmsfc0ATNzXgi-0oWUw</a></p><p>转转Hybrid-SDK重构和实践</p><p><a href="https://mp.weixin.qq.com/s/32R0AqRB4-rCl2FZbmlXtQ" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/32R0AqRB4-rCl2FZbmlXtQ</a></p><p>见微知著 - 转转离线包设计实践</p><p><a href="https://mp.weixin.qq.com/s/b7qsnYVPIJoasIgojX3n2A" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/b7qsnYVPIJoasIgojX3n2A</a></p><p>转转Hybrid离线包治理与优化实践</p><p><a href="https://mp.weixin.qq.com/s/DVP2tGSennPD9A503BJYBA" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/DVP2tGSennPD9A503BJYBA</a></p><p>转转hybrid</p><p><a href="https://doc.weixin.qq.com/mind/m3_m_BLXcYasfAeVB?scode=AJ4AfQfgAAwJ2lP2K7AO0AHQajAD4" target="_blank" rel="noreferrer">https://doc.weixin.qq.com/mind/m3_m_BLXcYasfAeVB?scode=AJ4AfQfgAAwJ2lP2K7AO0AHQajAD4</a></p><p>hybrid 性能优化方案接入文档</p><p><a href="https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=447873938" target="_blank" rel="noreferrer">https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=447873938</a></p><p>预渲染接入文档</p><p><a href="https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=508862397" target="_blank" rel="noreferrer">https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=508862397</a></p><p><a href="https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=502306118" target="_blank" rel="noreferrer">https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=502306118</a></p><p><a href="https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=376965424" target="_blank" rel="noreferrer">https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=376965424</a></p></blockquote><p>&quot;hybrid&quot; 通常指的是混合应用（Hybrid Apps），这是一种旨在结合原生应用（Native Apps）和网页应用（Web Apps）优点的移动应用开发方法</p><p>优点：</p><ol><li>Web 页面上线频度满足快速迭代的业务需求，不受客户端审核和发版的时间限制</li><li>可以将各个业务线的开发工作分摊到各个业务的前端团队上，使得个业务线可以并行开发。</li></ol><p>缺点：</p><p>1、加载性能问题： 预渲染、离线包、接口预请求</p><p>通过离线包机制，我们将原有从线上加载的 Web 页面，提前下发到本地，通过读取 IO 或者内存来进行页面的渲染，达到接近原生的用户体验。</p><p><img src="https://qn.huat.xyz/mac/202311051028611.png" alt="图片"></p><p><img src="https://qn.huat.xyz/mac/202311051028012.gif" alt="图片"></p><p><img src="https://qn.huat.xyz/mac/202311051516451.png" alt="image-20231105151652401"></p><ul><li><p>白屏问题</p><p>转转通过图片骨架屏来解决页面白屏的问题，在 WebView 初始化时，客户端把一张设计师出的的图片，覆盖在 WebView 上面。当页面 WebView 加载完成，或者前端通知客户端加载完成。客户端通过渐隐动画来隐藏图片，达到完美的过渡效果。</p></li><li><p>界面展示的局限性</p></li><li><p>操作的局限性，无法使用系统功能： JSBridge</p></li></ul><h4 id="_5、hybrid设计架构是什么样子的" tabindex="-1">5、hybrid设计架构是什么样子的 <a class="header-anchor" href="#_5、hybrid设计架构是什么样子的" aria-label="Permalink to &quot;5、hybrid设计架构是什么样子的&quot;">​</a></h4><p>转转整个 <code>Hybrid</code> 容器架构设计分为四层</p><ol><li><strong>原生 Web 页面</strong> 这块就是大家常见的 Web 开发环境，可以通过 Vue、React 等实现。</li><li><strong>Web 增强</strong> 包括像离线包和 Web 页面容器等。</li><li><strong>中间件层</strong> 中间件层使 Web 页面容器和转转底层框架有机结合起来，同时还提供各种生命周期机制、事件机制、扩展插件等内容。中间件层通过 <code>JSBridge</code> 将客户端以及中间件层提供的各种能力和 Web 前端代码进行联通。</li><li><strong>转转基础架构</strong> 主要包含 <code>native</code> 相关的能力架构</li></ol><h4 id="_6、jsbridge是什么" tabindex="-1">6、JSBridge是什么？ <a class="header-anchor" href="#_6、jsbridge是什么" aria-label="Permalink to &quot;6、JSBridge是什么？&quot;">​</a></h4><p>JSBridge 是一种 JS 实现的 Bridge，连接着桥两端的 Native 和 H5。它在 APP 内方便地让 Native 调用 JS，JS 调用 Native ，是双向通信的通道。JSBridge 主要提供了 JS 调用 Native 代码的能力，实现原生功能如查看本地相册、打开摄像头、指纹支付等</p><p>js调用native</p><ul><li><p><strong>URL Scheme</strong>: 当 JavaScript 想要与 Native 代码通信时，它会尝试加载一个特殊的 URL（如 <code>myapp://functionName?param1=value1</code>），这个 URL 不会导致一个真正的网络请求，而是被 Native 代码拦截。原生代码会解析这个 URL，提取出函数名和参数，然后调用相应的原生方法。</p></li><li><p><strong>JavaScript Interface</strong>: 在 Android 中，可以通过 <code>addJavascriptInterface</code> 方法向 WebView 添加一个对象，这个对象的方法可以直接从 JavaScript 被调用。这样，JavaScript 可以直接调用这个对象的方法来与 Native 代码通信。</p></li></ul><p>native调用js</p><ul><li><p>安卓中可以loadUrl(&quot;javascript:yourJavaScriptCode&quot;) 或者 evaluateJavaScript 直接在WebView中执行JavaScript代码</p></li><li><p>ios使用 evaluateJavaScript</p></li><li><p>鸿蒙使用 runJavaScripyt</p></li></ul><h4 id="_8、离线包" tabindex="-1">8、离线包 <a class="header-anchor" href="#_8、离线包" aria-label="Permalink to &quot;8、离线包&quot;">​</a></h4><p>离线包是将包括 HTML、JavaScript、CSS 等页面内静态资源打包到一个压缩包内。预先下载该离线包到本地，然后通过客户端打开，直接从本地加载离线资源，从而最大程度地摆脱网络环境对 H5 页面的影响。</p><p>优点：</p><ul><li>节省流量：下载资源包为非一次性消耗资源，每次加载 h5 都可以从本地获取。</li><li>秒开：不需要通过远端加载 h5 资源。</li><li>防劫持：不需要从远端加载 h5 资源。</li></ul><p>转转离线包实现原理</p><p>由于 IOS 与 安卓客户端系统能力差异性，并且 IOS 请求拦截时系统本身的一些策略导致，因此转转针对不同端采用了不同端实现技术方案。</p><ul><li>安卓侧：安卓侧实现相对简单一些，主要利用 <code>shouldInterceptRequest</code> api 能力进行请求拦截，对于静态资源，先匹配服务端拦截路径前缀如果与本地离线资源匹配则走本地离线没有则走线上 CDN，对于 ajax 请求直接走线上。该方案实现相对简单。</li><li>IOS 侧：由于 IOS 客户端能力限制，当请求拦截时，http(s) 的 post 请求则丢失 header、 body，因此在方案的实现上比安卓复杂。</li></ul><p>转转内部探索了自己的实现方案，具体原理就是，通过 NSURLProtocol，注册 webview 并设置拦截 Scheme 为 &quot;http&quot;。在 canInitWithRequest 方法拦截所有 scheme 为 &quot;http&quot; 的 url，通过特定规则映射本地路径，如果找到本地资源，则加载本地资源，否则还原 scheme 为&quot;https&quot; 并请求远端数据。</p><p>架构设计</p><p><img src="https://qn.huat.xyz/mac/202311051611190.jpeg" alt="图片"></p><p>首先，前端工程化打包时，在编译机内通过构建生成两部分内容，一部分是整个离线包资源，另一部分是webserver的页面和静态资源。这两部分资源都会被上线系统直接推送到远端CDN服务器。webserver的页面会直接供浏览器访问，也作为离线包的降级方案的远端源页面，而离线包资源仅仅被App下载使用。</p><p>之后，离线包服务会从上传的资源包去分析，做包与包之间的diff差异，如果是项目第一次上线，则不作diff差异。然后会把差异包上传一台专用的CDN供App下载。与此同时，离线包服务会生成一份配置数据，相当于App需要离线的项目列表。此列表给App提供是否更新离线包资源使用，并且可以通过离线包管理后台控制每个项目的离线开关，且同步这个列表。</p><p>最后就是每次用户和App交互的时候了。每次启动App和新打开webview页面时，会去拉取离线包列表，App自己判断是否需要更新资源。如果最新资源版本和本地资源版本不一致，就去下载更新最新资源，并进行合包操作，否则即忽略下载。</p><h4 id="_9、预渲染" tabindex="-1">9、预渲染 <a class="header-anchor" href="#_9、预渲染" aria-label="Permalink to &quot;9、预渲染&quot;">​</a></h4><p>原理</p><p>1、客户端通过内置或者接口下发来触发预渲染。接口会告诉客户端在a页面来帮助渲染b页面</p><p>2、当我们在a页面的时候，客户端会打开一个小webview来加载b页面</p><p>3、b页面通过url上的isPreRender =1来判断是否是渲染中，window.zzPreRender不准确不要使用</p><p>4、如果是预渲染就会在代码里面做一些特殊的处理。比如预渲染就不发送接口请求。只渲染骨架</p><p>5、页面完成渲染，通过sdk通知客户端b页面渲染完成，可以使用，同时注册一个页面被使用时的回调函数</p><p>6、当a页页面跳转到b页面时，客户端判断b页面存在可以使用的已完成预渲染的webview，就直接使用</p><p>7、当b页真正打开的时候，怎么去触发接口请求呢。是通过之前回调函数的触发后续的逻辑，同时修改本地location.href的值</p><p>8、这个预渲染就被使用了。同时这个webview就加到页面栈里面。如果下次在打开a页面。客户端判断已经不存在b页面可用完成预渲染的webview。a页面还是会进行b页面的渲染</p><h4 id="_10、预请求" tabindex="-1">10、预请求 <a class="header-anchor" href="#_10、预请求" aria-label="Permalink to &quot;10、预请求&quot;">​</a></h4><blockquote><p><a href="https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=36112453" target="_blank" rel="noreferrer">https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=36112453</a></p><p><a href="https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=359170168" target="_blank" rel="noreferrer">https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=359170168</a></p><p><a href="https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=376963379" target="_blank" rel="noreferrer">https://dashen.zhuanspirit.com/pages/viewpage.action?pageId=376963379</a></p></blockquote><p>首先，用户点击打开 Webview，App 请求 Ajax 列表的接口并且把本地的上次请求的数据删除，同时加载 WebView。</p><p>JS 在请求接口时，先通过 JSBridge 取数据，Key 支持多个值一起传。</p><p>如果数据在 JSBridge 请求之前返回，把数据写入本地对应 Key 的 Value，JSBridge 读取后返回数据。</p><p>如何没有返回，读取本地 Key 为空，直接返回空。</p><p>接口返回的数据 App 端不用做任何判断和处理。如果没有取到，页面再次通过 JS 发起请求，之后的超时重新请求等策略保持一致。</p><p>用户点击开始跳转，app请求ajax列表的接口并且把本地的上次请求的value删除，同时加载webview等，js执行到请求接口的生命周期时，sdk通过key值去取数据，key支持多个值一起传，在sdk请求之前接口返回，把数据写入本地对应key的value，sdk读取然后返回数据，如何没有返回，读取本地key是空，直接返回空。接口返回的数据app端不用做任何判断和处理。</p><h4 id="_11、adpater、sdk-设计方案" tabindex="-1">11、adpater、sdk 设计方案 <a class="header-anchor" href="#_11、adpater、sdk-设计方案" aria-label="Permalink to &quot;11、adpater、sdk 设计方案&quot;">​</a></h4><h4 id="_12、首屏时间计算" tabindex="-1">12、首屏时间计算 <a class="header-anchor" href="#_12、首屏时间计算" aria-label="Permalink to &quot;12、首屏时间计算&quot;">​</a></h4><h2 id="crm后台系统" tabindex="-1">CRM后台系统 <a class="header-anchor" href="#crm后台系统" aria-label="Permalink to &quot;CRM后台系统&quot;">​</a></h2><h4 id="背景-1" tabindex="-1">背景 <a class="header-anchor" href="#背景-1" aria-label="Permalink to &quot;背景&quot;">​</a></h4><p>在面对业务快速发展和客服工作效率提升的需求下，我负责开发并优化了一套综合性客服管理系统。该系统不仅提高了客服与客户之间的互动效率，还增强了对客服行为的监控和激励，对上门服务的管理，以及对线索数据的深度分析能力。通过实施以下关键技术和策略，显著提升了派单数量和服务质量：</p><h4 id="技术栈-1" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈-1" aria-label="Permalink to &quot;技术栈&quot;">​</a></h4><p>React + Umi4 + axios + proComponent + websocket</p><h4 id="职责-1" tabindex="-1">职责 <a class="header-anchor" href="#职责-1" aria-label="Permalink to &quot;职责&quot;">​</a></h4><ol><li><strong>权限管理与接入：</strong> 接入RBAC权限管理平台，并申请相应的权限Code。通过封装<code>useAccess</code>钩子，实现了精细化的菜单与按钮级别权限控制，确保系统安全性和用户操作的合理性。</li><li><strong>实时通信机制：</strong> 利用WebSocket技术实现了新线索的即时通知，并设计了心跳检测机制，保证了通信的实时性和连接的稳定性。</li><li><strong>界面快速开发：</strong> 运用ProComponents加速页面搭建过程，自定义ProTable列配置，为特殊数据显示需求提供了灵活的解决方案。</li><li><strong>状态管理与数据流：</strong> 采用<code>@umi/max</code>内置的Model实现了高效的状态管理和组件间通信，优化了数据流管理。</li><li><strong>第三方服务集成：</strong> 封装全局组件，并使用 iframe集成第三方外呼服务，通过修改Nginx配置解决了iframe跨域问题，增强了系统的功能性。</li><li><strong>后端协作：</strong> 推动后端开发模拟登录功能，简化客服的问题排查流程，大幅提升问题解决效率。</li><li><strong>数据可视化：</strong> 利用ChatGPT基于<code>@ant-design/plots</code>实现了高度自定义的数据可视化图表，如折线图，为线索数据分析和决策提供直观支持。</li><li><strong>地理位置监控：</strong> 集成腾讯地图API，实现上门服务人员与用户之间的动态路径规划与实时位置监控，有效提升了上门服务的管理效率。</li></ol><h4 id="问题预设-1" tabindex="-1">问题预设 <a class="header-anchor" href="#问题预设-1" aria-label="Permalink to &quot;问题预设&quot;">​</a></h4><h5 id="_1、什么是单点登录-如何实现" tabindex="-1">1、什么是单点登录？如何实现？ <a class="header-anchor" href="#_1、什么是单点登录-如何实现" aria-label="Permalink to &quot;1、什么是单点登录？如何实现？&quot;">​</a></h5><p><a href="https://juejin.cn/post/7195588906809032764" target="_blank" rel="noreferrer">https://juejin.cn/post/7195588906809032764</a></p><blockquote><p><a href="https://zzsso.zhuanspirit.com/user/login?host=datapt.zhuanspirit.com&amp;scheme=https&amp;urlParam=%2FbasicData%2F4173%2Fview%3ForgId%3D167" target="_blank" rel="noreferrer">https://zzsso.zhuanspirit.com/user/login?host=datapt.zhuanspirit.com&amp;scheme=https&amp;urlParam=%2FbasicData%2F4173%2Fview%3ForgId%3D167</a></p></blockquote><p><img src="https://qn.huat.xyz/mac/202311050844177.png" alt="image-20231105084447111"></p><p>单点登录（Single Sign-On，简称SSO）是一种用户身份验证过程，它允许用户使用一组登录凭证（如用户名和密码）来访问多个应用程序。</p><p>sso需要一个独立的认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。</p><p>间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。</p><p>链接：<a href="https://juejin.cn/post/7044328327762411534" target="_blank" rel="noreferrer">https://juejin.cn/post/7044328327762411534</a></p><h5 id="_2、rbac-role-based-access-control" tabindex="-1">2、RBAC-<strong>Role Based Access Control</strong> <a class="header-anchor" href="#_2、rbac-role-based-access-control" aria-label="Permalink to &quot;2、RBAC-**Role Based Access Control**&quot;">​</a></h5><p>基于角色的访问控制： 通过角色关联用户，角色关联权限的方式间接赋予用户权限</p><p>RBAC通过定义角色的权限，并对用户授予某个角色从而来控制用户的权限，实现了用户和权限的逻辑分离</p><ul><li><p>🧑‍💻 <strong>User（用户）</strong> - 每个用户都有唯一的UID识别，并被授予不同的角色</p></li><li><p>🤹 <strong>Role（角色）</strong> - 不同角色具有不同的权限</p></li><li><p>🛠 <strong>Permission（权限）</strong> - 访问权限</p></li><li><p>📤 <strong>用户-角色映射</strong> - 用户和角色之间的映射关系</p></li><li><p>📝 <strong>角色-权限映射</strong> - 角色和权限之间的映射</p></li></ul><p>分类：</p><ul><li>RBAC0-基础</li><li>RBAC1-角色继承，比如部门负责人、小组长</li><li>RBAC2-角色权限限制，唯一性、互斥性，比如：部门只有一个老大，</li><li>RBAC3 整合了前面的几种，比如 公司组织架构</li></ul><p>基于资源的权限访问控制模型（Resource-Based-Access-Control） 就流行了起来，在传统模型基础上，它让用户也可以直接关联权限，这样就更加灵活了。</p><h5 id="_3、自定义valuetype类型" tabindex="-1">3、自定义valueType类型 <a class="header-anchor" href="#_3、自定义valuetype类型" aria-label="Permalink to &quot;3、自定义valueType类型&quot;">​</a></h5><p>使用renderFormItem函数返回自定义组件，在其第三个参数中获取到form实例，使用<code>*form*.setFieldsValue({ evaluatePriceInSearch: [] });</code> 设置初始值，不然search的transform方法在搜索的时候不生效，table还需要监听<code>onReset</code> ， 在重置时候取消筛选条件</p><h5 id="_4、websocket" tabindex="-1">4、websocket <a class="header-anchor" href="#_4、websocket" aria-label="Permalink to &quot;4、websocket&quot;">​</a></h5><ol><li><strong>全双工通信</strong>：客户端和服务器可以同时发送和接收信息，这与传统的HTTP请求（一种半双工通信方式）形成对比，在HTTP中，请求只能由客户端发起，服务器响应后连接通常会关闭。</li><li><strong>持久连接</strong>：一旦WebSocket连接建立，它会保持开放状态，直到客户端或服务器决定关闭连接。这减少了频繁建立连接的开销。</li><li><strong>低延迟</strong>：WebSocket设计用于减少通信过程中的延迟，因为建立连接之后，消息可以直接在客户端和服务器之间传递，而不需要每次都进行握手。</li><li><strong>数据帧</strong>：WebSocket数据通过帧传输，这些帧可以代表文本或二进制数据。</li><li><strong>兼容性</strong>：WebSocket设计为与现有的Web基础设施兼容。它在HTTP的基础上初始化连接，通过发送一个特殊的&quot;Upgrade&quot;请求来将HTTP连接升级为WebSocket连接。</li></ol><ul><li>SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。</li><li>SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。</li><li>SSE 默认支持断线重连，WebSocket 需要自己实现。</li><li>SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。</li><li>SSE 支持自定义发送的消息类型。</li></ul><p>http、websocket、SSE 都有什么区别呢？</p><ul><li><strong>连接持久性</strong>：HTTP连接通常是短暂的，而WebSocket和SSE都是设计为建立持久连接的。</li><li><strong>双向通信</strong>：WebSocket支持全双工通信，而SSE只支持服务器到客户端的单向通信。</li><li><strong>实时性</strong>：WebSocket和SSE都能提供实时数据传输，但WebSocket提供了更高的灵活性和更低的延迟。</li><li><strong>复杂性和资源消耗</strong>：WebSocket相对于SSE来说，在服务器端通常更复杂，可能需要更多的资源来维护持久连接和状态。</li><li><strong>浏览器支持</strong>：大多数</li></ul><p>心跳检测</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ws;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heartbeatInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 心跳间隔时间，例如10秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heartbeatTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 心跳响应超时时间，例如2秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reconnectInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重连间隔时间，例如5秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heartbeatTimer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heartbeatTimeoutTimer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ws </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wss://example.com/socketserver&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onopen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Connection opened&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startHeartbeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Received message: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.data);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果收到任何消息，说明连接是活跃的，重置心跳</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resetHeartbeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onerror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WebSocket error observed:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Connection closed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    stopHeartbeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 尝试重新连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connect, reconnectInterval);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startHeartbeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heartbeatTimer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Sending heartbeat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HEARTBEAT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果在设定的超时时间内没有收到消息，认为连接已断开</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    heartbeatTimeoutTimer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Heartbeat timeout, closing connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主动关闭连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, heartbeatTimeout);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, heartbeatInterval);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resetHeartbeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 清除超时定时器，并重新开始心跳</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(heartbeatTimeoutTimer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heartbeatTimeoutTimer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stopHeartbeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(heartbeatTimer);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(heartbeatTimeoutTimer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heartbeatTimer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heartbeatTimeoutTimer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>5、自定义ProTable列配置</p><div class="language-react vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">react</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import React, { useState } from &#39;react&#39;;</span></span>
<span class="line"><span>import ProTable from &#39;@ant-design/pro-table&#39;;</span></span>
<span class="line"><span>import { InputNumber, Form } from &#39;antd&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const InputRange = ({ value, onChange }) =&gt; (</span></span>
<span class="line"><span>  &lt;Form.Item label=&quot;估价范围&quot;&gt;</span></span>
<span class="line"><span>    &lt;InputNumber</span></span>
<span class="line"><span>      value={value[0]}</span></span>
<span class="line"><span>      onChange={val =&gt; onChange([val, value[1]])}</span></span>
<span class="line"><span>      style={{ marginRight: 8 }}</span></span>
<span class="line"><span>    /&gt;</span></span>
<span class="line"><span>    到</span></span>
<span class="line"><span>    &lt;InputNumber</span></span>
<span class="line"><span>      value={value[1]}</span></span>
<span class="line"><span>      onChange={val =&gt; onChange([value[0], val])}</span></span>
<span class="line"><span>      style={{ marginLeft: 8 }}</span></span>
<span class="line"><span>    /&gt;</span></span>
<span class="line"><span>  &lt;/Form.Item&gt;</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const DemoTable = () =&gt; {</span></span>
<span class="line"><span>  const [form] = Form.useForm();</span></span>
<span class="line"><span>  const [evaluatePriceRange, setEvaluatePriceRange] = useState([]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const columns = [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      title: &#39;估价金额&#39;,</span></span>
<span class="line"><span>      hideInTable: true,</span></span>
<span class="line"><span>      dataIndex: &#39;evaluatePriceInSearch&#39;,</span></span>
<span class="line"><span>      order: 30,</span></span>
<span class="line"><span>      search: {</span></span>
<span class="line"><span>        transform: () =&gt; ({</span></span>
<span class="line"><span>          minEvaluatePrice: evaluatePriceRange[0] ?? &#39;&#39;,</span></span>
<span class="line"><span>          maxEvaluatePrice: evaluatePriceRange[1] ?? &#39;&#39;,</span></span>
<span class="line"><span>        }),</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      renderFormItem: (_, { type, defaultRender, ...rest }, form) =&gt; {</span></span>
<span class="line"><span>        if (type === &#39;form&#39;) {</span></span>
<span class="line"><span>          // 只有在表单中才处理</span></span>
<span class="line"><span>          return (</span></span>
<span class="line"><span>            &lt;InputRange</span></span>
<span class="line"><span>              value={evaluatePriceRange}</span></span>
<span class="line"><span>              onChange={value =&gt; {</span></span>
<span class="line"><span>                setEvaluatePriceRange(value);</span></span>
<span class="line"><span>                // 更新表单字段值，以保证与 ProTable 查询参数同步</span></span>
<span class="line"><span>                form.setFieldsValue({ evaluatePriceInSearch: value });</span></span>
<span class="line"><span>              }}</span></span>
<span class="line"><span>            /&gt;</span></span>
<span class="line"><span>          );</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return defaultRender(_);</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    // 其他列配置...</span></span>
<span class="line"><span>  ];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;ProTable</span></span>
<span class="line"><span>      columns={columns}</span></span>
<span class="line"><span>      request={async (params) =&gt; {</span></span>
<span class="line"><span>        // 模拟请求数据</span></span>
<span class="line"><span>        console.log(params);</span></span>
<span class="line"><span>        return Promise.resolve({</span></span>
<span class="line"><span>          data: [],</span></span>
<span class="line"><span>          success: true,</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>      }}</span></span>
<span class="line"><span>      rowKey=&quot;id&quot;</span></span>
<span class="line"><span>      form={form}</span></span>
<span class="line"><span>      search={{</span></span>
<span class="line"><span>        filterType: &#39;light&#39;,</span></span>
<span class="line"><span>      }}</span></span>
<span class="line"><span>    /&gt;</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default DemoTable;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><h2 id="王者营地数据抓取" tabindex="-1">王者营地数据抓取 <a class="header-anchor" href="#王者营地数据抓取" aria-label="Permalink to &quot;王者营地数据抓取&quot;">​</a></h2><h3 id="游戏账号数据分析与验号报告系统" tabindex="-1">游戏账号数据分析与验号报告系统 <a class="header-anchor" href="#游戏账号数据分析与验号报告系统" aria-label="Permalink to &quot;游戏账号数据分析与验号报告系统&quot;">​</a></h3><h3 id="背景-2" tabindex="-1">背景 <a class="header-anchor" href="#背景-2" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>在做游戏业务的时候，我设计并实现了一个数据爬取系统，通过对王者营地应用的深度分析，爬取并解析用户数据。此系统能够有效地从用户账号中提取皮肤信息，并自动回填关键参数，解决了商品搜索不准确的问题。此外，该系统生成的详细验号报告显著提升了买家的信任度，并为账号估价提供了准确数据支持。我的工作成果获得了公司“超级码力”项目猛保增长赛道一等奖，确认了该项目的业务价值。</p><h3 id="技术栈-2" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈-2" aria-label="Permalink to &quot;技术栈&quot;">​</a></h3><p>Nodejs + Eggjs + request + Redis</p><h3 id="职责-2" tabindex="-1">职责 <a class="header-anchor" href="#职责-2" aria-label="Permalink to &quot;职责&quot;">​</a></h3><ol><li><strong>项目架构设计与开发：</strong> 负责项目从零开始的设计与开发工作，包括域名解析、Nginx配置，确立了稳定高效的系统架构。</li><li><strong>深度数据抓取与分析：</strong> 对《王者营地》APP进行深度网络抓包，准确获取关键数据接口，并对数据结构进行精确分析，为数据爬取提供了科学依据。</li><li><strong>动态令牌与设备信息库构建：</strong> 建立了丰富的设备信息库，并通过动态token机制，增强了数据请求的有效性和安全性。</li><li><strong>高隐私性数据请求：</strong> 通过配置动态版HTTP隧道服务器进行请求代理，有效隐藏了真实IP地址，并实现了请求失败的自动重试机制，保证了数据爬取的连续性和安全性。</li><li><strong>数据请求量监控：</strong> 开发了requestCounter中间件，结合Redis对每日数据请求量进行统计和分析，确保了系统运行的高效率和稳定性。</li><li><strong>错误监控与即时预警：</strong> 实施了错误上报机制，当数据请求失败时能够即时向企业微信发送通知，确保快速响应并解决问题。</li><li><strong>接口安全管理：</strong> 封装了<code>checkDomain</code>中间件，严格限制处理请求的域名来源，有效预防非法访问和数据泄露。</li><li><strong>日志管理与优化：</strong> 采用PM2管理日志，实现日志的合并、分级和格式化等，为日志的快速定位和历史数据分析提供了极大的便利</li></ol><p>收益：</p><p>上线后，账号整体支付率提升0.5%，按照当时商详UV6万，发货率40%，每天可以提升发货120单，预估每日新增利润11000元。</p><p><img src="https://qn.huat.xyz/mac/202311042031724.png" alt="image-20231104203131664"></p><h4 id="requestcounter" tabindex="-1"><code>requestCounter</code> <a class="header-anchor" href="#requestcounter" aria-label="Permalink to &quot;\`requestCounter\`&quot;">​</a></h4><p>创建 <code>requestCounter</code> 中间件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestCounter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> today</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toISOString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取今天的日期字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`requestCount:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">today</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个 Redis 键，该键以 &quot;requestCount:&quot; 开头，后接当前日期</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 继续执行下一个中间件或请求处理器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 对 Redis 中对应的键进行自增操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.app.redis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">incr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 设置该键的过期时间为两天（单位：秒），这意味着数据会在两天后自动删除，以节省空间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.app.redis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>更新 Redis 计数的操作 为什么放在了 next 后面呢？</p><p>将更新 Redis 计数的操作放在 <code>await next();</code> 后面是一个设计决策，主要有以下几个原因：</p><h3 id="_1-确保响应的完整性" tabindex="-1">1. <strong>确保响应的完整性</strong> <a class="header-anchor" href="#_1-确保响应的完整性" aria-label="Permalink to &quot;1. **确保响应的完整性**&quot;">​</a></h3><p>放置在 <code>await next();</code> 后面意味着此中间件会等待所有后续中间件和请求处理器完成其工作，然后再执行计数逻辑。这样可以确保只有当请求完全处理完毕，并且即将返回给客户端响应时，才进行请求计数。这种方式有助于确保计数的准确性，只计算已经成功处理的请求。</p><h3 id="_2-处理异常和错误" tabindex="-1">2. <strong>处理异常和错误</strong> <a class="header-anchor" href="#_2-处理异常和错误" aria-label="Permalink to &quot;2. **处理异常和错误**&quot;">​</a></h3><p>如果中间件或请求处理器中途发生异常，它们可能会通过错误处理中间件被捕获和处理。将计数逻辑放在 <code>await next();</code> 后面可以避免对可能因错误而未正确处理的请求进行计数。这样，只有请求成功执行并响应客户端之后，才会增加计数器，从而提供更准确的请求计数。</p><h3 id="_3-性能考虑" tabindex="-1">3. <strong>性能考虑</strong> <a class="header-anchor" href="#_3-性能考虑" aria-label="Permalink to &quot;3. **性能考虑**&quot;">​</a></h3><p>虽然将计数逻辑放在请求处理之前（即在 <code>await next();</code> 前面）可以略微提前完成计数操作，但这种优势通常很小，而且在处理过程中可能出现的任何延迟或错误都会影响计数的准确性。因此，将计数放在处理完成后可以在不显著影响性能的情况下提高数据的准确性和可靠性。</p><h3 id="_4-避免干扰请求处理" tabindex="-1">4. <strong>避免干扰请求处理</strong> <a class="header-anchor" href="#_4-避免干扰请求处理" aria-label="Permalink to &quot;4. **避免干扰请求处理**&quot;">​</a></h3><p>在执行所有请求处理逻辑之后进行计数，可以避免对主要的请求处理逻辑造成任何潜在的干扰。例如，如果在请求处理之前就进行计数，而后续的请求处理由于某种原因需要回滚或取消，计数数据就会与实际成功处理的请求不匹配。</p><p>总之，将计数逻辑放在 <code>await next();</code> 后面是为了确保只统计那些实际完成并响应给客户端的请求，这样可以提高数据的准确性和统计的可靠性。</p></blockquote><p>在应用中使用 <code>requestCounter</code> 中间件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 应用 requestCounter 中间件到所有请求上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, app.middleware.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestCounter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), controller.example.index);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>分析和检索数据</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 controller 中添加一个方法来获取统计数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 86400000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toISOString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.app.redis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`requestCount:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stats.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ date, count });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stats;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="checkdomain" tabindex="-1"><code>checkDomain</code> <a class="header-anchor" href="#checkdomain" aria-label="Permalink to &quot;\`checkDomain\`&quot;">​</a></h4><p>创建 <code>checkDomain</code> 中间件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allowedDomain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhuan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许的关键字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取请求的来源域名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 检查来源域名是否包含允许的关键字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (origin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allowedDomain)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果域名包含指定关键字，则继续处理请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ctx.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 否则，返回 403 Forbidden 状态码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Access denied. Your domain is not allowed to access this API.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>配置中间件使用</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 应用 checkDomain 中间件到所有受保护的请求上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/protected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, app.middleware.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checkDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), controller.protected.index);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其他路由配置...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="编码辅助工具-aigc-yao-copilot" tabindex="-1">编码辅助工具[AIGC]-Yao Copilot <a class="header-anchor" href="#编码辅助工具-aigc-yao-copilot" aria-label="Permalink to &quot;编码辅助工具[AIGC]-Yao Copilot&quot;">​</a></h2><h3 id="背景-3" tabindex="-1">背景 <a class="header-anchor" href="#背景-3" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>在开发流程中针对zzui组件的大量使用，我设计并开发了VSCode插件Yao，显著提高了团队的开发效率。随着前端生态的不断丰富，Yao插件通过集成最新的OpenAI GPT-4技术，不仅实现了代码的智能生成与解读，更通过智能mock等高级功能极大地丰富了开发体验。该项目在公司进行了发布，并荣获公司AIGC应用项目三等奖。</p><h3 id="技术栈-3" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈-3" aria-label="Permalink to &quot;技术栈&quot;">​</a></h3><p>vscode插件开发 + vue + naive-ui + axios + express + mysql + sequelize + redis + nginx</p><h3 id="职责-3" tabindex="-1">职责 <a class="header-anchor" href="#职责-3" aria-label="Permalink to &quot;职责&quot;">​</a></h3><ol><li><strong>项目领导与设计：</strong> 作为项目主导，负责Yao插件整体的架构设计与开发。成功整合VSCode插件端、ChatGPT网页端、后台管理系统及API后端接口，形成一个高效、稳定的开发支持环境。</li><li><strong>基础组件库支持：</strong> 使用VSCode API <code>registerCompletionItemProvider</code> 实现zzui组件的提示，提高开发效率，并支持组件自动导入和use，简化了组件使用流程。</li><li>**智能代码辅助开发：**选中代码可以进行代码解释、代码生成、优化代码、ts 类型文件转 json 数据，简化前后端接口数据的对接以及技术问答等</li><li><strong>增强开发者体验：</strong> 通过<code>createWebviewPanel</code>和<code>WebviewViewProvider.resolveWebviewView</code>，实现侧边栏Webview的集成，为开发者提供丰富的交互式体验。</li><li><strong>插件与Web端通信：</strong> 设计并实现了高效的Communication类和vscodePlugin插件，确保VSCode插件与Web端的无缝通信，提升开发效率。</li><li><strong>用户体验与前端安全：</strong> 在网页端采用naive-ui框架，支持模型切换、自定义角色等，并支持手机验证码登录，增强了系统的易用性和安全性。</li><li><strong>后端服务与安全：</strong> 负责API接口的开发，采用Express框架，通过JWT实现鉴权，利用Sequelize进行高效的数据库操作。同时，通过rateLimit实现请求限流，以及设置定时任务进行数据备份，确保系统的安全和稳定运行。</li></ol><h3 id="收益" tabindex="-1">收益 <a class="header-anchor" href="#收益" aria-label="Permalink to &quot;收益&quot;">​</a></h3><p>1、整体开发效率提升30+%</p><p>2、统一团队的代码风格</p><p>3、沉淀vscode开发文档，形成可复制的经验</p><h3 id="问题预设-2" tabindex="-1">问题预设 <a class="header-anchor" href="#问题预设-2" aria-label="Permalink to &quot;问题预设&quot;">​</a></h3><h4 id="_1、导入组件时候的范围-vue文件、template中-如何确定当前是在-template中" tabindex="-1">1、导入组件时候的范围，vue文件、<code>template</code>中，如何确定当前是在 <code>template</code>中？ <a class="header-anchor" href="#_1、导入组件时候的范围-vue文件、template中-如何确定当前是在-template中" aria-label="Permalink to &quot;1、导入组件时候的范围，vue文件、\`template\`中，如何确定当前是在 \`template\`中？&quot;">​</a></h4><p><code>document.languageId</code> 确定文件类型；</p><p>拿到当前行的行号，循环递减，使用正则匹配是否具备 <code>script</code>标签</p><h4 id="_2、如何知道用户按下了enter" tabindex="-1">2、如何知道用户按下了enter？ <a class="header-anchor" href="#_2、如何知道用户按下了enter" aria-label="Permalink to &quot;2、如何知道用户按下了enter？&quot;">​</a></h4><p>配置 command ，当按下的时候会去执行这个command对应的逻辑</p><h4 id="_3、如何支持全量的zzui" tabindex="-1">3、如何支持全量的zzui？ <a class="header-anchor" href="#_3、如何支持全量的zzui" aria-label="Permalink to &quot;3、如何支持全量的zzui？&quot;">​</a></h4><h2 id="你做过最难的是什么" tabindex="-1">你做过最难的是什么？ <a class="header-anchor" href="#你做过最难的是什么" aria-label="Permalink to &quot;你做过最难的是什么？&quot;">​</a></h2><p>心态-对未知的恐惧</p><p>图片编辑器为例</p><p>沟通-多方沟通消息不对等</p><p>企业微信内嵌h5 页面</p><p>跟红布林合作沟通、彩云天气</p><p>技术-没有知识储备，难点是相对的，知道就简单，不知道就难</p><p>移动端：</p><p>1、webpack慢，那么开发能不能换成vite 呢？生产能不能用？会有哪些问题？</p><p>2、我想点击一个地址能不能自己打开腾讯地图进行路径规划呢？这样更加容易上门小哥进行业务操作</p><p>3、如何获取到准确的位置信息呢？ h5 行吗？</p><p>4、搜索怎么做呢？</p><p>管理后台</p><p>1、权限管理有哪些？怎么做？</p><p>2、websocket 怎么设计呢？</p><p>3、proTable 自定义列 怎么搞呢？</p><p>4、第三方出现跨域问题</p><p>5、多地点间进行路径规划怎么整？</p><p>数据爬取</p><p>1、我需要的数据能从王者荣耀的生态中哪里找到？</p><p>2、抓包，怎么抓？抓出来是加密的怎么破解？</p><p>3、登陆态会过期，怎解决？</p><p>4、数据爬取 代理应该怎么配置？</p><p>5、如何保证服务的稳定性？</p><p>6、如何监控？</p><p>vscode插件</p><p>1、从来没接触过，就开始弄</p><p>2、英文文档看不懂</p><p>3、zzui 导入怎么做？</p><p>4、通信应该怎么做？</p><p>5、webview 有什么坑呢？</p><h2 id="勇哥面试建议" tabindex="-1">勇哥面试建议 <a class="header-anchor" href="#勇哥面试建议" aria-label="Permalink to &quot;勇哥面试建议&quot;">​</a></h2><blockquote><p>对业务的思路上面</p></blockquote><p>项目怎么弄出来的？ 怎么解决业务的痛点？如何实现？ 遇到了什么问题？怎么解决？沉淀了什么？ 反思了什么？如何验证了业务效果？</p><p>怎么做业务? 有哪些方案？</p><p>回答问题：</p><ul><li>回答面试官的问题</li><li>优化、改进</li><li>自带出来其他的我问题</li></ul><p>编程：</p><ul><li><p>先思考、为什么在出这个提，先想好，想考察什么，再写</p></li><li><p>先思考好了，在写</p></li><li><p>规范</p></li><li><p>严谨</p></li><li><p>边界考虑</p></li><li><p>输入返回</p></li><li><p>思维方式</p></li><li><p>严谨、工整、合理、健壮、在优化</p></li><li><p>插入、边界的处理、输入和返回</p></li></ul><p>hr 问原因：</p><p>职级：</p><p>生活压力：</p><p>1、签字费 没有签证费</p><p>2、薪资</p><p>3、常规方案： 30%， 2-1， 我还是很想去字节这边， 40%</p><p>4、发展空间有限。想去更大的平台，同事推荐</p><p>回答面试官的问题，自带出来其他的我问题</p><p>优化、改进</p><p>面试官问的是什么？尤其是答案不一样什么？</p><p>比如： 数据不一致怎么看？</p><p>每个问题回答几个点，层层递进、包括思考</p>`,255),l=[p];function t(r,h,k,o,c,d){return i(),a("div",null,l)}const b=s(e,[["render",t]]);export{E as __pageData,b as default};
