import{_ as s,c as a,o as n,V as e}from"./chunks/framework.hxTji2_l.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/CSS/CSS-2.md","filePath":"interview/CSS/CSS-2.md","lastUpdated":1716393985000}'),p={name:"interview/CSS/CSS-2.md"},l=e(`<p>CSS2</p><h3 id="第1题-怎么实现一个宽高自适应的正方形" tabindex="-1">第1题：怎么实现一个宽高自适应的正方形？ <a class="header-anchor" href="#第1题-怎么实现一个宽高自适应的正方形" aria-label="Permalink to &quot;第1题：怎么实现一个宽高自适应的正方形？&quot;">​</a></h3><p>1、利用vw来实现</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.square {</span></span>
<span class="line"><span>  width: 10%;</span></span>
<span class="line"><span>  height: 10vw;</span></span>
<span class="line"><span>  background: tomato;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2、利用元素的margin/padding百分比是相对父元素width的性质来实现：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.square {</span></span>
<span class="line"><span>  width: 20%;</span></span>
<span class="line"><span>  height: 0;</span></span>
<span class="line"><span>  padding-top: 20%;</span></span>
<span class="line"><span>  background: orange;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>3、利用子元素的margin-top的值来实现：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.square {</span></span>
<span class="line"><span>  width: 30%;</span></span>
<span class="line"><span>  overflow: hidden;</span></span>
<span class="line"><span>  background: yellow;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.square::after {</span></span>
<span class="line"><span>  content: &#39;&#39;;</span></span>
<span class="line"><span>  display: block;</span></span>
<span class="line"><span>  margin-top: 100%;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="第2题-说说对-css-工程化的理解" tabindex="-1">第2题：说说对 CSS 工程化的理解 <a class="header-anchor" href="#第2题-说说对-css-工程化的理解" aria-label="Permalink to &quot;第2题：说说对 CSS 工程化的理解&quot;">​</a></h3><p>CSS 工程化是为了解决以下问题：</p><ol><li><strong>宏观设计</strong>：CSS 代码如何组织、如何拆分、模块结构怎样设计？</li><li><strong>编码优化</strong>：怎样写出更好的 CSS？</li><li><strong>构建</strong>：如何处理我的 CSS，才能让它的打包结果最优？</li><li><strong>可维护性</strong>：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？</li></ol><p>以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：</p><ul><li>预处理器：Less、 Sass 等；</li><li>重要的工程化插件： PostCss；</li><li>Webpack loader 等 。</li></ul><p>基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：</p><p><strong>（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？</strong></p><p>预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码：</p><p><img src="https://qn.huat.xyz/mac/202312192232009.image" alt="img"></p><p>那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样。</p><p>随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：</p><ol><li>宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；</li><li>编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；</li><li>可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。</li></ol><p>这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：</p><ul><li>嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ；</li><li>支持定义 css 变量；</li><li>提供计算函数；</li><li>允许对代码片段进行 extend 和 mixin；</li><li>支持循环语句的使用；</li><li>支持将 CSS 文件模块化，实现复用。</li></ul><p><strong>（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？</strong></p><p><img src="https://qn.huat.xyz/mac/202312192232207.image" alt="img"></p><p>它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。</p><p>PostCss 在业务中的使用场景非常多：</p><ul><li>提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；</li><li>当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noreferrer">Autoprefixer</a> 插件可以帮助我们自动增加浏览器前缀；</li><li>允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码；</li></ul><p><strong>（3）Webpack 能处理 CSS 吗？如何实现？</strong></p><ul><li><strong>Webpack 在裸奔的状态下，是不能处理 CSS 的</strong>，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；</li><li>Webpack 在 loader 的辅助下，是可以处理 CSS 的。</li></ul><p>如何用 Webpack 实现对 CSS 的处理：</p><ul><li>Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader</li><li>注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情： <ul><li>css-loader：导入 CSS 模块，对 CSS 代码进行编译处理；</li><li>style-loader：创建style标签，把 CSS 内容写入标签。</li></ul></li></ul><p>在实际使用中，<strong>css-loader 的执行顺序一定要安排在 style-loader 的前面</strong>。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。</p><h3 id="第3题-css预处理器-后处理器是什么-为什么要使用它们" tabindex="-1">第3题：CSS预处理器/后处理器是什么？为什么要使用它们？ <a class="header-anchor" href="#第3题-css预处理器-后处理器是什么-为什么要使用它们" aria-label="Permalink to &quot;第3题：CSS预处理器/后处理器是什么？为什么要使用它们？&quot;">​</a></h3><p><strong>预处理器，</strong> 如：<code>less</code>，<code>sass</code>，<code>stylus</code>，用来预编译<code>sass</code>或者<code>less</code>，增加了<code>css</code>代码的复用性。层级，<code>mixin</code>， 变量，循环， 函数等对编写以及开发UI组件都极为方便。</p><p><strong>后处理器，</strong> 如： <code>postCss</code>，通常是在完成的样式表中根据<code>css</code>规范处理<code>css</code>，让其更加有效。目前最常做的是给<code>css</code>属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p><p><code>css</code>预处理器为<code>css</code>增加一些编程特性，无需考虑浏览器的兼容问题，可以在<code>CSS</code>中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让<code>css</code>更加的简洁，增加适应性以及可读性，可维护性等。</p><p>其它<code>css</code>预处理器语言：<code>Sass（Scss）</code>, <code>Less</code>, <code>Stylus</code>, <code>Turbine</code>, <code>Swithch css</code>, <code>CSS Cacheer</code>, <code>DT Css</code>。</p><p>使用原因：</p><ul><li>结构清晰， 便于扩展</li><li>可以很方便的屏蔽浏览器私有语法的差异</li><li>可以轻松实现多重继承</li><li>完美的兼容了<code>CSS</code>代码，可以应用到老项目中</li></ul><h4 id="拓展" tabindex="-1">拓展 <a class="header-anchor" href="#拓展" aria-label="Permalink to &quot;拓展&quot;">​</a></h4><p>css-loader 和 postcss-loader 有什么区别？</p><p><code>css-loader</code> 和 <code>postcss-loader</code> 是 webpack 中使用的两种不同的加载器（loader），它们在处理 CSS 文件时扮演着不同的角色。</p><p>css-loader</p><ol><li><p><strong>功能</strong>：<code>css-loader</code> 的主要功能是处理 CSS 文件中的 <code>@import</code> 和 <code>url()</code> 表达式，就像它们在 JS 模块系统中被使用一样。这允许你在 CSS 文件中使用本地文件路径，<code>css-loader</code> 会解析这些路径并将对应的文件包含在 webpack 的依赖图中。</p></li><li><p><strong>转换为模块</strong>：<code>css-loader</code> 还会将 CSS 转换为 JavaScript 模块。当你在 JavaScript 文件中导入 CSS 文件时（例如使用 <code>import &#39;./style.css&#39;</code>），<code>css-loader</code> 会生成一个 JavaScript 模块，这个模块包含了 CSS 字符串及其相关的处理逻辑。</p></li><li><p><strong>与其他加载器结合</strong>：通常与 <code>style-loader</code>（将 CSS 插入到 DOM 中）或 <code>MiniCssExtractPlugin.loader</code>（将 CSS 提取到单独的文件中）结合使用。</p></li></ol><p>postcss-loader</p><ol><li><p><strong>功能</strong>：<code>postcss-loader</code> 是用来使用 PostCSS 处理 CSS 文件的。PostCSS 是一个功能强大的工具，可以通过插件来扩展 CSS 的功能，比如自动添加浏览器厂商前缀、使用未来的 CSS 语法、优化 CSS 代码等。</p></li><li><p><strong>插件系统</strong>：PostCSS 的核心特性是它的插件系统，<code>postcss-loader</code> 允许你在 webpack 构建过程中应用这些插件。你可以在 <code>postcss.config.js</code> 配置文件中指定要使用的插件。</p></li><li><p><strong>灵活性和扩展性</strong>：<code>postcss-loader</code> 提供了极大的灵活性和扩展性，你可以根据项目的需要选择和配置各种插件，例如 <code>autoprefixer</code>、<code>cssnano</code>、<code>postcss-preset-env</code> 等。</p></li></ol><p>在 webpack 中的使用</p><p>在 webpack 的配置中，这两个加载器通常一起使用，先使用 <code>css-loader</code> 处理 CSS 文件，然后使用 <code>postcss-loader</code> 进一步处理 <code>css-loader</code> 的输出。这允许你既能利用 <code>css-loader</code> 的模块化特性，又能享受 PostCSS 提供的强大功能和灵活的插件系统。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 JS 字符串生成为 style 节点</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 CSS 转化成 CommonJS 模块</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;postcss-loader&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用 postcss 处理 CSS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>简而言之，<code>css-loader</code> 主要负责将 CSS 转化为 JS 模块并处理 CSS 中的依赖，而 <code>postcss-loader</code> 负责使用 PostCSS 插件来转换和优化 CSS 代码。</p><p>在 webpack 的生态系统中，<code>style-loader</code> 和 <code>MiniCssExtractPlugin.loader</code> 是两个常用的加载器（loader），它们用于处理样式文件，但以不同的方式。</p><p>style-loader</p><ol><li><p><strong>功能</strong>：<code>style-loader</code> 用于将 CSS 添加到 DOM 中。当你在 JavaScript 文件中导入 CSS 时，<code>style-loader</code> 会生成一个 <code>&lt;style&gt;</code> 标签，并将 CSS 内容插入到这个标签中。然后，这个标签会被添加到 HTML 文档的 <code>&lt;head&gt;</code> 部分。</p></li><li><p><strong>开发环境中的使用</strong>：由于 <code>style-loader</code> 插入的样式是热加载的，这使得它非常适合在开发环境中使用，因为它支持热模块替换（HMR），即当 CSS 文件被修改时，页面无需完全刷新即可更新样式。</p></li><li><p><strong>局限性</strong>：在生产环境中，使用 <code>style-loader</code> 可能会导致一些性能问题，因为所有的 CSS 都会打包进 JavaScript 文件中，增加了文件大小，并可能延迟了样式的加载。</p></li></ol><p>MiniCssExtractPlugin.loader</p><ol><li><p><strong>功能</strong>：<code>MiniCssExtractPlugin.loader</code> 用于将 CSS 提取到单独的文件中。在构建过程中，它会生成 <code>.css</code> 文件而不是将 CSS 内容注入到 JavaScript 中。这对于生产环境特别有用，因为它减少了主 JavaScript 文件的大小，并允许浏览器并行加载 CSS 和 JavaScript。</p></li><li><p><strong>生产环境中的使用</strong>：在生产环境中，将 CSS 提取为单独的文件通常是更好的选择，因为这样可以利用浏览器的缓存机制，只有在 CSS 文件本身发生变化时才需要重新加载，同时还可以减少初始加载时间。</p></li><li><p><strong>配置</strong>：要使用 <code>MiniCssExtractPlugin</code>，你需要安装插件，并在 webpack 配置中添加它。它通常与 <code>optimize-css-assets-webpack-plugin</code> 一起使用，后者用于优化和压缩提取出的 CSS 文件。</p></li></ol><p>使用场景对比</p><ul><li><p><strong>开发环境</strong>：在开发环境中，推荐使用 <code>style-loader</code>，因为它支持热模块替换，能够提高开发效率。</p></li><li><p><strong>生产环境</strong>：在生产环境中，建议使用 <code>MiniCssExtractPlugin.loader</code> 将 CSS 提取到单独的文件中，以优化加载性能和资源缓存。</p></li></ul><p>webpack 中的配置示例</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开发环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生产环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [MiniCssExtractPlugin.loader, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在实际使用中，你可以根据构建环境（development 或 production）动态地选择使用 <code>style-loader</code> 还是 <code>MiniCssExtractPlugin.loader</code>。</p><h3 id="第4题-为什么有时候用translate来改变位置而不是使用position进行定位" tabindex="-1">第4题：为什么有时候⽤translate来改变位置⽽不是使用position进行定位？ <a class="header-anchor" href="#第4题-为什么有时候用translate来改变位置而不是使用position进行定位" aria-label="Permalink to &quot;第4题：为什么有时候⽤translate来改变位置⽽不是使用position进行定位？&quot;">​</a></h3><p>translate 是 transform 属性的⼀个值。</p><p>改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。</p><p>⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。</p><p>transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。</p><p>因此translate()更⾼效，可以缩短平滑动画的绘制时间。</p><p>⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。</p><p>具体的原理可查看 <a href="https://mp.weixin.qq.com/s?__biz=Mzk0NTI2NDgxNQ==&amp;mid=2247484939&amp;idx=1&amp;sn=229467c549cec5e3980671f488a4d89e&amp;chksm=c31947cbf46ecedd13f930b44e9bc2a25ce706a8d30fce56c54584598015640338a6e075b8ff#rd" target="_blank" rel="noreferrer">【前端基础系列】CSS篇-带你搞懂“硬件加速”</a></p><h3 id="第5题-transition和animation的区别" tabindex="-1">第5题：transition和animation的区别 <a class="header-anchor" href="#第5题-transition和animation的区别" aria-label="Permalink to &quot;第5题：transition和animation的区别&quot;">​</a></h3><ul><li>transition是过度属性，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。</li><li>animation是动画属性，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。</li></ul><h3 id="第6题-下面这段代码中-class为content的元素-实际高度是100px吗" tabindex="-1">第6题：下面这段代码中，class为content的元素，实际高度是100px吗？ <a class="header-anchor" href="#第6题-下面这段代码中-class为content的元素-实际高度是100px吗" aria-label="Permalink to &quot;第6题：下面这段代码中，class为content的元素，实际高度是100px吗？&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span>&lt;html lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span>  &lt;head&gt;</span></span>
<span class="line"><span>    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>
<span class="line"><span>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span></span>
<span class="line"><span>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span></span>
<span class="line"><span>    &lt;title&gt;Static Template&lt;/title&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;style&gt;</span></span>
<span class="line"><span>      .parent {</span></span>
<span class="line"><span>        display: flex;</span></span>
<span class="line"><span>        flex-direction: column;</span></span>
<span class="line"><span>        height: 600px;</span></span>
<span class="line"><span>        width: 300px;</span></span>
<span class="line"><span>        background: yellow;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      div {</span></span>
<span class="line"><span>        width: 100%;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      .header {</span></span>
<span class="line"><span>        height: 200px;</span></span>
<span class="line"><span>        background: red;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      .content {</span></span>
<span class="line"><span>        height: 100%;</span></span>
<span class="line"><span>        background: blue;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      .footer {</span></span>
<span class="line"><span>        height: 200px;</span></span>
<span class="line"><span>        background: black;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    &lt;/style&gt;</span></span>
<span class="line"><span>  &lt;/head&gt;</span></span>
<span class="line"><span>  &lt;body&gt;</span></span>
<span class="line"><span>    &lt;div class=&quot;parent&quot;&gt;</span></span>
<span class="line"><span>      &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>      &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>      &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  &lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>不是。首先，content元素的 height 设置为 “100%”，在父级的高度为固定值时，直接继承该高度，也就是600px。但父级设置了 display:flex ，在高度固定的前提下，子元素的高度会按比例进行缩放，所以content元素最后的高度应该是 600 * (600/(200+600+200)) = 360px</p><p>在线demo可访问查看： <a href="https://codesandbox.io/s/strange-curran-3kci7i?file=/index.html" target="_blank" rel="noreferrer">https://codesandbox.io/s/strange-curran-3kci7i?file=/index.html</a></p><h3 id="第7题-说说-vue-中-css-scoped-的原理-详解-vue-loader" tabindex="-1">第7题：说说 Vue 中 CSS scoped 的原理(详解 vue-loader) <a class="header-anchor" href="#第7题-说说-vue-中-css-scoped-的原理-详解-vue-loader" aria-label="Permalink to &quot;第7题：说说 Vue 中 CSS scoped 的原理(详解 vue-loader)&quot;">​</a></h3><p><a href="https://fe.ecool.fun/topic-answer/3e12b5bf-53ed-4b71-a199-49d7935f87b4?orderBy=updateTime&amp;order=desc&amp;tagId=11" target="_blank" rel="noreferrer">https://fe.ecool.fun/topic-answer/3e12b5bf-53ed-4b71-a199-49d7935f87b4?orderBy=updateTime&amp;order=desc&amp;tagId=11</a></p><h3 id="第8题-硬件加速的原理是什么" tabindex="-1">第8题：硬件加速的原理是什么？ <a class="header-anchor" href="#第8题-硬件加速的原理是什么" aria-label="Permalink to &quot;第8题：硬件加速的原理是什么？&quot;">​</a></h3><p><a href="https://fe.ecool.fun/topic-answer/5adab921-8dfb-4a65-9f44-38ae8a70820f?orderBy=updateTime&amp;order=desc&amp;tagId=11" target="_blank" rel="noreferrer">https://fe.ecool.fun/topic-answer/5adab921-8dfb-4a65-9f44-38ae8a70820f?orderBy=updateTime&amp;order=desc&amp;tagId=11</a></p><h3 id="第9题-css动画和js实现的动画分别有哪些优缺点" tabindex="-1">第9题：CSS动画和JS实现的动画分别有哪些优缺点？ <a class="header-anchor" href="#第9题-css动画和js实现的动画分别有哪些优缺点" aria-label="Permalink to &quot;第9题：CSS动画和JS实现的动画分别有哪些优缺点？&quot;">​</a></h3><h4 id="css动画" tabindex="-1">CSS动画 <a class="header-anchor" href="#css动画" aria-label="Permalink to &quot;CSS动画&quot;">​</a></h4><h5 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h5><ul><li>浏览器可以对动画进行优化</li><li>代码相对简单,性能调优方向固定</li><li>对于帧速表现不好的低版本浏览器，<code>CSS3</code>可以做到自然降级，而<code>JS</code>则需要撰写额外代码</li></ul><h5 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h5><ul><li>运行过程控制较弱,无法附加事件绑定回调函数</li><li>代码冗长，想用<code>CSS</code>实现稍微复杂一点动画,最后<code>CSS</code>代码都会变得非常笨重</li></ul><h4 id="js动画" tabindex="-1">JS动画 <a class="header-anchor" href="#js动画" aria-label="Permalink to &quot;JS动画&quot;">​</a></h4><h5 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h5><ul><li>控制能力很强, 可以在动画播放过程中对动画进行控制：开始、暂停、回放、终止、取消都是可以做到的。</li><li>动画效果比<code>css3</code>动画丰富,有些动画效果，比如曲线运动,冲击闪烁,视差滚动效果，只有<code>js</code>动画才能完成</li><li><code>CSS3</code>有兼容性问题，而<code>JS</code>大多时候没有兼容性问题</li></ul><h5 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h5><ul><li>代码的复杂度高于<code>CSS</code>动画</li><li><code>JavaScript</code>在浏览器的主线程中运行，而主线程中还有其它需要运行的<code>JavaScript</code>脚本、样式计算、布局、绘制任务等,对其干扰导致线程可能出现阻塞，从而造成丢帧的情况</li></ul><h3 id="第10题-前端实现动画有哪些方式" tabindex="-1">第10题：前端实现动画有哪些方式？ <a class="header-anchor" href="#第10题-前端实现动画有哪些方式" aria-label="Permalink to &quot;第10题：前端实现动画有哪些方式？&quot;">​</a></h3><ol><li>css3的<code>transition</code> 属性</li><li>css3的<code>animation</code> 属性</li><li>原生JS动画</li><li>使用<code>canvas</code>绘制动画</li><li>SVG动画</li><li>Jquery的<code>animate</code>函数</li><li>使用gif图片</li></ol><p><a href="https://fe.ecool.fun/topic-answer/8b516cb7-fa94-4d68-929f-d3c628d1b7a2?orderBy=updateTime&amp;order=desc&amp;tagId=11" target="_blank" rel="noreferrer">https://fe.ecool.fun/topic-answer/8b516cb7-fa94-4d68-929f-d3c628d1b7a2?orderBy=updateTime&amp;order=desc&amp;tagId=11</a></p><h3 id="第11题-假设下面样式都作用于同一个节点元素span-判断下面哪个样式会生效" tabindex="-1">第11题：假设下面样式都作用于同一个节点元素<code>span</code>，判断下面哪个样式会生效 <a class="header-anchor" href="#第11题-假设下面样式都作用于同一个节点元素span-判断下面哪个样式会生效" aria-label="Permalink to &quot;第11题：假设下面样式都作用于同一个节点元素\`span\`，判断下面哪个样式会生效&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>body#god div.dad span.son {width: 200px;}</span></span>
<span class="line"><span>body#god span#test {width: 250px;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>本题考察css的样式优先级权重，大家需要记住：</p><p>当两个权值进行比较的时候，是从高到低逐级将等级位上的权重值（如 权值 1,0,0,0 对应--&gt; 第一等级权重值，第二等级权重值，第三等级权重值，第四等级权重值）来进行比较的，而不是简单的 1000个数 + 100个数 + 10个数 + 1个数 的总和来进行比较的，换句话说，低等级的选择器，个数再多也不会越等级超过高等级的选择器的优先级的。</p><p>所以本题的分析思路是：</p><ul><li>先比较高权重位，即第一个样式的高权重为 <code>#god</code> = 100</li><li>第二个样式的高权重为 <code>#god</code> + <code>#text</code> = 200</li><li>100 &lt; 200</li><li>所以最终计算结果是取 <code>width: 250px;</code></li><li>若两个样式的高权重数量一样的话，则需要比较下一较高权重！</li></ul><p>答案是 <code>width: 250px;</code></p><h3 id="第12题-为何css不支持父选择器" tabindex="-1">第12题：为何CSS不支持父选择器？ <a class="header-anchor" href="#第12题-为何css不支持父选择器" aria-label="Permalink to &quot;第12题：为何CSS不支持父选择器？&quot;">​</a></h3><p>这个问题的答案和“为何CSS相邻兄弟选择器只支持后面的元素，而不支持前面的兄弟元素？”是一样的。</p><p>浏览器解析HTML文档，是从前往后，由外及里的。所以，我们时常会看到页面先出现头部然后主体内容再出现的加载情况。</p><p>但是，如果CSS支持了父选择器，那就必须要页面所有子元素加载完毕才能渲染HTML文档，因为所谓“父选择器”，就是后代元素影响祖先元素，如果后代元素还没加载处理，如何影响祖先元素的样式？于是，网页渲染呈现速度就会大大减慢，浏览器会出现长时间的白板。加载多少HTML就可以渲染多少HTML，在网速不是很快的时候，就显得尤为的必要。比方说你现在看的这篇文章，只要文章内容加载出来就可以了，就算后面的广告脚本阻塞了后续HTML文档的加载，我们也是可以阅读和体验。但是，如果支持父选择器，则整个文档不能有阻塞，页面的可访问性则要大大降低。</p><p>有人可能会说，要不采取加载到哪里就渲染到哪里的策略？这样子问题更大，因为会出现加载到子元素的时候，父元素本来渲染的样式突然变成了另外一个样式的情况，体验非常不好。</p><p>“相邻选择器只能选择后面的元素”也是一样的道理，不可能说后面的HTML加载好了，还会影响前面HTML的样式。</p><p>所以，从这一点来讲，CSS支持“父选择器”或者“前兄弟选择器”的可能性要比其他炫酷的CSS特性要低，倒不是技术层面，而是CSS和HTML本身的渲染机制决定的。当然，以后的事情谁都说不准，说不定以后网速都是每秒几个G的，网页加载速度完全就忽略不计，说不定就会支持了。</p><h3 id="第13题-第二个子元素的高度是多少" tabindex="-1">第13题：第二个子元素的高度是多少 <a class="header-anchor" href="#第13题-第二个子元素的高度是多少" aria-label="Permalink to &quot;第13题：第二个子元素的高度是多少&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;div class=&quot;container&quot;&gt;</span></span>
<span class="line"><span>    &lt;div style=&quot;height: 100px&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>    &lt;div style=&quot;min-height: 10px&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span>&lt;style&gt;</span></span>
<span class="line"><span>    .container{</span></span>
<span class="line"><span>        display: flex;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    .container &gt; div {</span></span>
<span class="line"><span>        width: 100px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>&lt;/style&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>答案：100px</p><p>Flex 布局会默认：</p><ul><li>把所有子项变成水平排列。</li><li>默认不自动换行。</li><li>让子项与其内容等宽，并把所有子项的高度变为最高子项的高度。</li></ul><h3 id="第14题-如何从html元素继承box-sizing" tabindex="-1">第14题：如何从html元素继承box-sizing？ <a class="header-anchor" href="#第14题-如何从html元素继承box-sizing" aria-label="Permalink to &quot;第14题：如何从html元素继承box-sizing？&quot;">​</a></h3><p>在大多数情况下我们在设置元素的 border 和 padding 并不希望改变元素的 width,height值，这个时候我们就可以为该元素设置 <code>box-sizing:border-box;</code>。</p><p>如果不希望每次都重写一遍，而是希望他是继承而来的，那么我们可以使用如下代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>html {</span></span>
<span class="line"><span>  box-sizing: border-box;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>*, *:before, *:after {</span></span>
<span class="line"><span>  box-sizing: inherit;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样的好处在于他不会覆盖其他组件的 box-sizing 值，又无需为每一个元素重复设置 box-sizing:border-box;</p><h3 id="第15题-js和css是如何影响dom树构建的" tabindex="-1">第15题：js和css是如何影响DOM树构建的？ <a class="header-anchor" href="#第15题-js和css是如何影响dom树构建的" aria-label="Permalink to &quot;第15题：js和css是如何影响DOM树构建的？&quot;">​</a></h3><p>先做个总结，然后再进行具体的分析：</p><p>CSS不会阻塞DOM的解析，但是会影响JAVAScript的运行，javaSscript会阻止DOM树的解析，最终css（CSSOM）会影响DOM树的渲染，也可以说最终会影响渲染树的生成。</p><p>接下来我们先看javascript对DOM树构建和渲染是如何造成影响的，分成三种类型来讲解：</p><h4 id="javascript脚本在html页面中" tabindex="-1">JavaScript脚本在html页面中 <a class="header-anchor" href="#javascript脚本在html页面中" aria-label="Permalink to &quot;JavaScript脚本在html页面中&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>  &lt;body&gt;</span></span>
<span class="line"><span>    &lt;div&gt;1&lt;/div&gt;</span></span>
<span class="line"><span>    &lt;script&gt;</span></span>
<span class="line"><span>      let div1 = document.getElementsByTagName(&#39;div&#39;)[0]</span></span>
<span class="line"><span>      div1.innerText = &#39;time.geekbang&#39;</span></span>
<span class="line"><span>    &lt;/script&gt;</span></span>
<span class="line"><span>    &lt;div&gt;test&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>两段div中间插入一段JavaScript脚本，这段脚本的解析过程就有点不一样了。</p><p>当解析到script脚本标签时，HTML解析器暂停工作，javascript引擎介入，并执行script标签中的这段脚本。</p><p>因为这段javascript脚本修改了DOM中第一个div中的内容，所以执行这段脚本之后，div节点内容已经修改为time.geekbang了。脚本执行完成之后，HTML解析器回复解析过程，继续解析后续的内容，直至生成最终的DOM。</p><h4 id="html页面中引入javascript文件" tabindex="-1">html页面中引入javaScript文件 <a class="header-anchor" href="#html页面中引入javascript文件" aria-label="Permalink to &quot;html页面中引入javaScript文件&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//foo.js</span></span>
<span class="line"><span>let div1 = document.getElementsByTagName(&#39;div&#39;)[0]</span></span>
<span class="line"><span>div1.innerText = &#39;time.geekbang&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>  &lt;body&gt;</span></span>
<span class="line"><span>    &lt;div&gt;1&lt;/div&gt;</span></span>
<span class="line"><span>    &lt;script type=&quot;text/javascript&quot; src=&#39;foo.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span>    &lt;div&gt;test&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这段代码的功能还是和前面那段代码是一样的，只是把内嵌JavaScript脚本修改成了通过javaScript文件加载。</p><p>其整个执行流程还是一样的，执行到JAVAScript标签时，暂停整个DOM的解析，执行javascript代码，不过这里执行javascript时，需要现在在这段代码。这里需要重点关注下载环境，因为javascript文件的下载过程会阻塞DOM解析，而通常下载又是非常耗时的，会受到网络环境、javascript文件大小等因素的影响。</p><p>优化机制：</p><p>谷歌浏览器做了很多优化，其中一个主要的优化就是预解析操作。当渲染引擎收到字节流之后，会开启一个预解析线程，用来分析HTML文件中包含的JavaScript、CSS等相关文件，解析到相关文件之后，会开启一个预解析线程，用来分析HTML文件中包含的javascprit、css等相关文件、解析到相关文件之后，预解析线程会提前下载这些文件。</p><p>再回到 DOM 解析上，我们知道引入 JavaScript 线程会阻塞 DOM，不过也有一些相关的策略来规避，比如使用 CDN 来加速 JavaScript 文件的加载，压缩 JavaScript 文件的体积。</p><p>另外，如果 JavaScript 文件中没有操作 DOM 相关代码，就可以将该 JavaScript 脚本设置为异步加载，通过 async 或 defer 来标记代码，使用方式如下所示：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;script async type=&quot;text/javascript&quot; src=&#39;foo.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span>&lt;script defer type=&quot;text/javascript&quot; src=&#39;foo.js&#39;&gt;&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>async和defer区别：</p><ul><li>async：脚本并行加载，加载完成之后立即执行，执行时机不确定，仍有可能阻塞HTML解析，执行时机在load事件派发之前。</li><li>defer：脚本并行加载，等待HTML解析完成之后，按照加载顺序执行脚本，执行时机DOMContentLoaded事件派发之前。</li></ul><h4 id="html页面中有css样式" tabindex="-1">html页面中有css样式 <a class="header-anchor" href="#html页面中有css样式" aria-label="Permalink to &quot;html页面中有css样式&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//theme.css</span></span>
<span class="line"><span>div {color:blue}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>    &lt;style src=&#39;theme.css&#39;&gt;&lt;/style&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>  &lt;div&gt;1&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;script&gt;</span></span>
<span class="line"><span>      let div1 = document.getElementsByTagName(&#39;div&#39;)[0]</span></span>
<span class="line"><span>      div1.innerText = &#39;time.geekbang&#39; // 需要 DOM</span></span>
<span class="line"><span>      div1.style.color = &#39;red&#39; // 需要 CSSOM</span></span>
<span class="line"><span>  &lt;/script&gt;</span></span>
<span class="line"><span>  &lt;div&gt;test&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>该示例中，JavaScript 代码出现了 <code>div1.style.color = ‘red’</code> 的语句，它是用来操纵 CSSOM 的，所以在执行 JavaScript 之前，需要先解析 JavaScript 语句之上所有的CSS 样式。所以如果代码里引用了外部的 CSS 文件，那么在执行 JavaScript 之前，还需要等待外部的 CSS 文件下载完成，并解析生成 CSSOM 对象之后，才能执行 JavaScript 脚本。</p><p>而 JavaScript 引擎在解析 JavaScript 之前，是不知道 JavaScript 是否操纵了 CSSOM的，所以渲染引擎在遇到 JavaScript 脚本时，不管该脚本是否操纵了 CSSOM，都会执行CSS 文件下载，解析操作，再执行 JavaScript 脚本。所以说 JavaScript 脚本是依赖样式表的，这又多了一个阻塞过程。</p><p>总结：通过上面三点的分析，我们知道了 JavaScript 会阻塞 DOM 生成，而样式文件又会阻塞js的执行。</p><h3 id="第16题-cssom树和dom树是同时解析的吗" tabindex="-1">第16题：CSSOM树和DOM树是同时解析的吗？ <a class="header-anchor" href="#第16题-cssom树和dom树是同时解析的吗" aria-label="Permalink to &quot;第16题：CSSOM树和DOM树是同时解析的吗？&quot;">​</a></h3><p>浏览器会下下载HTML解析页面生成DOM树，遇到CSS标签就开始解析CSS，这个过程不会阻塞，但是如果遇到了JS脚本，此时假如CSSOM还没有构建完，需要等待CSSOM构建完，再去执行JS脚本，然后再执行DOM解析，此时会阻塞。</p><h3 id="第17题-position-absolute绝对定位-是相对于谁的定位" tabindex="-1">第17题：position：absolute绝对定位，是相对于谁的定位？ <a class="header-anchor" href="#第17题-position-absolute绝对定位-是相对于谁的定位" aria-label="Permalink to &quot;第17题：position：absolute绝对定位，是相对于谁的定位？&quot;">​</a></h3><p>CSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。</p><p>absolute的元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的 <strong>非 static 定位祖先元素</strong> 的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p><h3 id="第18题-怎么做移动端的样式适配" tabindex="-1">第18题：怎么做移动端的样式适配？ <a class="header-anchor" href="#第18题-怎么做移动端的样式适配" aria-label="Permalink to &quot;第18题：怎么做移动端的样式适配？&quot;">​</a></h3><p><a href="https://fe.ecool.fun/topic-answer/ffd21d04-15d9-4f94-9167-5edf63a42741?orderBy=updateTime&amp;order=desc&amp;tagId=11" target="_blank" rel="noreferrer">https://fe.ecool.fun/topic-answer/ffd21d04-15d9-4f94-9167-5edf63a42741?orderBy=updateTime&amp;order=desc&amp;tagId=11</a></p><h3 id="第19题-css-垂直居中有哪些实现方式" tabindex="-1">第19题：CSS 垂直居中有哪些实现方式？ <a class="header-anchor" href="#第19题-css-垂直居中有哪些实现方式" aria-label="Permalink to &quot;第19题：CSS 垂直居中有哪些实现方式？&quot;">​</a></h3><p>我们在布局一个页面时，通常都会用到水平居中和垂直居中，处理水平居中很好处理，不外乎就是设定margin:0 auto;或是text-align:center;,就可以轻松解决掉水平居中的问题，但一直以来最麻烦对齐问题就是「垂直居中」，以下将介绍几种单纯利用CSS垂直居中的方式，只需要理解背后的原理就可以轻松应用。</p><p>下面为公共代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;div class=&quot;box&quot;&gt;</span></span>
<span class="line"><span>    &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.box {</span></span>
<span class="line"><span>    width: 300px;</span></span>
<span class="line"><span>    height: 300px;</span></span>
<span class="line"><span>    background: #ddd;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.small {</span></span>
<span class="line"><span>    background: red;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;flex&quot;">​</a></h4><p>方法 1</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>方法 2</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.small {</span></span>
<span class="line"><span>    align-self: center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="absolute-margin实现" tabindex="-1">absolute + margin实现 <a class="header-anchor" href="#absolute-margin实现" aria-label="Permalink to &quot;absolute + margin实现&quot;">​</a></h4><p>方法 1</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>    position: relative;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.small {</span></span>
<span class="line"><span>    position: absolute;</span></span>
<span class="line"><span>    top: 50%;</span></span>
<span class="line"><span>    left: 50%;</span></span>
<span class="line"><span>    margin: -50px 0 0 -50px;</span></span>
<span class="line"><span>    width: 100px;</span></span>
<span class="line"><span>    height: 100px;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>方法2</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>    position: relative;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.small {</span></span>
<span class="line"><span>    position: absolute;</span></span>
<span class="line"><span>    top: 0;</span></span>
<span class="line"><span>    right: 0;</span></span>
<span class="line"><span>    bottom: 0;</span></span>
<span class="line"><span>    left: 0;</span></span>
<span class="line"><span>    margin: auto;</span></span>
<span class="line"><span>    width: 100px;</span></span>
<span class="line"><span>    height: 100px;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="absolute-calc-实现" tabindex="-1">absolute + calc 实现 <a class="header-anchor" href="#absolute-calc-实现" aria-label="Permalink to &quot;absolute + calc 实现&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>    position: relative;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.small {</span></span>
<span class="line"><span>    position: absolute;</span></span>
<span class="line"><span>    top: calc(50% - 50px);</span></span>
<span class="line"><span>    left: calc(50% - 50px);</span></span>
<span class="line"><span>    width: 100px;</span></span>
<span class="line"><span>    height: 100px;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="absolute-transform-实现" tabindex="-1">absolute + transform 实现 <a class="header-anchor" href="#absolute-transform-实现" aria-label="Permalink to &quot;absolute + transform 实现&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>    position: relative;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.small {</span></span>
<span class="line"><span>    position: absolute;</span></span>
<span class="line"><span>    top: 50%;</span></span>
<span class="line"><span>    left: 50%;</span></span>
<span class="line"><span>    transform: translate3d(-50%,-50%,0);</span></span>
<span class="line"><span>    width: 100px;</span></span>
<span class="line"><span>    height: 100px;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="转行内元素" tabindex="-1">转行内元素 <a class="header-anchor" href="#转行内元素" aria-label="Permalink to &quot;转行内元素&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>    line-height: 300px;</span></span>
<span class="line"><span>    text-align: center;</span></span>
<span class="line"><span>    font-size: 0px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.small {</span></span>
<span class="line"><span>    padding: 6px 10px;</span></span>
<span class="line"><span>    font-size: 16px;</span></span>
<span class="line"><span>    display: inline-block;</span></span>
<span class="line"><span>    vertical-align: middle;</span></span>
<span class="line"><span>    line-height: 16px;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="table-cell" tabindex="-1">table-cell <a class="header-anchor" href="#table-cell" aria-label="Permalink to &quot;table-cell&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>    display: table-cell;</span></span>
<span class="line"><span>    text-align: center;</span></span>
<span class="line"><span>    vertical-align: middle;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.small {</span></span>
<span class="line"><span>    padding: 6px 10px;</span></span>
<span class="line"><span>    display: inline-block;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="第20题-怎么让css-flex布局最后一行列表左对齐" tabindex="-1">第20题：怎么让CSS flex布局最后一行列表左对齐？ <a class="header-anchor" href="#第20题-怎么让css-flex布局最后一行列表左对齐" aria-label="Permalink to &quot;第20题：怎么让CSS flex布局最后一行列表左对齐？&quot;">​</a></h3><p><a href="https://fe.ecool.fun/topic-answer/389a7ca7-43d2-4fbe-99ef-50bea32bef5c?orderBy=updateTime&amp;order=desc&amp;tagId=11" target="_blank" rel="noreferrer">https://fe.ecool.fun/topic-answer/389a7ca7-43d2-4fbe-99ef-50bea32bef5c?orderBy=updateTime&amp;order=desc&amp;tagId=11</a></p>`,172),i=[l];function t(r,c,o,d,b,h){return n(),a("div",null,i)}const g=s(p,[["render",t]]);export{m as __pageData,g as default};
