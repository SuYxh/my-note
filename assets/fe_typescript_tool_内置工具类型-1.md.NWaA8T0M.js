import{_ as s,c as i,o as a,V as t}from"./chunks/framework.hxTji2_l.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe/typescript/tool/内置工具类型-1.md","filePath":"fe/typescript/tool/内置工具类型-1.md","lastUpdated":1709799029000}'),e={name:"fe/typescript/tool/内置工具类型-1.md"},h=t('<p>通常情况下，在学习一门编程语言时，我们主要学习的是语法、内置对象以及内置方法，比如说 JavaScript，这三个概念可以分别对应到 <code>const name = &#39;linbudu&#39;;</code>、<code>Object</code> 、<code>Array.prototype.sort</code>。而对于 TypeScript，则可以对应到 <code>const name: string = &#39;linbudu&#39;;</code>、<code>any 类型</code> 以及这一节要介绍的工具类型。</p><p>对于内置方法，其实就是一批语言层面提供了的通用工具方法，还是以 JavaScript 为例，内置方法既包括了我们可以通过其它方法模拟的 <code>Array.prototype.map</code>，也包括 <code>Function()</code> 这样只能由底层引擎实现的部分。而 JavaScript 中的内置方法是用来操作值的，TypeScript 的内置方法是用来操作类型的。</p><p>这一节，我们要介绍的其实就是 TypeScript 内置的，专用于对类型进行编程的工具方法——我们称之为工具类型。TypeScript 内置了一批简单的工具类型，它们就是类型别名的使用方式，同时在全局可用，无需导入：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{}&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Partial 即是内置的工具类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在介绍过程中，我们只会关注这些工具类型的实际使用方式，对内部的实现原理并不是入门教程需要包括的部分——毕竟，我们在前面学习到的内置类型工具还不足以让我们完全理解类型编程。</p><p>在开始前，我们不妨思考一个问题：在日常使用 JavaScript 进行开发时，你和哪个数据结构打交道最多，为什么？</p><p>毋庸置疑，一定是对象，毕竟对象能够更完整地描述程序中的各种模型与状态——你是想要使用一个变量描述二十项归属于一个模型的属性，还是要想二十个变量名？同时，对象的扩展功能也是我们依赖的一项重要能力，这些都是面向对象编程范式中的概念，但其实，对于 JS 开发者来说，我们其实还常常忽略了对象的一个重要能力——即对属性的描述能力。</p><p>在 Class 一节中我们学习到了 Class 成员的可访问性描述，public / private / protected，而在对象类型一节中，我们也了解了类似的概念，即属性可选和属性只读。</p><p>JavaScript 中，可以通过 Object.defineProperty 来实现属性的只读，但你可以回想下自己有几次使用过这个能力来标记对象属性为只读？原因无他——使用方式不够直观，同时 JavaScript 开发者对只读的概念并不怎么关心。而在 TypeScript 中，我们此前了解过的对象类型只读，必须要在声明时就进行描述，同时无法再进行修改。但现在，有了工具类型的帮助，我们可以更愉快地实现类型修饰了。</p><p>第一个登场的工具类型是 Partial，它接收一个对象类型，并将这个对象类型的所有属性都标记为可选，这样我们就不需要一个个将它们标记为可选属性了。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartialUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;john.doe@example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以不实现全部的属性了！ const partialUser: PartialUser = { name: &#39;John Doe&#39;, age: 30 };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从 Partial 的使用方式我们可以看到，工具类型使用起来就像一个函数——你给它入参，它还你出参，而出入参都是类型！而这些函数预留的参数，其实也正是我们此前介绍过的，类型世界中的变量——泛型。</p><p>如果我们最开始编写了一个内部属性均为必选的对象类型，可以使用 Partial 得到一个属性均为可选的版本。那如果反过来，一开始我们有的就是一个内部属性均为可选的对象类型呢？</p><p>这就要说到另一个类型编程的规律了——大部分工具类型都是成对出现的，有将属性标记为可选的 Partial，就会有将属性标记为必选的 Required，它的使用方式和 Partial 完全一致：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequiredUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在你必须全部实现这些属性了 const requiredUser: RequiredUser = { name: &#39;John Doe&#39;, age: 30, email: &#39;john.doe@example.com&#39; };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>还记得在对象类型一节中我们讲到的对对象类型属性的几种修饰吗？除了可选以外，还有一个 readonly 修饰，用于将属性标记为只读，类似于 Partial，TypeScript 中也内置了一个用于将对象类型所有属性标记为只读的工具类型 Readonly：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadonlyUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;john.doe@example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readonlyUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadonlyUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;john.doe@example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改 user 对象的属性 user.name = &#39;Jane Doe&#39;; user.age = 25; user.email = &#39;jane.doe@example.com&#39;; // 修改 readonlyUser 对象的属性 // readonlyUser.name = &#39;Jane Doe&#39;; // 报错 // readonlyUser.age = 25; // 报错 // readonlyUser.email = &#39;jane.doe@example.com&#39;; // 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>需要注意的是，TypeScript 内置的工具类型中，并不包括与 Readonly 结对出现的版本，你可以认为，只读通常是一个不可逆的行为，如果能够随意将只读修饰移除，就可能破坏了只读带来的安全性。同时，不同于可选与必选，我们最开始获得的类型输入基本不会携带 readonly 修饰。</p><p>这一节是内置工具类型的上篇，我们学习了 Partial、Required 以及 Readonly 这三个用在对象类型上的工具类型，以及它们的作用——可选、必选与只读。这些工具类型应当为你展示了类型世界的另一面——它也有自己的内置函数，我们甚至再无需学习新的概念——你只需要理解类型别名与泛型。而考虑到思维习惯的转变，这一节我们的篇幅要稍短一些，主要是通过三个最简单的工具类型，给你打开一点新世界的大门。而在下一节，我们会继续学习内置的工具类型，来感受一下 TypeScript 到底为你准备了多少贴心小礼物。</p>',19),p=[h];function n(k,l,r,d,y,g){return a(),i("div",null,p)}const o=s(e,[["render",n]]);export{F as __pageData,o as default};
