import{_ as s,c as i,o as a,V as n}from"./chunks/framework.hxTji2_l.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/node.md","filePath":"interview/node.md","lastUpdated":1719478304000}'),l={name:"interview/node.md"},e=n(`<h3 id="说说你对node-js-的理解-优缺点-应用场景" tabindex="-1">说说你对Node.js 的理解?优缺点?应用场景? <a class="header-anchor" href="#说说你对node-js-的理解-优缺点-应用场景" aria-label="Permalink to &quot;说说你对Node.js 的理解?优缺点?应用场景?&quot;">​</a></h3><h4 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h4><p>Node.js 是一个开源与跨平台的 JavaScript 运行时环境在浏览器外运行 V8 JavaScript 引擎(Google Chrome 的内核)，利用事件驱动、非阻塞和异步输入输出模型等技术提高性能 可以理解为 Node.is 就<strong>是一个服务器端的、非阻塞式I/0的、事件驱动的 JavaScript 运行环境</strong></p><h4 id="非阻塞异步" tabindex="-1">非阻塞异步 <a class="header-anchor" href="#非阻塞异步" aria-label="Permalink to &quot;非阻塞异步&quot;">​</a></h4><p>Nodejs 采用了非阻塞型 I/0 机制，在做 I/0 操作的时候不会造成任何的阻塞，当完成之后，以时间的形式通知执行操作。 例如在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。</p><h4 id="事件驱动" tabindex="-1">事件驱动 <a class="header-anchor" href="#事件驱动" aria-label="Permalink to &quot;事件驱动&quot;">​</a></h4><p>事件驱动就是当进来一个新的请求的时，请求将会被压入一个事件队列中，然后通过一个循环来检测队列中的事件状态变化。如果检测到有状态变化的事件，那么就执行该事件对应的处理代码，一般都是回调函数。比如读取一个文件，文件读取完毕后，就会触发对应的状态，然后通过对应的回调函数来进行处理 <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704865294709-27885c3c-ceee-42a1-8196-58c38c417b3e.png#averageHue=%23f9f9f7&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;height=318&amp;id=u751ae07d&amp;originHeight=423&amp;originWidth=734&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=138196&amp;status=done&amp;style=none&amp;taskId=u5e856dbf-8d51-4fae-b160-0a15fc17504&amp;title=&amp;width=551" alt="图片.png"></p><h4 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h4><p>优点</p><ul><li>处理高并发场景性能更佳</li><li>适合/O密集型应用，值的是应用在运行极限时，CPU占用率仍然比较低，大部分时间是在做I/O硬盘内存读写操作</li></ul><p>缺点</p><ul><li>不适合CPU密集型应用</li><li>只支持单核CPU，不能充分利用CPU</li><li>可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</li></ul><h4 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><p>借助 Nodejs 的特点和弊端，其<strong>应用场景分类</strong>如下:</p><ul><li>善于 I/0 ，不善于计算。因为Nodejs是一个单线程，如果计算(同步)太多，则会阻塞这个线程</li><li>大量并发的I/O，应用程序内部并不需要进行非常复杂的处理</li><li>与 websocket 配合，开发长连接的实时交互应用程序</li></ul><p><strong>具体场景</strong>可以表现为如下</p><ul><li>第一大类:用户表单收集系统、后台管理系统、实时交互系统、考试系统、联网软件、高并发量的web应用程序</li><li>第二大类:基于web、canvas等多人联网游戏</li><li>第三大类:基于web的多人实时聊天客户端、聊天室、图文直播</li><li>第四大类:单页面浏览器应用程序</li><li>第五大类:操作数据库、为前端和移动端提供基于 json 的API</li></ul><h3 id="说说对-node-中的-fs模块的理解-有哪些常用方法" tabindex="-1">说说对 Node 中的 fs模块的理解?有哪些常用方法 <a class="header-anchor" href="#说说对-node-中的-fs模块的理解-有哪些常用方法" aria-label="Permalink to &quot;说说对 Node 中的 fs模块的理解?有哪些常用方法&quot;">​</a></h3><p>该模块提供本地文件的读写能力，基本上是 POSIX 文件操作命令的简单包装fs (filesystem)</p><h4 id="文件知识" tabindex="-1">文件知识 <a class="header-anchor" href="#文件知识" aria-label="Permalink to &quot;文件知识&quot;">​</a></h4><p>在计算机中有关于文件的知识:</p><ul><li>权限位 mode</li><li>标识位 flag</li><li>文件描述为 fd</li></ul><h5 id="权限位-mode" tabindex="-1">权限位 mode <a class="header-anchor" href="#权限位-mode" aria-label="Permalink to &quot;权限位 mode&quot;">​</a></h5><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704865570416-5c5ea5e1-2157-4cd4-a186-65bba769d1d2.png#averageHue=%23f2f2f2&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;id=uf18f3320&amp;originHeight=174&amp;originWidth=786&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=54892&amp;status=done&amp;style=none&amp;taskId=ubb259d26-fb51-4dde-b237-c10790492fe&amp;title=" alt="图片.png"> 针对文件所有者、文件所属组、其他用户进行权限分配。其中类型又分成读、写和执行，具备权限位4、2、1，不具备权限为0 如在 Linux 查看文件权限位:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>drwxr-xr-x 1 PandaShen 197121 0 Jun 28 14:41 core</span></span>
<span class="line"><span>-rw-r--r-- 1 PandaShen 197121 293 Jun 23 17:44 index.md</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在开头前十位中，d 为文件夹，，- 为文件，后九位就代表当前用户、用户所属组和其他用户的权限位，按每三位划分，分别代表读 (r) 、写 (w) 和执行 (x)，- 代表没有当前位对应的权限</p><h5 id="标识位-flag" tabindex="-1">标识位 flag <a class="header-anchor" href="#标识位-flag" aria-label="Permalink to &quot;标识位 flag&quot;">​</a></h5><p>标识位代表着对文件的操作方式，如可读、可写、即可读又可写等等，如下表所示 <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704865743705-4ef10fc1-a97d-4f5b-bd9b-7fe5317481a2.png#averageHue=%23f8f8f8&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;height=242&amp;id=u3905638c&amp;originHeight=484&amp;originWidth=1814&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=81814&amp;status=done&amp;style=none&amp;taskId=u45e3cc93-61ba-4182-abf5-ba808480f0a&amp;title=&amp;width=907" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704865836624-13af3021-b8e3-43b3-b215-22c0534b809a.png#averageHue=%23f8f8f8&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;height=468&amp;id=u4564f9c2&amp;originHeight=936&amp;originWidth=1806&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=148036&amp;status=done&amp;style=none&amp;taskId=u8fc1521f-cba7-4f0c-9084-80d39e274eb&amp;title=&amp;width=903" alt="image.png"></p><h5 id="文件描述为-fd" tabindex="-1">文件描述为 fd <a class="header-anchor" href="#文件描述为-fd" aria-label="Permalink to &quot;文件描述为 fd&quot;">​</a></h5><p>操作系统会为每个打开的文件分配一个名为文件描述符的数值标识，文件操作使用这些文件描述符来识别与追踪每个特定的文件。 Window 系统使用了一个不同但概念类似的机制来追踪资源，为方便用户，NodeJS 抽象了不同操作系统间的差异，为所有打开的文件分配了数值的文件描述符。 在 NodeJS 中，每操作一个文件，文件描述符是递增的，文件描述符一般从 3 开始，因为前面有0、1 、2 三个比较特殊的描述符，分别代表 process.stdin(标准输入) 、process.stdout(标准输出)和 process.stderr (错误输出)</p><h4 id="常用方法" tabindex="-1">常用方法 <a class="header-anchor" href="#常用方法" aria-label="Permalink to &quot;常用方法&quot;">​</a></h4><ul><li>文件读取</li><li>文件写入</li><li>文件追加写入</li><li>文件拷贝</li><li>创建目录</li></ul><h3 id="说说对-node-中的-buffer-的理解-应用场景" tabindex="-1">说说对 Node 中的 Buffer 的理解?应用场景? <a class="header-anchor" href="#说说对-node-中的-buffer-的理解-应用场景" aria-label="Permalink to &quot;说说对 Node 中的 Buffer 的理解?应用场景?&quot;">​</a></h3><h4 id="是什么-1" tabindex="-1">是什么 <a class="header-anchor" href="#是什么-1" aria-label="Permalink to &quot;是什么&quot;">​</a></h4><p>在 Node 应用中,需要处理网络协议、操作数据库、处理图片、接收上传文件等，在网络流和文件的操作中，要处理大量二进制数据，而 Buffer 就是在内存中开辟一片区域(初次初始化为8KB)，用来存放二进制数据。 在上述操作中都会存在数据流动，每个数据流动的过程中，都会有一个最小或最大数据量。如果数据到达的速度比进程消耗的速度快，那么少数早到达的数据会处于等待区等候被处理。反之，如果数据到达的速度比进程消耗的数据慢，那么早先到达的数据需要等待一定量的数据到达之后才能被处理。 这里的等待区就指的缓冲区 (Buffer) ，它是计算机中的一个小物理单位，通常位于计算机的RAM 中简单来讲， Nodeis 不能控制数据传输的速度和到达时间，只能决定何时发送数据，如果还没到发送时间，则将数据放在 Buffer 中，即在 RAM 中，直至将它们发送完毕。 上面讲到了 Buffer 是用来存储二进制数据，其的形式可以理解成一个数组，数组中的每一项。都可以保存8位二进制: 00000000 ，也就是一个字节，例如:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const buffer = Buffer.from(&quot;why&quot;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其存储过程如下图所示: <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704866107229-3a30000d-7e0f-40b7-af65-3e608b79b71f.png#averageHue=%23f3f3f2&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;id=uc2538a0c&amp;originHeight=137&amp;originWidth=652&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=31173&amp;status=done&amp;style=none&amp;taskId=u0392a224-bcf1-4659-947e-cbb4f88946c&amp;title=" alt="图片.png"></p><h4 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h4><p>Buffer 类在全局作用域中，无须!require 导入创建 Buffer 的方法有很多种，我们讲讲下面的两种常见的形式</p><ul><li>Buffer.from()</li><li>Buffer.alloc()</li></ul><h5 id="buffer-from" tabindex="-1">Buffer.from() <a class="header-anchor" href="#buffer-from" aria-label="Permalink to &quot;Buffer.from()&quot;">​</a></h5><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b3);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b1, b2, b3, b4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Buffer 31 30&gt; &lt;Buffer 31 30&gt; &lt;Buffer 0a&gt; &lt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Buffer 0a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="buffer-alloc" tabindex="-1">Buffer.alloc() <a class="header-anchor" href="#buffer-alloc" aria-label="Permalink to &quot;Buffer.alloc()&quot;">​</a></h5><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bAlloc1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个大小为 10 个字节的缓冲区</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bAlloc2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建一个长度为 10 的 Buffer,其中全部填充了值为1 的字节</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bAlloc1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bAlloc2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Buffer 01 01 01 01 01 01 01 01 01 01&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上面创建 buffer 后，则能够 toString 的形式进行交互，默认情况下采取 utf8 字符编码形式，如下</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Buffer e4 bd a0 e5 a5 bd&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你好</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果编码与解码不是相同的格式则会出现乱码的情况，如下</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8 &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Buffer e4 bd a0 e5 a5 bd&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ascii&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// d= e%=</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当设定的范围导致字符串被截断的时候，也会存在乱码情况，如下:</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Node.js 技术栈&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UTF-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Buffer 4e 6f 64 65 2e 6a 73 20 e6 8a 80 e6 9 c af e6 a0 88&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 17</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UTF-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node.js �</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UTF-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node.js 技</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>所支持的字符集有如下:</p><ul><li>ascii: 仅支持 7 位 ASCII 数据，如果设置去掉高位的话，这种编码是非常快的。</li><li>utf8: 多字节编码的 Unicode 字符，许多网页和其他文档格式都使用 UTF-8</li><li>utf16le: 2或 4 个字节，小字节序编码的 Unicode 字符，支持代理对 (U+10000至 U+10FFFF)</li><li>ucs2，utf16le 的别名</li><li>base64: Base64 编码</li><li>latin:一种把 Buffer 编码成一字节编码的字符串的方式</li><li>binary: latin1 的别名</li><li>hex: 将每个字节编码为两个十六进制字符</li></ul><h4 id="应用场景-1" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-1" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><p>Buffer 的应用场景常常与流的概念联系在一起，例如有如下:</p><ul><li>I/O 操作</li><li>加密解密</li><li>zlib.js</li></ul><h5 id="i-o-操作" tabindex="-1">I/O 操作 <a class="header-anchor" href="#i-o-操作" aria-label="Permalink to &quot;I/O 操作&quot;">​</a></h5><p>通过流的形式，将一个文件的内容读取到另外一个文件</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> outputStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;output.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inputStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputStream);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="加解密" tabindex="-1">加解密 <a class="header-anchor" href="#加解密" aria-label="Permalink to &quot;加解密&quot;">​</a></h5><p>在一些加解密算法中会遇到使用 Buffer ，例如crypto.createCipheriv 的第二个参数key 为 string 或Buffer 类型</p><h5 id="zlib-js" tabindex="-1">zlib.js <a class="header-anchor" href="#zlib-js" aria-label="Permalink to &quot;zlib.js&quot;">​</a></h5><p>zlib.js 为 Node.js 的核心库之一，其利用了缓冲区 ( Buffer )的功能来操作二进制数据流，提供了压缩或解压功能</p><h3 id="说说对-node-中的-stream-的理解-应用场景" tabindex="-1">说说对 Node 中的 Stream 的理解? 应用场景? <a class="header-anchor" href="#说说对-node-中的-stream-的理解-应用场景" aria-label="Permalink to &quot;说说对 Node 中的 Stream 的理解? 应用场景?&quot;">​</a></h3><p>流 (Stream)，是一个数据传输手段，是端到端信息交换的一种方式，而且是有顺序的,是逐块读取数据、处理内容，用于顺序读取输入或写入输出 Node.js 中很多对象都实现了流，总之它是会冒数据 (以 Buffer 为单位)它的独特之处在于，它不像传统的程序那样一次将一个文件读入内存，而是逐块读取数据、处理其内容，而不是将其全部保存在内存中 流可以分成三部分 source、dest 、pipe 在 source 和 dest 之间有一个连接的管道 pipe ,它的基本语法是 source.pipe(dest)，source 和 dest 就是通过pipe连接，让数据从 source 流向了 dest，如下图所示: <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704876014049-cb60495c-a425-49a2-a46e-e7f15e47a643.png#averageHue=%23fcfcfc&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;id=ubb3d5e86&amp;originHeight=311&amp;originWidth=352&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=22525&amp;status=done&amp;style=none&amp;taskId=u8bafaa5e-922a-4811-8fab-ff38b33d634&amp;title=" alt="图片.png"></p><h4 id="种类" tabindex="-1">种类 <a class="header-anchor" href="#种类" aria-label="Permalink to &quot;种类&quot;">​</a></h4><p>在 NodeJs，几乎所有的地方都使用到了流的概念，分成四个种类:</p><ul><li>可写流: 可写入数据的流。例如 fs.createWriteStream() 可以使用流将数据写入文件</li><li>可读流: 可读取数据的流。例如fs.createReadStream()可以从文件读取内容</li><li>双工流: 既可读又可写的流。例如 net.Socket</li><li>转换流: 可以在数据写入和读取时修改或转换数据的流。例如，在文件压缩操作中，可以向文件写入压缩数据，并从文件中读取解压数据</li></ul><p>在 NodeJS中HTTP服务器模块中，request 是可读流, response是可写流。还有 fs模块，能同时处理可读和可写文件流 可读流和可写流都是单向的，比较容易理解，而另外两个是双向的</p><h5 id="双工流" tabindex="-1">双工流 <a class="header-anchor" href="#双工流" aria-label="Permalink to &quot;双工流&quot;">​</a></h5><p>之前了解过 websocket 通信，是一个全双工通信，发送方和接受方都是各自独立的方法，发送和接收都没有任何关系。如下图所示: <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704876190871-8a70ef94-1bfc-4ccf-ba2d-aefa83580598.png#averageHue=%23f2f2f2&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;id=u891d0914&amp;originHeight=191&amp;originWidth=500&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=42075&amp;status=done&amp;style=none&amp;taskId=u57af7163-61ea-4f9a-8393-21d860ea6a9&amp;title=" alt="图片.png"> 基本代码：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Duplex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myDuplex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Duplex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="双工流-1" tabindex="-1">双工流 <a class="header-anchor" href="#双工流-1" aria-label="Permalink to &quot;双工流&quot;">​</a></h5><p>双工流的演示图如下所示: <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704876266655-d5c412e2-3454-45d9-9ebb-e247ba0dc4a8.png#averageHue=%23f2f2f2&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;id=u9ecd9f04&amp;originHeight=173&amp;originWidth=468&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=16943&amp;status=done&amp;style=none&amp;taskId=u692bccda-1153-4c5a-bad8-712e8b1de94&amp;title=" alt="图片.png"> 除了上述压缩包的例子，还比如一个 babel ，把 es6 转换为，我们在左边写入 es6 ，从右边读取es5 基本代码如下所示：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myTransform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="应用场景-2" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-2" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><p>stream 的应用场景主要就是处理 IO 操作，而 http 请求和文件操作都属于 IO 操作试想一下，如果一次 I0 操作过大，硬件的开销就过大，而将此次大的 I0 操作进行分段操作，让数据像水管一样流动，直到流动完成 常见的场景有:</p><ul><li>get请求返回文件给客户端</li></ul><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.method; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// get </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fileName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// res stream dest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>文件操作</li></ul><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fileName1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fileName2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data-bak.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileName1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> writeStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileName2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writeStream)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>一些打包工具的底层操作</li></ul><p>目前一些比较火的前端打包构建工具，都是通过 node.is 编写的，打包和构建的过程肯定是文件频繁操作的过程，离不来 stream ，如 gulp</p><h3 id="说说对-node-中的-process-的理解-有哪些常用方法" tabindex="-1">说说对 Node 中的 process 的理解?有哪些常用方法? <a class="header-anchor" href="#说说对-node-中的-process-的理解-有哪些常用方法" aria-label="Permalink to &quot;说说对 Node 中的 process 的理解?有哪些常用方法?&quot;">​</a></h3><h4 id="是什么-2" tabindex="-1">是什么 <a class="header-anchor" href="#是什么-2" aria-label="Permalink to &quot;是什么&quot;">​</a></h4><p>process 对象是一个全局变量，提供了有关当前 Node.js 进程的信息并对其进行控制，作为一个 全局变量。 我们都知道，进程计算机系统进行资源分配和调度的基本单位，是操作系统结构的基础，是线程的容器 当我们启动一个 js 文件，实际就是开启了一个服务进程，每个进程都拥有自己的独立空间地址、数据栈，像另一个进程无法访问当前进程的变量、数据结构，只有数据通信后，进程之间才可以数据共享 由于 JavaScript 是一个单线程语言，所以通过 node xxx 启动一个文件后，只有一条主线程</p><h4 id="属性与方法" tabindex="-1">属性与方法 <a class="header-anchor" href="#属性与方法" aria-label="Permalink to &quot;属性与方法&quot;">​</a></h4><p>关于 process 常见的属性有如下:</p><ul><li>process.env: 环境变量，例如通过process.env.NODE_ENV 获取不同环境项目配置信息</li><li>process.nextTick:这个在谈及 EventLoop 时经常为会提到</li><li>process.pid:获取当前进程id</li><li>process.ppid:当前进程对应的父进程</li><li>process.cwd(): 获取当前进程工作目录.</li><li>process.platform:获取当前进程运行的操作系统平台</li><li>process.uptime(): 当前进程已运行时间，例如:pm2 守护进程的 uptime 值</li><li>进程事件: process.on(&#39;uncaughtException&#39;,cb) 捕获异常信息、process.on(&#39;exit&#39;,cb) 进程推出</li></ul><p>监听</p><ul><li>三个标准流:process.stdout 标准输出、process.stdin 标准输入、process.stderr 标准错误输</li><li>process.title 指定进程名称，有的时候需要给进程指定一个名称</li></ul><h3 id="说说对nodejs中的事件循环机制理解" tabindex="-1">说说对Nodejs中的事件循环机制理解? <a class="header-anchor" href="#说说对nodejs中的事件循环机制理解" aria-label="Permalink to &quot;说说对Nodejs中的事件循环机制理解?&quot;">​</a></h3><h4 id="是什么-3" tabindex="-1">是什么 <a class="header-anchor" href="#是什么-3" aria-label="Permalink to &quot;是什么&quot;">​</a></h4><p>在浏览器事件循环中，我们了解到 javascript 在浏览器中的事件循环机制，其是根据 HTML5 定义的规范来实现 而在 NodeJS 中，事件循环是基于 Libuv 实现，Libuv 是一个多平台的专注于异步IO的库，如下图最右侧所示: <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704876771300-5916d852-4014-4f27-a4be-e11631eabf20.png#averageHue=%23eef0ed&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;id=u6e9c21da&amp;originHeight=270&amp;originWidth=737&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=131943&amp;status=done&amp;style=none&amp;taskId=ubf128274-8525-4727-9ac2-89ef5aab3da&amp;title=" alt="图片.png"> 上图 EVENT_QUEUE 给人看起来只有一个队列，但 EventLoop 存在6个阶段，每个阶段都有对应的一个先进先出的回调队列</p><h4 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h4><p>上节讲到事件循环分成了六个阶段，对应如下: <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704876810253-e691c38b-4364-4987-b01d-aab1fed1e2e8.png#averageHue=%23e7ebee&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;id=u75ce9ff3&amp;originHeight=414&amp;originWidth=670&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=9465&amp;status=done&amp;style=none&amp;taskId=u96e1ef06-fedd-4dae-8460-28aa61faa1a&amp;title=" alt="图片.png"></p><ul><li>timers阶段:这个阶段执行timer (setTimeout、setInterval) 的回调</li><li>定时器检测阶段(timers):本阶段执行 timer 的回调，即 setTimeout、setlnterval 里面的回调函数。</li><li>I/O 事件回调阶段(I/O callbacks): 执行延迟到下一个循环迭代的 I/O 回调，即上一轮循环中未被执行的一些I/O回调</li><li>闲置阶段(idle,prepare): 仅系统内部使用</li><li>轮询阶段(poll): 检索新的I/O 事件;执行与 I/O 相关的回调 (几乎所有情况下，除了关闭的回调数，那些由计时器和 setlmmediate() 调度的之外)，其余情况 node 将在话当的时候在此阳赛</li><li>检查阶段(check): setlmmediate() 回调函数在这里执行</li><li>关闭事件回调阶段(close callback):一些关闭的回调函数，如: socket.on(&#39;close&#39;)</li></ul><p>每个阶段对应一个队列，当事件循环进入某个阶段时,将会在该阶段内执行回调，直到队列耗尽或者回调的最大数量已执行，那么将进入下一个处理阶段</p><p>除了上述6个阶段，还存在 process.nextTick ，其不属于事件循环的任何一个阶段，它属于该阶段与下阶段之间的过渡,即本阶段执行结束,进入下一个阶段前,所要执行的回调，类似插队流程图如下所示: <img src="https://cdn.nlark.com/yuque/0/2024/png/1798151/1704877046343-8eac9506-398a-461c-b018-7379aa6bcd14.png#averageHue=%23f0f0f0&amp;clientId=u2b4bb42a-60c1-4&amp;from=paste&amp;id=uda7a303a&amp;originHeight=613&amp;originWidth=703&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=113478&amp;status=done&amp;style=none&amp;taskId=u623af518-8829-4180-ae2b-f3c99360914&amp;title=" alt="图片.png"> 在 Node 中，同样存在宏任务和微任务，与浏览器中的事件循环相似 微任务对应有:</p><ul><li>next tick queue: process.nextTick</li><li>other queue: Promise的then回调、queueMicrotask</li></ul><p>宏任务对应有:</p><ul><li>timer queue: setTimeout、setinterval</li><li>poll queue: IO事件</li><li>check queue: setlmmediate</li><li>close queue: close事件</li></ul><p>其执行顺序为:</p><ul><li>next tick microtask queue</li><li>other microtask queue</li><li>timer queue</li><li>poll queue</li><li>check queue</li><li>close queue</li></ul><h4 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async1 start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async1 end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setTimeout0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setTimeout2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setImmediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nextTick1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">async1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nextTick2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>分析过程:</p><ul><li>先找到同步任务，输出script start</li><li>遇到第一个 setTimeout，将里面的回调函数放到 timer 队列中</li><li>遇到第二个 setTimeout，300ms后将里面的回调函数放到 timer 队列中</li><li>遇到第一个setlmmediate，将里面的回调函数放到 check 队列中</li><li>遇到第一个 nextTick，将其里面的回调函数放到本轮同步任务执行完毕后执行</li><li>执行 async1函数，输出 async1 start</li><li>执行 async2 函数，输出 async2，async2 后面的输出 async1 end进入微任务，等待下一轮的事件循环</li><li>遇到第二个，将其里面的回调函数放到本轮同步任务执行完毕后执行</li><li>遇到 new Promise，执行里面的立即执行函数，输出 promise1、promise2</li><li>then里面的回调函数进入微任务队列</li><li>遇到同步任务，输出 script end</li><li>执行下一轮回到函数，先依次输出 nextTick 的函数，分别是 nextTick1、nextTick2</li><li>然后执行微任务队列，依次输出 async1 end、promise3</li><li>执行timer 队列，依次输出 setTimeout0</li><li>接着执行 check 队列，依次输出 setImmediate</li><li>300ms后，timer 队列存在任务，执行输出 setTimeout2</li></ul><p>执行结果如下：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script start</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async1 start</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nextTick1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nextTick2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async1 end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTimeout0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setImmediate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTimeout2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>最后有一道是关于 setTimeout 与 setImmediate 的输出顺序</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setTimeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setImmediate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 情况 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTimeout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setImmediate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 情况 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setImmediate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTimeout</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>分析下流程:</p><ul><li>外层同步代码一次性全部执行完，遇到异步API就塞到对应的阶段</li><li>遇到 setTimeout ，虽然设置的是0毫秒触发，但实际上会被强制改成1ms，时间到了然后塞入 t0imes 阶段</li><li>遇到 setImmediate 塞入 check 阶段</li><li>同步代码执行完毕，进入Event Loop</li><li>先进入 times 阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足 setTimeout 条件，执行回调，如果没过1毫秒，跳过</li><li>跳过空的阶段，进入check阶段，执行 setImmediate 回调</li></ul><p>这里的关键在于这1ms，如果同步代码执行时间较长，进入 Event Loop 的时候1毫秒已经过了， setTimeout 先执行，如果1毫秒还没到，就先执行了 setImmediate</p><h3 id="node性能如何进行监控以及优化" tabindex="-1">Node性能如何进行监控以及优化? <a class="header-anchor" href="#node性能如何进行监控以及优化" aria-label="Permalink to &quot;Node性能如何进行监控以及优化?&quot;">​</a></h3><h4 id="是什么-4" tabindex="-1">是什么 <a class="header-anchor" href="#是什么-4" aria-label="Permalink to &quot;是什么&quot;">​</a></h4><p>Node 作为一门服务端语言，性能方面尤为重要，其衡量指标一般有如下:</p><ul><li>CPU</li><li>内存</li><li>I/O</li><li>网络</li></ul><h4 id="cpu" tabindex="-1">CPU <a class="header-anchor" href="#cpu" aria-label="Permalink to &quot;CPU&quot;">​</a></h4><p>主要分成了两部分:</p><ul><li>CPU负载: 在某个时间段内，占用以及等待CPU的进程总数。</li><li>CPU使用率: CPU时间占用状况，等于 1- 空闲CPU时间(idle time) / CPU总时间</li></ul><p>这两个指标都是用来评估系统当前CPU的繁忙程度的量化指标 Node 应用一般不会消耗很多的 CPU ，如果 CPU 占用率高，则表明应用存在很多同步操作，导致异步任务回调被阻塞</p><h4 id="内存指标" tabindex="-1">内存指标 <a class="header-anchor" href="#内存指标" aria-label="Permalink to &quot;内存指标&quot;">​</a></h4><p>内存是一个非常容易量化的指标。内存占用率是评判一个系统的内存瓶颈的常见指标。对于Node来说，内部内存堆栈的使用状态也是一个可以量化的指标</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /app/lib/memory.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;os&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前Node内存堆栈情况</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">heapUsed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">heapTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取系统空闲内存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sysFree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freemem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取系统总内存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sysTotal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">totalmem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sys: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sysFree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sysTotal, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 系统内存占用率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      heap: heapUsed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headTotal, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node堆内存占用率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      node: rss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sysTotal, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node占用系统内存的比例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>rss:表示node进程占用的内存总量。</li><li>heapTotal: 表示堆内存的总量,</li><li>heapUsed: 实际堆内存的使用量。</li><li>external : 外部程序的内存使用量，包含Node核心的C++程序的内存使用量</li></ul><p>在 Node 中，一个进程的最大内存容量为1.5GB。因此我们需要减少内存泄露</p><h4 id="磁盘-i-o" tabindex="-1">磁盘 I/O <a class="header-anchor" href="#磁盘-i-o" aria-label="Permalink to &quot;磁盘 I/O&quot;">​</a></h4><p>硬盘的 IO 开销是非常昂贵的，硬盘 IO 花费的 CPU 时钟周期是内存的 164000 倍 内存 IO 比磁盘 IO 快非常多，所以使用内存缓存数据是有效的优化方法。常用的工具如redis 、memcached 等 并不是所有数据都需要缓存，访问频率高，生成代价比较高的才考虑是否缓存，也就是说影响你性能瓶颈的考虑去缓存，并且而且缓存还有缓存雪崩、缓存穿透等问题要解决</p><h4 id="如何监控" tabindex="-1">如何监控 <a class="header-anchor" href="#如何监控" aria-label="Permalink to &quot;如何监控&quot;">​</a></h4><p>关于性能方面的监控,一般情况都需要借助工具来实现 这里采用 Easy-Monitor 2.0，其是轻量级的 Node.js 项目内核性能监控 + 分析工具，在默认模式下，只需要在项目入口文件require 一次，无需改动任何业务代码即可开启内核级别的性能监控分析 使用方法如下: 在你的项目入口文件中按照如下方式引入，当然请传入你的项目名称:</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> easyMonitor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;easy-monitor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easyMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你的项目名称&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>打开你的浏览器，访问 http://localhost:12333即可看到进程界面 关于定制化开发、通用配置项以及如何动态更新配置项详见官方文档</p><h4 id="如何优化" tabindex="-1">如何优化 <a class="header-anchor" href="#如何优化" aria-label="Permalink to &quot;如何优化&quot;">​</a></h4><p>关于 Node 的性能优化的方式有</p><ul><li>使用最新版本Node.js</li><li>正确使用流 Stream</li><li>代码层面优化</li><li>内存管理优化</li></ul><h5 id="使用最新版本node-js" tabindex="-1">使用最新版本Node.js <a class="header-anchor" href="#使用最新版本node-js" aria-label="Permalink to &quot;使用最新版本Node.js&quot;">​</a></h5><p>每个版本的性能提升主要来自于两个方面</p><ul><li>v8 的版本更新</li><li>Node.js 内部代码的更新优化</li></ul><h5 id="正确使用流-stream" tabindex="-1">正确使用流 Stream <a class="header-anchor" href="#正确使用流-stream" aria-label="Permalink to &quot;正确使用流 Stream&quot;">​</a></h5><p>在 Node 中，很多对象都实现了流，对于一个大文件可以通过流的形式发送，不需要将其完全读入内存</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="代码层面优化" tabindex="-1">代码层面优化 <a class="header-anchor" href="#代码层面优化" aria-label="Permalink to &quot;代码层面优化&quot;">​</a></h5><p>合并查询，将多次查询合并一次，减少数据库的查询次数</p><h5 id="内存管理优化" tabindex="-1">内存管理优化 <a class="header-anchor" href="#内存管理优化" aria-label="Permalink to &quot;内存管理优化&quot;">​</a></h5><p>在 V8 中，主要将内存分为新生代和老生代两代</p><ul><li>新生代:对象的存活时间较短。新生对象或只经过一次垃圾回收的对象</li><li>老生代:对象存活时间较长。经历过一次或多次垃圾回收的对象</li></ul><p>若新生代内存空间不够，直接分配到老生代 通过减少内存占用，可以提高服务器的性能。如果有内存泄露，也会导致大量的对象存储到老生代中服务器性能会大大降低 如下面情况:</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/source/index.htm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    leak.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/source/index.htm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> leak</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>leak 的内存非常大，造成内存泄露，应当避免这样的操作，通过减少内存使用，是提高服务性能的手段之一 而节省内存最好的方式是使用池，其将频用、可复用对象存储起来，减少创建和销毁操作 例如有个图片请求接口，每次请求，都需要用到类。若每次都需要重新new这些类，并不是很合适，在大量请求时，频繁创建和销毁这些类，造成内存抖动 使用对象池的机制，对这种频繁需要创建和销毁的对象保存在一个对象池中。每次用到该对象时，就取对象池空闲的对象，并对它进行初始化操作，从而提高框架的性能</p><h2 id="_4个框架的异同点" tabindex="-1">4个框架的异同点 <a class="header-anchor" href="#_4个框架的异同点" aria-label="Permalink to &quot;4个框架的异同点&quot;">​</a></h2><h3 id="express-js" tabindex="-1">Express.js <a class="header-anchor" href="#express-js" aria-label="Permalink to &quot;Express.js&quot;">​</a></h3><p><strong>优点：</strong></p><ul><li><strong>广泛的使用</strong>：Express是Node.js最流行的框架之一，有着庞大的用户基础和社区支持。</li><li><strong>中间件生态丰富</strong>：有大量可用的中间件，几乎可以找到任何所需的功能。</li><li><strong>简单直观</strong>：Express的API设计简单直观，易于上手和使用。</li><li><strong>灵活性</strong>：几乎不强加任何结构，开发者可以自由地按照自己的方式来组织代码。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>回调模式</strong>：在没有使用Promise或Async/Await的情况下，可能会导致回调地狱。</li><li><strong>架构自由</strong>：对于大型应用，过度的自由可能导致项目难以维护。</li><li><strong>性能</strong>：中间件如果使用不当，可能会导致性能问题。</li></ul><h3 id="koa-js" tabindex="-1">Koa.js <a class="header-anchor" href="#koa-js" aria-label="Permalink to &quot;Koa.js&quot;">​</a></h3><p><strong>优点：</strong></p><ul><li><strong>现代化的异步流程控制</strong>：Koa使用async/await来避免回调地狱，使得异步代码更加易于编写和维护。</li><li><strong>轻量级核心</strong>：Koa核心非常轻量，只提供最基础的功能，其他功能都可以通过中间件来扩展。</li><li><strong>错误处理</strong>：由于支持async/await，Koa可以通过try/catch来更好地处理错误。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>中间件生态相对较少</strong>：虽然质量高，但数量上不如Express丰富。</li><li><strong>学习曲线</strong>：对于习惯了Express的开发者来说，需要适应Koa的中间件机制。</li></ul><h3 id="egg-js" tabindex="-1">Egg.js <a class="header-anchor" href="#egg-js" aria-label="Permalink to &quot;Egg.js&quot;">​</a></h3><p><strong>优点：</strong></p><ul><li><strong>约定大于配置</strong>：Egg.js提供了一套约定，帮助团队统一开发模式，降低沟通成本。</li><li><strong>插件机制</strong>：强大的插件机制，可以非常方便地扩展应用功能。</li><li><strong>内置多进程管理</strong>：内置了对Cluster的支持，可以充分利用多核CPU资源。</li><li><strong>企业级</strong>：提供了日志、安全、监控等企业级功能。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>框架约束</strong>：相对于Express和Koa，Egg.js的约束更多，可能会限制开发者的灵活性。</li><li><strong>学习成本</strong>：需要学习Egg.js特有的约定和API。</li></ul><h3 id="nestjs" tabindex="-1">NestJS <a class="header-anchor" href="#nestjs" aria-label="Permalink to &quot;NestJS&quot;">​</a></h3><p><strong>优点：</strong></p><ul><li><strong>TypeScript支持</strong>：NestJS是基于TypeScript构建的，提供了强类型和最新ECMAScript特性。</li><li><strong>面向切面编程（AOP）</strong>：支持面向切面编程，有利于代码的解耦和复用。</li><li><strong>依赖注入</strong>：内置了依赖注入容器，有利于构建可测试和可维护的代码。</li><li><strong>微服务支持</strong>：NestJS提供了一流的微服务支持，包括消息传递等。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>学习曲线</strong>：由于其Angular式的架构，对于初学者来说，学习曲线可能比较陡峭。</li><li><strong>较新的框架</strong>：虽然社区正在快速增长，但相比Express和Koa，NestJS的社区和生态系统相对较新。</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong>Express</strong> 是最适合快速开发小到中型项目的框架，尤其是当你需要一个轻量级的解决方案时。</li><li><strong>Koa</strong> 提供了一个更现代化的基础，适合那些想要更多控制异步流程和中间件堆栈的开发者。</li><li><strong>Egg.js</strong> 是为大型企业级应用设计的，它通过约定和框架提供的稳定性，使得团队协作更加高效。</li><li><strong>NestJS</strong> 是最适合构建大型、复杂、高度可维护的应用程序的框架，特别是当你需要TypeScript的强类型特性和面向对象编程的高级设计模式时。</li></ul><p>选择哪个框架取决于项目需求、团队熟悉度、以及你对未来项目可能的扩展性和可维护性的考虑。</p><p><img src="https://qn.huat.xyz/mac/202311052154376.png#id=hLEDk&amp;originHeight=296&amp;originWidth=742&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p><img src="https://qn.huat.xyz/mac/202311052153509.png#id=l7WL0&amp;originHeight=415&amp;originWidth=782&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p><img src="https://qn.huat.xyz/mac/202311052153304.png#id=q4TlX&amp;originHeight=244&amp;originWidth=782&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id="egg" tabindex="-1">Egg <a class="header-anchor" href="#egg" aria-label="Permalink to &quot;Egg&quot;">​</a></h2><p>当然，以下是对每个问题的详细回答：</p><ol><li><strong>Egg.js 的核心理念和特性是什么？</strong> 答：Egg.js 的核心理念是为企业级应用和大型团队提供一个高度可扩展和可维护的开发框架。它建立在 Koa.js 的基础上，继承了 Koa 的中间件机制，但在此之上增加了一些关键特性：</li></ol><ul><li><strong>约定优于配置</strong>：Egg.js 通过一些约定来减少决策的成本，比如固定的目录结构和一些默认的配置，这样可以让团队成员快速理解和参与到项目中。</li><li><strong>插件机制</strong>：Egg.js 强化了插件的概念，允许开发者编写可重用的组件，这些组件可以很容易地集成到 Egg.js 应用中。</li><li><strong>框架定制</strong>：Egg.js 允许团队基于它来定制自己的上层框架，以满足特定的业务需求。</li><li><strong>高级功能</strong>：Egg.js 提供了一些高级功能，如内置的多进程管理、安全插件、日志管理等，这些都是企业级应用所需要的。</li></ul><ol start="2"><li><strong>在 Egg.js 中，中间件（Middleware）是如何工作的？</strong> 答：在 Egg.js 中，中间件是一种函数，可以访问请求和响应对象，以及应用的执行堆栈。中间件的主要作用是在请求处理的不同阶段执行代码、修改请求和响应对象、结束请求-响应循环，或者调用堆栈中的下一个中间件。 创建自定义中间件涉及到编写一个函数，该函数返回一个异步方法，这个方法接受 <code>ctx</code>（上下文）和 <code>next</code> 作为参数。<code>ctx</code> 是一个封装了 Node.js 原生请求和响应对象的对象，而 <code>next</code> 是一个函数，调用它会执行下一个中间件。 中间件可以全局配置，也可以针对特定的路由配置。在 Egg.js 中，中间件可以通过配置文件进行加载和配置，也可以在应用代码中动态配置。</li><li><strong>请解释 Egg.js 的插件系统。你如何创建和使用一个插件？</strong> 答：Egg.js 的插件系统允许开发者封装一组功能（如数据库操作、模板渲染等），并将其作为模块共享和复用。插件可以包含中间件、服务、配置等。 创建一个揔件涉及到以下步骤：</li></ol><ul><li>创建一个包含 <code>package.json</code> 的目录。</li><li>在插件目录中编写插件代码，比如中间件、扩展等。</li><li>在插件的 <code>package.json</code> 中指定插件的配置，包括插件的入口文件和依赖。</li></ul><p>使用插件则需要在应用的 <code>package.json</code> 中添加插件作为依赖，并在应用的配置文件（通常是 <code>config/plugin.js</code>）中启用和配置插件。</p><ol start="4"><li><strong>在 Egg.js 中，如何实现安全性措施来防止常见的Web攻击？</strong> 答：Egg.js 提供了多种安全措施来帮助开发者防止常见的 Web 攻击：</li></ol><ul><li><strong>CSRF 防护</strong>：Egg.js 内置了 CSRF 防护机制，可以通过配置启用。</li><li><strong>XSS 防护</strong>：Egg.js 通过默认的安全插件对用户输入进行转义，以防止 XSS 攻击。</li><li><strong>安全头部</strong>：Egg.js 默认设置了一些安全相关的 HTTP 头部，如 <code>X-Frame-Options</code>、<code>X-Content-Type-Options</code> 等。</li><li><strong>安全插件</strong>：Egg.js 社区还提供了许多安全相关的插件，如 <code>egg-security</code>，提供了更多的安全特性和配置。</li></ul><ol start="5"><li><strong>Egg.js 的服务（Service）层在应用程序中扮演什么角色？</strong> 答：在 Egg.js 中，服务（Service）层是用来编写业务逻辑的地方，通常是一些不适合放在控制器（Controller）中的复杂逻辑。服务层的主要作用是提供一些方法，这些方法可以被不同的控制器或者其他服务调用。 服务层的代码通常是纯粹的 JavaScript 类和方法，它们不直接与 HTTP 层交互，这样可以保持代码的可测试性和可复用性。在 Egg.js 应用中，服务可以通过 <code>ctx.service</code> 被控制器或其他服务调用。 总的来说，服务层是 Egg.js 应用程序中处理业务逻辑的中心，有助于保持控制器的简洁和专注于处理 HTTP 请求。</li></ol><p>当然，让我们逐一深入这些问题：</p><ol start="6"><li><strong>Egg.js 中的定时任务是如何工作的？你如何配置和使用它们？</strong> 答：Egg.js 提供了一个内置的定时任务解决方案，允许开发者在应用中定时执行任务。定时任务是通过在 <code>app/schedule</code> 目录下创建文件来配置的。每个文件导出一个对象，该对象定义了任务的执行间隔和具体的执行逻辑。 定时任务可以通过 cron 表达式或者简单的间隔时间来配置。例如，你可以设置一个任务每5分钟执行一次，或者每天凌晨2点执行。 在任务文件中，你需要定义一个 <code>schedule</code> 属性来指定定时策略，以及一个 <code>task</code> 函数来执行任务逻辑。Egg.js 会自动按照 <code>schedule</code> 属性的配置定时调用 <code>task</code> 函数。</li><li><strong>在 Egg.js 中如何进行单元测试和集成测试？</strong> 答：Egg.js 推荐使用 <code>mocha</code> 作为测试框架，并且内置了 <code>power-assert</code> 作为断言库。单元测试通常针对特定的函数或模块，而集成测试则涉及到多个组件（如数据库、外部服务等）的交互。 在 Egg.js 中，你可以使用 <code>egg-mock</code> 库来创建一个模拟的应用实例，这样可以在隔离的环境中测试你的应用。你可以通过 <code>app.httpRequest()</code> 来模拟 HTTP 请求，以测试你的控制器，或者直接调用服务方法来测试业务逻辑。 测试通常放在 <code>test</code> 目录下，并遵循 Mocha 的约定，使用 <code>describe</code>、<code>it</code> 等全局函数来组织测试用例。</li><li><strong>请描述 Egg.js 的日志系统。如何自定义日志的配置和级别？</strong> 答：Egg.js 的日志系统基于 <code>egg-logger</code>。它默认提供了多个日志文件，包括应用日志、错误日志、代理日志等。日志级别从低到高分为 <code>DEBUG</code>、<code>INFO</code>、<code>WARN</code>、<code>ERROR</code>，只有高于或等于当前配置级别的日志会被记录。 你可以在 <code>config/config.{env}.js</code> 配置文件中自定义日志级别和日志文件的路径。例如，你可以设置不同的环境（开发、生产）使用不同的日志级别，或者改变日志文件的存储位置。</li><li><strong>Egg.js 如何支持服务端渲染（SSR）？</strong> 答：Egg.js 本身是一个 Node.js 框架，可以很容易地与前端框架（如 React、Vue）集成来实现服务端渲染。你可以使用对应的插件，如 <code>egg-view-react</code> 或 <code>egg-view-vue</code>，来支持在 Egg.js 中渲染 React 或 Vue 组件。 为了实现 SSR，你需要在 Egg.js 中配置一个模板引擎，并在控制器中编写逻辑来渲染组件到字符串，然后将这个字符串作为 HTML 响应发送给客户端。</li><li><strong>在 Egg.js 中，如何管理和维护长期运行的后台任务？</strong> 答：对于长期运行的后台任务，Egg.js 可以利用其定时任务功能来进行管理。但对于更复杂的场景，可能需要使用消息队列（如 RabbitMQ、Kafka）或专门的任务队列服务（如 Bull、Kue）。 你可以创建一个服务来处理任务的逻辑，并通过监听消息队列中的事件来触发这些任务。这样的架构可以帮助你分散负载，同时保持任务的可管理性和可监控性。</li><li><strong>Egg.js 的上下文（Context）对象提供了哪些核心功能？</strong> 答：在 Egg.js 中，上下文（Context）对象是一个请求级别的对象，封装了 Node.js 的原生请求和响应对象，并提供了一系列的辅助方法和属性。例如，它提供了对请求参数的访问、对响应状态和头部的控制、安全相关的方法、以及对服务和插件的访问。 上下文对象是控制器和服务方法的主要参数，是 Egg.js 应用中处理请求的核心。</li><li><strong>在 Egg.js 中，如何实现多语言支持？</strong> 答：Egg.js 通过 <code>egg-i18n</code> 插件来支持国际化和本地化。你可以在 <code>config</code> 目录下的配置文件中启用和配置 <code>egg-i18n</code> 插件。 你需要在 <code>app/locales</code> 目录下放置不同语言的翻译文件。Egg.js 会根据请求头中的 <code>Accept-Language</code> 字段自动选择合适的语言文件。你也可以在应用中手动切换语言，为用户提供语言选择的功能。</li><li><strong>Egg.js 中的 Controller 和 Service 有什么区别？它们各自的职责是什么？</strong> 答：在 Egg.js 中，Controller 负责处理外部的请求，控制请求的处理流程，接收用户的输入，并返回响应。它通常不直接处理业务逻辑，而是将业务逻辑的处理委托给 Service。 Service 是纯粹的业务逻辑层，它不关心外部请求和响应的细节，只专注于执行业务操作。Service 层的设计使得业务逻辑可以被复用，并且易于测试。</li><li><strong>在 Egg.js 中，如何优化应用以支持更高的并发请求？</strong></li></ol><p>答：在 Egg.js 中，可以通过多种方式来优化应用以支持高并发请求：</p><ul><li><strong>使用 Cluster 模式</strong>：Egg.js 默认支持多进程模式，可以充分利用多核 CPU 的能力。</li><li><strong>优化代码和中间件</strong>：确保代码高效执行，避免不必要的计算和中间件的过度使用。</li><li><strong>使用缓存</strong>：对于重复的数据请求，使用缓存可以减少数据库的压力。</li><li><strong>数据库优化</strong>：通过索引、查询优化等手段减少数据库操作的时间。</li><li><strong>限流和降级</strong>：在系统负载过高时，通过限流和降级策略来保护系统。</li></ul><p>通过这些优化措施，可以提高 Egg.js 应用处理并发请求的能力。</p><p>在面试中，了解候选人对 Egg.js 多进程模型的理解是很重要的，因为这关系到 Node.js 应用的性能和稳定性。以下是一些关于 Egg.js 多进程模型的面试问题：</p><ol start="15"><li><strong>Egg.js 如何利用 Node.js 的多核能力来提高性能？</strong> 答：Egg.js 内置了对 Node.js <code>cluster</code> 模块的支持，允许应用程序以 Cluster 模式运行。在这种模式下，主进程（Master）不负责处理请求，而是负责管理多个工作进程（Worker），每个工作进程独立处理请求。这样可以充分利用多核 CPU，提高应用的并发处理能力。</li><li><strong>在 Egg.js 的多进程模型中，进程间是如何通信的？</strong> 答：在 Egg.js 中，进程间通信（IPC）主要通过主进程来协调。工作进程之间不直接通信，而是通过发送消息给主进程，由主进程转发到其他工作进程或进行相应的处理。Egg.js 提供了一些 API，如 <code>app.messenger</code>，来帮助开发者在进程间发送和接收消息。</li><li><strong>如果一个 Egg.js 应用在生产环境中的一个工作进程崩溃了，Egg.js 会怎么处理？</strong> 答：如果一个工作进程崩溃，Egg.js 的主进程会检测到这个情况，并启动一个新的工作进程来替代崩溃的进程。这个机制确保了应用的高可用性，即使在面临进程崩溃的情况下也能保持服务的持续性。</li><li><strong>Egg.js 如何处理工作进程的优雅重启？</strong> 答：Egg.js 支持优雅重启工作进程，以便于应用更新或配置变更。当需要重启工作进程时，主进程会先启动一个新的工作进程。当新进程准备就绪并能够接受请求后，旧的工作进程会被通知停止接受新的请求，并在处理完当前的请求后退出。这个过程确保了在重启过程中服务不会中断。</li><li><strong>在 Egg.js 应用中，如何进行多进程下的定时任务调度？</strong> 答：在多进程的环境中，定时任务的调度需要确保任务不会在多个进程中重复执行。Egg.js 的定时任务默认是由主进程进行调度的，主进程会根据配置决定将任务分配给哪个工作进程执行。开发者可以通过配置来指定定时任务是由单个进程执行还是每个进程都执行。</li><li><strong>Egg.js 多进程模型中，如何共享资源，比如 WebSocket 连接？</strong> 答：在 Egg.js 的多进程模型中，由于每个工作进程都是独立的 Node.js 进程，它们不能直接共享内存中的资源。对于需要共享的资源，如 WebSocket 连接，可以使用 Redis、数据库或其他外部存储作为共享状态的中介，或者使用 Node.js 的 <code>cluster</code> 模块提供的共享服务器端口功能，让主进程负责连接分发。</li></ol><p>通过这些问题，面试官可以评估候选人是否理解 Egg.js 的多进程架构及其在实际应用中的处理方式。这些知识对于构建可扩展和稳定的 Node.js 应用至关重要。</p><p>当然，对于Egg.js框架，除了多进程管理，还有一些其他核心领域的问题，这些问题可以帮助面试官评估候选人对Egg.js框架的深入理解。以下是一些可能的问题：</p><ol start="21"><li><strong>Egg.js的路由系统有什么特点？如何定义RESTful风格的路由？</strong> 答：Egg.js的路由系统允许开发者以声明式的方式定义路由规则，并将请求映射到对应的控制器和方法上。Egg.js支持RESTful风格的路由定义，可以通过<code>app.resources(&#39;routerName&#39;, &#39;pathMatch&#39;, &#39;controllerName&#39;)</code>快速定义一组符合RESTful风格的路由。</li><li><strong>Egg.js如何实现参数验证？</strong> 答：Egg.js通常使用<code>egg-validate</code>插件来实现参数验证。开发者可以在控制器中定义验证规则，并使用<code>ctx.validate(rule, [body])</code>方法来验证客户端传递的参数是否符合规则，如果参数不符合规则，Egg.js会抛出一个验证错误。</li><li><strong>Egg.js中的Context对象和Koa.js中的Context对象有什么不同？</strong> 答：Egg.js的Context对象继承自Koa.js的Context对象，因此它们有很多相似之处。但是，Egg.js在其Context对象上扩展了更多的功能和属性，比如提供了更丰富的辅助方法（helper functions），以及对Service层的直接支持。</li><li><strong>Egg.js的配置管理是如何工作的？</strong> 答：Egg.js提供了一个强大的配置系统，支持基于环境的配置分离，可以通过<code>config/config.default.js</code>、<code>config/config.prod.js</code>等文件来定义不同环境下的配置。Egg.js在启动时会自动合并这些配置文件，并将合并后的配置信息加载到<code>app.config</code>属性中。</li><li><strong>Egg.js如何处理异常和错误？</strong> 答：Egg.js有一个中央错误处理机制，当应用抛出异常时，Egg.js会捕获这些异常，并根据异常的类型和内容返回相应的HTTP响应。开发者可以通过定义中间件或者监听<code>error</code>事件来自定义错误处理逻辑。</li><li><strong>如何在Egg.js中实现数据库操作？</strong> 答：Egg.js本身不绑定任何数据库，但它可以通过插件来支持各种数据库操作。例如，使用<code>egg-sequelize</code>插件来操作SQL数据库，或者<code>egg-mongoose</code>来操作MongoDB。这些插件提供了数据库的连接管理、模型定义、查询构建等功能。</li><li><strong>Egg.js的安全机制包括哪些方面？</strong> 答：Egg.js内置了多种安全防护措施，包括CSRF防护、XSS防护、安全HTTP头部设置、SQL注入防护等。这些安全特性大多是通过内置的安全插件<code>egg-security</code>来实现的，开发者可以通过配置来启用或禁用这些安全特性。</li></ol><p>通过这些问题，面试官可以全面地评估候选人对Egg.js框架的理解，包括其路由系统、参数验证、上下文处理、配置管理、异常处理、数据库操作和安全机制等关键方面。</p><h2 id="koa" tabindex="-1">Koa <a class="header-anchor" href="#koa" aria-label="Permalink to &quot;Koa&quot;">​</a></h2><p>当然，以下是对上述Koa面试题目的详细回答：</p><ol><li><strong>请解释Koa中间件的工作原理。</strong> Koa中间件是一个异步函数，它能够访问请求对象（<code>ctx.request</code>）、响应对象（<code>ctx.response</code>）和下一个中间件的函数（通常表示为<code>next</code>）。中间件的执行模型遵循所谓的“洋葱模型”，即当一个请求进入Koa应用时，它会从第一个中间件开始，经过层层中间件的处理，然后到达核心逻辑，再逐层返回响应。每个中间件在调用<code>await next()</code>之前的代码是在请求“下行”阶段执行的，而在<code>await next()</code>之后的代码是在请求“上行”阶段执行的。</li><li><strong>在Koa中，如何实现错误处理？</strong> 在Koa中，错误处理通常是通过中间件来实现的。你可以创建一个中间件放在其他中间件之前，使用<code>try/catch</code>来捕获后续中间件中抛出的错误。在<code>catch</code>块中，你可以决定如何处理错误，比如记录日志、设置响应状态码和消息等。此外，Koa也会在应用级别提供一个事件监听器来捕获未被中间件捕获的错误。</li><li><strong>Koa和Express有什么区别？为什么会选择Koa而不是Express？</strong> Koa是由Express的原始团队开发的，旨在成为一个更小、更富有表现力、更健壮的基础Web框架。与Express相比，Koa不绑定任何中间件，提供了一个干净的中间件堆栈，以便更好地支持异步流程控制。Koa的核心特性是它能够使用ES2017的<code>async</code>和<code>await</code>关键字来避免回调地狱，使得异步代码更加容易编写和维护。选择Koa而不是Express的原因可能包括对ES2017特性的支持、更简洁的错误处理以及对中间件机制的偏好。</li><li><strong>在Koa中，ctx对象是什么？它有哪些主要属性和方法？</strong><code>ctx</code>是Koa中的上下文对象，它封装了Node.js的请求和响应对象到单个对象中，为编写Web应用和API提供了更加简洁和直观的接口。它的主要属性包括<code>ctx.request</code>和<code>ctx.response</code>，这两个对象分别代表HTTP请求和响应。<code>ctx</code>还包含了许多便捷的方法和属性，如<code>ctx.url</code>、<code>ctx.body</code>、<code>ctx.method</code>等，以及<code>ctx.throw()</code>和<code>ctx.assert()</code>用于错误处理。</li><li><strong>如何在Koa应用程序中处理跨域请求？</strong> 在Koa中处理跨域请求通常涉及设置CORS（Cross-Origin Resource Sharing）策略。这可以通过使用<code>@koa/cors</code>这样的中间件来实现，它允许你定义哪些域名可以访问资源、哪些HTTP方法被允许、是否允许携带凭证等。你只需安装该中间件并在应用中注册即可。</li><li><strong>在Koa中，如何优化性能？</strong> 性能优化通常涉及减少不必要的中间件使用，因为每个中间件都会增加请求处理的时间。此外，可以使用缓存策略来减少对数据库或外部API的请求。对于静态内容，可以使用<code>koa-static</code>或<code>koa-send</code>等中间件来提供缓存和压缩。数据库查询应该被优化，避免N+1查询问题，并且可以使用连接池来管理数据库连接。最后，可以通过负载均衡和使用Node.js的cluster模块来充分利用多核CPU。</li><li><strong>Koa的洋葱模型是什么意思？</strong> Koa的洋葱模型是指中间件的执行顺序类似于一层层剥开或者添加回洋葱的层次。一个请求进入Koa应用后，会从第一个中间件开始执行，直到找到合适的处理逻辑，然后再逐层执行之前通过<code>await next()</code>调用的中间件的剩余部分。这种模型的优点是可以非常灵活地控制请求和响应的处理流程，特别是在处理错误和添加后处理逻辑时非常有用。</li><li><strong>在Koa中如何实现文件上传？</strong> 文件上传可以通过中间件如<code>koa-multer</code>来实现，这是一个基于<code>multer</code>库的Koa适配器。<code>koa-multer</code>提供了文件上传的功能，可以处理<code>multipart/form-data</code>类型的请求，并将上传的文件存储在服务器上指定的位置。</li><li><strong>如何在Koa中实现会话管理（Session Management）？</strong> 会话管理在Koa中通常是通过<code>koa-session</code>中间件来实现的。这个中间件提供了cookie-based的会话管理功能，你可以通过配置来设置cookie的属性，如过期时间、路径、域等。此外，<code>koa-session</code>支持自定义存储，你可以将会话数据存储在Redis、MongoDB或其他数据库中。</li><li><strong>在Koa中，如何结合使用WebSocket？</strong> 要在Koa中使用WebSocket，可以使用<code>koa-websocket</code>库来创建WebSocket服务器。这个库可以让你定义如何处理WebSocket连接，包括如何处理连接事件、消息事件和断开</li></ol><p>事件。在Koa中间件中处理WebSocket请求时，你可以访问<code>ctx.websocket</code>来发送和接收消息。</p><p>这些问题和答案涵盖了Koa的核心概念和实践，对于评估面试者是否具备使用Koa构建现代Web应用的能力是很有帮助的。</p><h2 id="其他知识" tabindex="-1">其他知识 <a class="header-anchor" href="#其他知识" aria-label="Permalink to &quot;其他知识&quot;">​</a></h2><h3 id="高并发" tabindex="-1">高并发 <a class="header-anchor" href="#高并发" aria-label="Permalink to &quot;高并发&quot;">​</a></h3><p>Node.js 能够支持高并发的处理主要是因为它的非阻塞 I/O 和事件驱动的架构。以下是一些关键点，解释了 Node.js 如何实现这一点：</p><ol><li><strong>单线程与事件循环</strong>: Node.js 在其核心使用了单线程加事件循环的模型。单线程意味着它不需要在多线程之间进行上下文切换，这在高并发环境下可以节省大量的资源。事件循环使得 Node.js 可以执行非阻塞 I/O 操作，即使是在单线程上，也能够处理大量的并发连接。</li><li><strong>非阻塞 I/O</strong>: Node.js 的大部分标准库都是非阻塞的，这意味着当 Node.js 执行 I/O 操作（如读写文件、网络通信等）时，它不会停下来等待操作完成，而是会继续执行后续的代码。当 I/O 操作完成时，一个回调函数会被触发，这样就可以处理结果。这种模式非常适合 I/O 密集型的应用程序。</li><li><strong>异步编程</strong>: Node.js 鼓励使用异步编程模式，这意味着代码可以以非阻塞方式执行。这是通过回调函数、Promises、async/await 等技术实现的。这种方式可以让 Node.js 应用在等待一个操作完成时继续处理其他事务，从而提高了资源的利用率。</li><li><strong>事件驱动</strong>: Node.js 是事件驱动的，这意味着应用程序会对不同的事件做出响应，例如客户端请求、文件读写完成或错误。这种模式对于构建高并发应用程序非常有效，因为它允许多个操作几乎同时进行，而不是按顺序一个接一个地执行。</li><li><strong>V8 引擎</strong>: Node.js 使用 Google 的 V8 JavaScript 引擎，这是一个非常强大的 JavaScript 引擎，可以提供快速的代码执行。V8 引擎能够编译 JavaScript 代码到本地机器码，这意味着 Node.js 可以以接近原生应用程序的速度运行。</li><li><strong>轻量级</strong>: Node.js 本身是轻量级的，它没有像传统的服务器模型那样为每个连接创建新的线程。这意味着它在内存和资源使用上更加高效，能够在相同的硬件上处理更多的并发连接。</li></ol><p>正因为这些特性，Node.js 特别适合构建需要处理大量并发连接而不是计算密集型任务的应用程序，如聊天服务器、实时数据处理应用和在线游戏服务器等。然而，对于 CPU 密集型任务，Node.js 可能不是最佳选择，因为单线程可能会成为瓶颈。在这种情况下，可以使用工作线程（worker threads）或者其他技术来克服这个限制。</p><h3 id="进程和线程" tabindex="-1">进程和线程 <a class="header-anchor" href="#进程和线程" aria-label="Permalink to &quot;进程和线程&quot;">​</a></h3><p>进程（Process）和线程（Thread）是操作系统中执行任务的基本单位，它们之间有几个关键的区别：</p><ol><li><strong>定义</strong>:</li></ol><ul><li><strong>进程</strong>：进程是操作系统分配资源和调度的独立单位，是应用程序的一个实例。每个进程都有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。</li><li><strong>线程</strong>：线程是进程中的执行流，是操作系统能够进行运算调度的最小单位。它通常被包含在进程中，是进程中实际执行操作的单位。</li></ul><ol start="2"><li><strong>资源分配</strong>:</li></ol><ul><li><strong>进程</strong>：进程在执行时会被分配独立的内存空间。每个进程至少有一个线程（主线程），但可以创建多个线程。</li><li><strong>线程</strong>：所有线程共享其父进程的内存空间。线程之间可以直接读写同一进程中的数据。</li></ul><ol start="3"><li><strong>通信</strong>:</li></ol><ul><li><strong>进程</strong>：进程间通信（IPC）需要特定的机制，如管道、信号、套接字、共享内存等，因为不同进程有不同的内存空间。</li><li><strong>线程</strong>：线程间可以直接通信，因为它们共享相同的内存空间。这使得线程间的数据交换和通信更容易，但也需要同步机制来避免冲突。</li></ul><ol start="4"><li><strong>开销</strong>:</li></ol><ul><li><strong>进程</strong>：创建进程比创建线程开销大，因为操作系统需要为新进程分配独立的内存空间，并进行更多的初始化工作。</li><li><strong>线程</strong>：线程的创建、上下文切换和管理的开销相对较小，因为线程共享它们的进程资源。</li></ul><ol start="5"><li><strong>独立性</strong>:</li></ol><ul><li><strong>进程</strong>：进程是独立的执行实体，一个进程崩溃不会直接影响到其他进程。</li><li><strong>线程</strong>：线程之间的独立性较低，一个线程的错误可以影响同一进程中的其他线程。</li></ul><ol start="6"><li><strong>性能</strong>:</li></ol><ul><li><strong>进程</strong>：由于进程间的隔离，进程间切换的成本比线程间切换高。</li><li><strong>线程</strong>：线程间切换的成本较低，因此多线程程序的性能通常比多进程程序要好。</li></ul><p>在多核处理器系统中，多线程和多进程都可以用来实现并行处理，提高程序的执行效率。选择使用多线程还是多进程通常取决于应用程序的需求、设计复杂性以及资源使用效率。</p><h3 id="ioc" tabindex="-1">IOC <a class="header-anchor" href="#ioc" aria-label="Permalink to &quot;IOC&quot;">​</a></h3><p>IoC（Inversion of Control，控制反转）是一种设计原则，用于减少计算机代码之间的耦合度。在传统的程序设计中，代码之间的调用关系通常是直接的，即一个模块直接控制另一个模块的流程。而在 IoC 中，这种控制关系被颠倒过来，具体的流程控制被移交给一个外部系统或框架。</p><p>IoC 最常见的实现方式是依赖注入（Dependency Injection，DI），这是一种允许某个对象提供依赖项给另一个对象的技术。这样，对象不需要自己创建或查找它们的依赖项，而是被动地接收它们。</p><p>下面是一个简单的 IoC/DI 的例子：</p><p>假设你有一个 <code>Car</code> 类，它依赖于 <code>Engine</code> 类：</p><p><strong>不使用 IoC 的情况:</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;V8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Engine is starting...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.engine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Car 控制了 Engine 的创建</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Car is starting...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">car.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在上面的代码中，<code>Car</code> 类直接创建了一个 <code>Engine</code> 实例。这意味着 <code>Car</code> 类与 <code>Engine</code> 类紧密耦合，如果你想要更换一个不同类型的引擎，你需要修改 <code>Car</code> 类的代码。</p><p><strong>使用 IoC 的情况:</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} Engine is starting...\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.engine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Engine 的实例是通过构造函数注入的，而不是由 Car 自己创建</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Car is starting...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// IoC 容器或者某个工厂函数负责创建 Engine 和 Car 的实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;V8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(engine); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 控制反转：不是 Car 控制 Engine，而是由外部控制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  car.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在使用 IoC 的代码中，<code>Car</code> 类不再直接创建 <code>Engine</code> 实例，而是通过构造函数接收一个 <code>Engine</code> 实例。这样，<code>Car</code> 类就不需要知道 <code>Engine</code> 是如何被创建的，也不需要知道具体使用的是哪种类型的引擎。这种方式使得 <code>Car</code> 类更加灵活，更容易测试和维护。</p><p>在实际的应用程序中，IoC 容器通常更加复杂，它们能够自动处理依赖项的创建和生命周期，还支持配置依赖关系、作用域和其他高级功能。例如，在 Java 的 Spring 框架或者 .NET 的 ASP.NET Core 中，IoC 容器是框架的核心部分，极大地简化了对象的创建和管理。</p><h3 id="qps" tabindex="-1">QPS <a class="header-anchor" href="#qps" aria-label="Permalink to &quot;QPS&quot;">​</a></h3><p>QPS 是 &quot;Queries Per Second&quot; 的缩写，直译为“每秒查询次数”。这是一个衡量计算机、网络或应用程序性能的指标，特别是在数据库操作和Web服务器中，用来描述系统每秒能够处理的查询（或请求）数量。</p><p>在不同的上下文中，QPS 可以有稍微不同的含义：</p><ul><li><strong>在数据库领域</strong>，QPS 通常用来衡量数据库服务器接收和处理查询请求的能力。</li><li><strong>在网络服务或Web应用中</strong>，QPS 通常指的是服务能够处理的HTTP请求的数量。</li><li><strong>在搜索引擎优化（SEO）中</strong>，QPS 有时用来描述搜索引擎每秒处理的搜索查询数。</li></ul><p>QPS 是一个重要的性能指标，因为它直接关系到用户体验和服务的可用性。高QPS意味着系统能够更快地响应更多用户的请求，而不会导致延迟增加或服务崩溃。</p><p>例如，如果一个Web服务的QPS是100，这意味着它每秒可以处理100个并发请求。在进行系统设计和容量规划时，了解目标QPS是非常重要的，因为这将影响到服务器的规模、负载均衡策略和资源分配。</p><p>为了提高系统的QPS，可以采取多种措施，如优化代码、增加缓存、使用更快的存储解决方案、增加服务器数量或使用更强大的硬件等。</p><ul><li><strong>小型应用或个人网站</strong>：每秒几个到几十个请求。</li><li><strong>中等负载的应用</strong>：每秒几十到几百个请求。</li><li><strong>高负载应用</strong>：每秒上千个请求。</li><li><strong>大型企业或全球服务</strong>：每秒数万到数十万个请求。</li></ul><p>要确定你的应用“高”QPS是多少，你需要考虑：</p><ul><li><strong>用户基数</strong>：用户数量和使用模式将直接影响QPS。</li><li><strong>用户行为</strong>：用户的交互方式（如阅读、写入、事务处理）会影响所需的QPS。</li><li><strong>业务需求</strong>：不同的业务场景对响应时间和数据处理能力的要求不同。</li><li><strong>成本</strong>：更高的QPS可能意味着更高的基础设施和运营成本。</li><li><strong>峰值处理</strong>：系统通常需要设计以处理预期峰值负载的多倍，以确保稳定性。</li></ul><p>如果一个服务在一分钟内接收到20个请求，那么要计算每秒的请求量（QPS），你可以将总请求量除以时间</p><p><img src="https://qn.huat.xyz/mac/202311052230749.png#id=stksu&amp;originHeight=295&amp;originWidth=606&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p>`,248),p=[e];function t(h,k,r,d,E,o){return a(),i("div",null,p)}const y=s(l,[["render",t]]);export{c as __pageData,y as default};
