import{_ as e,c as r,o,V as t}from"./chunks/framework.hxTji2_l.js";const _=JSON.parse('{"title":"Docker 简介","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/deploy/docker/简介.md","filePath":"engineering/deploy/docker/简介.md","lastUpdated":1716803380000}'),a={name:"engineering/deploy/docker/简介.md"},c=t('<h1 id="docker-简介" tabindex="-1">Docker 简介 <a class="header-anchor" href="#docker-简介" aria-label="Permalink to &quot;Docker 简介&quot;">​</a></h1><h3 id="什么是-docker" tabindex="-1">什么是 Docker <a class="header-anchor" href="#什么是-docker" aria-label="Permalink to &quot;什么是 Docker&quot;">​</a></h3><p>Docker 是一个开源的容器化平台，允许开发者将应用及其所有依赖打包在一个轻量级、可移植的容器中。容器化技术使得应用可以在几乎任何计算环境中一致地运行，大大简化了配置、开发、测试和部署过程。</p><h3 id="容器-vs-虚拟机" tabindex="-1">容器 VS 虚拟机 <a class="header-anchor" href="#容器-vs-虚拟机" aria-label="Permalink to &quot;容器 VS 虚拟机&quot;">​</a></h3><p>传统的虚拟机（VM）包括应用、必要的二进制文件和库，以及整个操作系统的副本，这通常会占用大量的资源。相比之下，容器引擎共享主机系统的内核，不需要全虚拟化操作系统，因此更为高效、快速。每个容器运行着隔离的应用实例，占用的资源少，启动快，使得更多的应用可以在同一硬件上运行。</p><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><p>Docker 使用容器来运行应用，下面是 Docker 的核心组件和它们的工作原理：</p><ul><li><p><strong>Docker 镜像</strong>：Docker 镜像是一个只读的模板，其中包含运行容器所需的程序代码、库、环境变量和配置文件。镜像在构建时定义，当容器启动时加载。</p></li><li><p><strong>Docker 容器</strong>：容器是 Docker 镜像的运行实例。它是独立的，包含其运行所需的所有代码和依赖，确保应用在任何环境中都能以相同的方式运行。</p></li><li><p><strong>Dockerfile</strong>：Dockerfile 是一个文本文件，包含了创建 Docker 镜像所需的所有命令。开发者可以通过编写 Dockerfile 来自动化 Docker 镜像的构建过程。</p></li><li><p><strong>Docker 仓库</strong>：Docker 仓库用于存储和分享 Docker 镜像。Docker Hub 是最著名的公共仓库，用户可以从中拉取（pull）镜像到本地环境，或者将自己的镜像推送（push）到仓库中共享。</p></li><li><p><strong>Docker Daemon</strong>：Docker 守护进程（daemon）运行在宿主机上，负责处理相关的服务请求，如构建、分发和运行 Docker 容器。用户通过 Docker 客户端（CLI）或者 API 与 Docker 守护进程交互。</p></li><li><p><strong>Docker 客户端</strong>：Docker 客户端是用户与 Docker 交互的主要方式。通过命令行界面（CLI），用户可以发送命令给 Docker Daemon，例如构建新的镜像、启动容器等。</p></li></ul><p>Docker 通过提供一个简单、高效和标准化的容器管理框架，改变了软件开发、测试和部署的方式。容器化不仅提高了应用的可移植性，还优化了资源的使用，使得开发更加快速和灵活。随着技术的不断进步和社区的成长，Docker 将继续在云计算和微服务架构的发展中发挥重要作用。</p><h3 id="相关文档" tabindex="-1">相关文档 <a class="header-anchor" href="#相关文档" aria-label="Permalink to &quot;相关文档&quot;">​</a></h3><p>1、Docker Tips (Docker笔记)</p><p><a href="https://dockertips.readthedocs.io/en/latest/index.html" target="_blank" rel="noreferrer">https://dockertips.readthedocs.io/en/latest/index.html</a></p><p>此站的永久域名是 <a href="https://www.docker.tips" target="_blank" rel="noreferrer">https://www.docker.tips</a></p><p>开源地址： <a href="https://github.com/xiaopeng163/docker.tips" target="_blank" rel="noreferrer">https://github.com/xiaopeng163/docker.tips</a></p>',14),i=[c];function n(s,l,p,k,d,h){return o(),r("div",null,i)}const g=e(a,[["render",n]]);export{_ as __pageData,g as default};
