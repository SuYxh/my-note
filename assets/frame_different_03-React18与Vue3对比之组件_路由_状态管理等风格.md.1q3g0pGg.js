import{_ as e,c as a,o as t,V as _}from"./chunks/framework.hxTji2_l.js";const f=JSON.parse('{"title":"React18 与 Vue3 对比之组件-路由-状态管理等风格","description":"","frontmatter":{},"headers":[],"relativePath":"frame/different/03-React18与Vue3对比之组件_路由_状态管理等风格.md","filePath":"frame/different/03-React18与Vue3对比之组件_路由_状态管理等风格.md","lastUpdated":1716030485000}'),r={name:"frame/different/03-React18与Vue3对比之组件_路由_状态管理等风格.md"},c=_('<h1 id="react18-与-vue3-对比之组件-路由-状态管理等风格" tabindex="-1">React18 与 Vue3 对比之组件-路由-状态管理等风格 <a class="header-anchor" href="#react18-与-vue3-对比之组件-路由-状态管理等风格" aria-label="Permalink to &quot;React18 与 Vue3 对比之组件-路由-状态管理等风格&quot;">​</a></h1><h2 id="组件风格对比" tabindex="-1">组件风格对比 <a class="header-anchor" href="#组件风格对比" aria-label="Permalink to &quot;组件风格对比&quot;">​</a></h2><p>Vue 采用选项式 API，组合式 API</p><p>React 采用类组件，函数组件</p><p>两个框架的组件风格差异还是蛮大的，但是仔细分析会发现，其实组合式 API 和函数组合是非常相近的，都是面向函数进行编程的，比面向对象编程会更加的简单，而且也更加的灵活。</p><p>组件都是采用 use 函数的方式进行功能复用。</p><h2 id="路由对比" tabindex="-1">路由对比 <a class="header-anchor" href="#路由对比" aria-label="Permalink to &quot;路由对比&quot;">​</a></h2><p>Vue 语法更加简练</p><p>React 的 use 函数太多，不够统一化</p><p>这两个框架对于常见的路由需求都是可以灵活实现的，例如：路由表、嵌套、动态、编程式、守卫等。</p><p>所以总结来说，Vue 的路由使用起来会更加的灵活；React 使用起来会略显复杂。并且 Vue 功能更加丰富，而 React 有些需求需要自己模拟去实现。</p><h2 id="状态管理对比" tabindex="-1">状态管理对比 <a class="header-anchor" href="#状态管理对比" aria-label="Permalink to &quot;状态管理对比&quot;">​</a></h2><p>Vue 采用 Vuex 或 Pinia</p><p>React 采用 Redux 或 Mobx</p><p>Vue 中推荐使用 Pinia，因为使用更加简单，并且跟 Vue3 的组合式配合会更加的统一。</p><p>React 中推荐使用 Redux 的扩展版本，Redux-toolkit(RTK)，使用起来跟 Vue 对比还是略显复杂一些，不过常见的功能都可以实现的很好：共享状态、同步、异步、模块化、持久化等。</p>',16),o=[c];function i(p,u,n,d,s,l){return t(),a("div",null,o)}const V=e(r,[["render",i]]);export{f as __pageData,V as default};
