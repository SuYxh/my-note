import{_ as s,c as i,o as e,V as t}from"./chunks/framework.hxTji2_l.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe/css/文档流.md","filePath":"fe/css/文档流.md","lastUpdated":1718195154000}'),l={name:"fe/css/文档流.md"},a=t(`<h2 id="文档流" tabindex="-1">文档流 <a class="header-anchor" href="#文档流" aria-label="Permalink to &quot;文档流&quot;">​</a></h2><p><strong>文档流</strong>指节点在排版布局时默认使用从左往右从上往下的流式排列方式。窗体从上往下分成一行行且每行根据从左往右的顺序排列节点，其显著特性就是<code>从左往右从上往下</code>。</p><h3 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h3><p>对于一个标准的文档流，可根据其特性对节点分类。</p><ul><li>HTML级别</li><li>容器级元素：<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>等</li><li>文本级元素：<code>&lt;a&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;span&gt;</code>等</li><li>CSS级别</li><li>块级元素：<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>等</li><li>行内元素：<code>&lt;a&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;span&gt;</code>等</li></ul><h3 id="微观现象" tabindex="-1">微观现象 <a class="header-anchor" href="#微观现象" aria-label="Permalink to &quot;微观现象&quot;">​</a></h3><p>即使是标准的文档流，也不排除存在一些小小的缺陷，以下是三种常见缺陷。</p><ul><li><strong>空白折叠</strong>：换行编写行内元素，排版会出现<code>5px空隙</code></li><li><strong>高矮不齐</strong>：行内元素统一以底边垂直对齐</li><li><strong>自动换行</strong>：排版若一行无法完成则换行接着排版</li></ul><blockquote><p>解决方案</p></blockquote><p>空白折叠可能是最易出现的文档流微观现象。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	text-align: center;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	display: inline-block;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>此时很多浏览器就出现<code>5px空隙</code>，解决方案也有很多种。</p><p>第一种，必须紧密连接节点。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>第二种，子节点声明<code>margin-left:-5px</code>。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第三种，父节点使用<code>Flex布局</code>。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="脱离文档流" tabindex="-1">脱离文档流 <a class="header-anchor" href="#脱离文档流" aria-label="Permalink to &quot;脱离文档流&quot;">​</a></h3><p><strong>脱离文档流</strong>指节点脱离正常文档流后，在正常文档流中的其他节点将忽略该节点并填补其原先空间。文档一旦脱流，计算其父节点高度时不会将其高度纳入，脱流节点不占据空间，因此声明浮动或定位后会对周围节点布局产生或多或少的影响。</p><p>文档流的脱流有两种方式。</p><ul><li><strong>浮动布局</strong>：<code>float:left/right</code></li><li><strong>定位布局</strong>：<code>position:absolute/fixed</code></li></ul><blockquote><p>Float方式</p></blockquote><p>节点声明<code>float</code>脱流时会让其跳出正常文档流，其他节点会忽略该节点并填补其原先空间。该节点的文本内容可不参与脱流效果，却会认同该节点所占据的空间并围绕它布局，这就是<code>文字环绕效果</code>的原理。</p><p>一句话概括：<strong>节点参与浮动布局后，自身脱流但其文本不脱流</strong>。</p><blockquote><p>Position方式</p></blockquote><p>节点声明<code>position</code>脱流时(只有<code>absolute/fixed</code>)会让自身及其文本内容一起跳出正常文档流，其他节点会忽略该节点并填补其原先空间。<code>absolute</code>绝对定位是相对往上遍历第一个声明<code>position:relative/absolute</code>的祖先节点定位，若无此节点则相对<code>&lt;body&gt;</code>定位；<code>fixed</code>固定定位是相对浏览器窗口定位。</p><p>一句话概括：<strong>节点参与定位布局后，自身及其文本一起脱流</strong>。</p><h3 id="显隐影响" tabindex="-1">显隐影响 <a class="header-anchor" href="#显隐影响" aria-label="Permalink to &quot;显隐影响&quot;">​</a></h3><p>在正常文档流排版时，经常会声明<code>display:none</code>与<code>visibility:hidden</code>控制节点的隐藏，<code>display:none</code>简称<code>DN</code>，<code>visibility:hidden</code>简称<code>VH</code>。上章提到<code>DN/VH</code>的区别，这次看看节点切入隐藏状态后，会存在何种差别。</p><ul><li>节点不可见但占据空间，显隐时可过渡：<code>visibility:hidden</code></li><li>节点不可见但占据空间，不可点击：<code>visibility:hidden</code></li><li>节点不可见不占据空间，可访问DOM：<code>display:none</code></li><li>节点不可见但占据空间，可点击：<code>opacity:0</code></li><li>节点不可见不占据空间，可点击：<code>position:absolute; opacity:0</code></li><li>节点不可见但占据空间，不可点击：<code>position:relative; z-index:-1</code></li><li>节点不可见不占据空间，不可点击：<code>position:absolute; z-index:-1</code></li></ul><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">display: none</th><th style="text-align:left;">visibility: hidden</th><th>opacity: 0</th></tr></thead><tbody><tr><td style="text-align:left;">页面中</td><td style="text-align:left;">不存在</td><td style="text-align:left;">存在</td><td>存在</td></tr><tr><td style="text-align:left;">重排</td><td style="text-align:left;">会</td><td style="text-align:left;">不会</td><td>不会</td></tr><tr><td style="text-align:left;">重绘</td><td style="text-align:left;">会</td><td style="text-align:left;">会</td><td>不一定</td></tr><tr><td style="text-align:left;">自身绑定事件</td><td style="text-align:left;">不触发</td><td style="text-align:left;">不触发</td><td>可触发</td></tr><tr><td style="text-align:left;">transition</td><td style="text-align:left;">不支持</td><td style="text-align:left;">支持</td><td>支持</td></tr><tr><td style="text-align:left;">子元素可复原</td><td style="text-align:left;">不能</td><td style="text-align:left;">能</td><td>不能</td></tr><tr><td style="text-align:left;">被遮挡的元素可触发事件</td><td style="text-align:left;">能</td><td style="text-align:left;">能</td><td>不能</td></tr></tbody></table><h2 id="层叠上下文" tabindex="-1">层叠上下文 <a class="header-anchor" href="#层叠上下文" aria-label="Permalink to &quot;层叠上下文&quot;">​</a></h2><p><strong>层叠上下文</strong>指盒模型在三维空间<code>Z轴</code>中的表现行为。每个盒模型存在于一个三维空间中，分别是平面画布的<code>X轴Y轴</code>与表示层叠的<code>Z轴</code>。</p><p>在默认情况下，节点在网页中沿着<code>X轴</code>与<code>Y轴</code>平铺，很难察觉它们在<code>Z轴</code>中的层叠关系。节点一旦发生堆叠，最终表现就是节点间互相覆盖。若一个节点包括层叠上下文，那它就拥有绝对的制高点，使用一个成语贴切表示就是鹤立鸡群，最终表现就是离屏幕观察者更近。</p><p><img src="https://qn.huat.xyz/mac/202406121343205.awebp" alt="三维空间"></p><p>声明<code>position/z-index</code>可让节点生成层叠上下文。很多同学可能一直认为<code>z-index</code>只是声明一个节点在<code>Z轴</code>的层叠顺序，值越高离屏幕观察者越近。其实这种认识不全面，还需注意以下情况。</p><ul><li><code>z-index</code>只在声明定位的节点中起效</li><li>节点在<code>Z轴</code>的层叠顺序根据<code>z-index</code>、层叠上下文和层叠等级共同决定</li></ul><h3 id="层叠等级" tabindex="-1">层叠等级 <a class="header-anchor" href="#层叠等级" aria-label="Permalink to &quot;层叠等级&quot;">​</a></h3><p><strong>层叠等级</strong>又称<strong>层叠级别</strong>，指节点在三维空间<code>Z轴</code>中的上下顺序。在同一层叠上下文中，它描述层叠上下文节点在<code>Z轴</code>中的上下顺序；在普通节点中，它描述普通节点在<code>Z轴</code>中的上下顺序。</p><p>普通节点的层叠等级优先由其所在的层叠上下文决定，层叠等级的比较只有在当前层叠上下文中才有意义，脱离当前层叠上下文的比较就变得无意义了。</p><blockquote><p>成因</p></blockquote><p>很多同学认为只有声明<code>position/z-index</code>才能让节点生成层叠上下文，其实不仅只有这两个属性，还有一些条件也能让节点生成层叠上下文。</p><ul><li><code>&lt;html&gt;</code>根结点</li><li><code>Flex布局</code>中声明<code>z-index</code>不为<code>auto</code>的节点</li><li><code>Grid布局</code>中声明<code>z-index</code>不为<code>auto</code>的节点</li><li>声明<code>position:relative/absolute</code>与<code>z-index</code>不为<code>auto</code>的节点</li><li>声明<code>position:fixed/sticky</code>的节点</li><li>声明<code>mask/mask-image/mask-border</code>不为<code>none</code>的节点</li><li>声明<code>filter</code>不为<code>none</code>的节点</li><li>声明<code>mix-blend-mode</code>不为<code>normal</code>的节点</li><li>声明<code>opacity</code>不为<code>1</code>的节点</li><li>声明<code>clip-path</code>不为<code>none</code>的节点</li><li>声明<code>will-change</code>不为<code>initial</code>的节点</li><li>声明<code>perspective</code>不为<code>none</code>的节点</li><li>声明<code>transform</code>不为<code>none</code>的节点</li><li>声明<code>isolation</code>为<code>isolate</code>的节点</li><li>声明<code>-webkit-overflow-scrolling</code>为<code>touch</code>的节点</li></ul><h3 id="层叠顺序" tabindex="-1">层叠顺序 <a class="header-anchor" href="#层叠顺序" aria-label="Permalink to &quot;层叠顺序&quot;">​</a></h3><p><strong>层叠顺序</strong>指节点发生层叠时根据指定顺序规则在<code>Z轴</code>中垂直显示。</p><blockquote><p>脱流节点的层叠顺序</p></blockquote><p>在同一层叠上下文中，节点根据<code>z-index</code>的大小从上到下层叠，若<code>z-index</code>一样则后面的节点层叠等级要大于前面的节点。脱流节点的层叠顺序看<code>z-index</code>的大小。</p><blockquote><p>标准流节点的层叠顺序</p></blockquote><p>标准流节点的层叠顺序稍微有点难记，我也未找到特别的记忆方式，只能死记硬背了。以下是层叠顺序从低到高的排列。</p><ul><li>层叠上下文的<code>border/background</code></li><li><code>z-index&lt;0</code>的节点</li><li>标准流内块级非定位的节点</li><li>浮动非定位的节点</li><li>标准流内行内非定位的节点</li><li><code>z-index:auto/0</code>的节点</li><li><code>z-index&gt;0</code>的节点</li></ul><p><img src="https://qn.huat.xyz/mac/202406121343405.awebp" alt="标准流层叠顺序"></p>`,52),n=[a];function d(o,p,c,h,r,k){return e(),i("div",null,n)}const u=s(l,[["render",d]]);export{g as __pageData,u as default};
