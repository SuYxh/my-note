import{_ as a,c as s,o as e,V as n}from"./chunks/framework.hxTji2_l.js";const g=JSON.parse('{"title":"前端项目配置","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/deploy/project/jenkins部署前端项目.md","filePath":"engineering/deploy/project/jenkins部署前端项目.md","lastUpdated":1707394470000}'),i={name:"engineering/deploy/project/jenkins部署前端项目.md"},t=n(`<h1 id="前端项目配置" tabindex="-1">前端项目配置 <a class="header-anchor" href="#前端项目配置" aria-label="Permalink to &quot;前端项目配置&quot;">​</a></h1><h3 id="新建项目" tabindex="-1">新建项目 <a class="header-anchor" href="#新建项目" aria-label="Permalink to &quot;新建项目&quot;">​</a></h3><p><img src="https://qn.huat.xyz/mac/202309171628998.png" alt="image-20230917162850969"></p><p><img src="https://qn.huat.xyz/mac/202309171629687.png" alt="image-20230917162947667"></p><h3 id="配置代码仓库" tabindex="-1">配置代码仓库 <a class="header-anchor" href="#配置代码仓库" aria-label="Permalink to &quot;配置代码仓库&quot;">​</a></h3><p><img src="https://qn.huat.xyz/mac/202309171630342.png" alt="image-20230917163057318"></p><h3 id="配置源码管理" tabindex="-1">配置源码管理 <a class="header-anchor" href="#配置源码管理" aria-label="Permalink to &quot;配置源码管理&quot;">​</a></h3><p><img src="https://qn.huat.xyz/mac/202309171633543.png" alt="image-20230917163309511"></p><p><img src="https://qn.huat.xyz/mac/202309171634012.png" alt="image-20230917163410983"></p><h3 id="构建触发器" tabindex="-1">构建触发器 <a class="header-anchor" href="#构建触发器" aria-label="Permalink to &quot;构建触发器&quot;">​</a></h3><p><img src="https://qn.huat.xyz/mac/202309171635357.png" alt="image-20230917163504329"></p><h3 id="build-steps" tabindex="-1">Build Steps <a class="header-anchor" href="#build-steps" aria-label="Permalink to &quot;Build Steps&quot;">​</a></h3><h4 id="执行-shell" tabindex="-1">执行 shell <a class="header-anchor" href="#执行-shell" aria-label="Permalink to &quot;执行 shell&quot;">​</a></h4><p><img src="https://qn.huat.xyz/mac/202309171636011.png" alt="image-20230917163604985"></p><p>echo $PATH： 服务器的环境变量 echo $WORKSPACE： 当前项目在使用 jenkins 部署时在服务上的地址，可以使用 <code>cd</code>命令切换去看看</p><h4 id="send-files-or-execute-commands-over-ssh" tabindex="-1">Send files or execute commands over SSH <a class="header-anchor" href="#send-files-or-execute-commands-over-ssh" aria-label="Permalink to &quot;Send files or execute commands over SSH&quot;">​</a></h4><p><img src="https://qn.huat.xyz/mac/202309171637097.png" alt="image-20230917163750076"></p><p><code>Source files：dist/**</code> 项目源码，一般都是打包在放在 dist 文件夹下</p><p><code>Remote directory: /page/github-aaa-tmp</code>: 服务器上的文件夹，这里一般是 nginx 的静态资源文件夹， 【为什么是 github-aaa-tmp ？ 】</p><p><code>Exec command</code> ： 执行的命令</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先删除原来的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/page/github-aaa</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 前面的配置将源码上传到了 github-aaa-tmp 这里将源码拷贝到  github-aaa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/page/github-aaa-tmp/dist /root/page/github-aaa</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 最后删除 github-aaa-tmp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/page/github-aaa-tmp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="webhook" tabindex="-1">webhook <a class="header-anchor" href="#webhook" aria-label="Permalink to &quot;webhook&quot;">​</a></h3><p>经过上面的配置后 ， 这里会自动添加 webhook</p><p><img src="https://qn.huat.xyz/mac/202309171644171.png" alt="image-20230917164424131"></p><p><img src="https://qn.huat.xyz/mac/202309171645040.png" alt="image-20230917164530007"></p><h3 id="docker" tabindex="-1">docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;docker&quot;">​</a></h3><p>1、安装 docker</p><p>2、拉取 nginx 镜像</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker pull nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、启动镜像</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run -d -p 80:80 -v /var/lib/jenkins/workspace/github-aaa/dist:/usr/share/nginx/html/github-aaa nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>/var/lib/jenkins/workspace/github-aaa/dist: 表示源码的位置， 该路径可以使用在部署的时候添加命令 <code>echo $WORKSPACE</code> 进行打印出来</p><p>/usr/share/nginx/html/github-aaa： 表示 docker 镜像 nginx 的 github-aaa 文件夹的文件使用 /var/lib/jenkins/workspace/github-aaa/dist 里面的文件。nginx 镜像里面的路径可以使用命令<code>docker exec -it 3385487e348c bash </code> 进入到这个镜像中进行查看</p><p>查看镜像</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker ps</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>停止镜像</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker stop &lt;容器ID或容器名称&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 停止多个容器</span></span>
<span class="line"><span>docker stop $(docker ps -q)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>启动镜像</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker start &lt;容器ID或容器名称&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重新启动所有已停止的容器, 这将使用 docker ps -aq --filter &quot;status=exited&quot; 命令获取所有已停止的容器的ID，并将其传递给 docker start 命令。</span></span>
<span class="line"><span>docker start $(docker ps -aq --filter &quot;status=exited&quot;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>重启镜像</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker restart &lt;容器ID或容器名称&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="效果展示" tabindex="-1">效果展示 <a class="header-anchor" href="#效果展示" aria-label="Permalink to &quot;效果展示&quot;">​</a></h3><p>当我们配置结束后，项目在 git push 的时候就会触发构建，效果图如下：</p><blockquote><p>此时不要在使用 github action, 可能出现一些问题</p></blockquote><p><img src="https://qn.huat.xyz/mac/202309171650572.png" alt="image-20230917165056537"></p><p><img src="https://qn.huat.xyz/mac/202309171651187.png" alt="image-20230917165120156"></p><p>当我们去刷新页面的时候就能够看到 <a href="http://8.131.87.46/github-aaa/%EF%BC%8C" target="_blank" rel="noreferrer">http://8.131.87.46/github-aaa/，</a> 页面进行了更新</p><blockquote><p>这里需要将静态资源文件放在 nginx 下</p></blockquote>`,48),p=[t];function l(r,c,o,h,d,u){return e(),s("div",null,p)}const m=a(i,[["render",l]]);export{g as __pageData,m as default};
