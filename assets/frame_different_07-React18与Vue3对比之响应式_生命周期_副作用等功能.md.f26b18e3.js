import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.fb3766a7.js";const D=JSON.parse('{"title":"React18 与 Vue3 对比之响应式-生命周期-副作用等功能","description":"","frontmatter":{},"headers":[],"relativePath":"frame/different/07-React18与Vue3对比之响应式_生命周期_副作用等功能.md","lastUpdated":1706871945000}'),l={name:"frame/different/07-React18与Vue3对比之响应式_生命周期_副作用等功能.md"},p=e(`<h1 id="react18-与-vue3-对比之响应式-生命周期-副作用等功能" tabindex="-1">React18 与 Vue3 对比之响应式-生命周期-副作用等功能 <a class="header-anchor" href="#react18-与-vue3-对比之响应式-生命周期-副作用等功能" aria-label="Permalink to &quot;React18 与 Vue3 对比之响应式-生命周期-副作用等功能&quot;">​</a></h1><h2 id="响应式数据对比" tabindex="-1">响应式数据对比 <a class="header-anchor" href="#响应式数据对比" aria-label="Permalink to &quot;响应式数据对比&quot;">​</a></h2><p>Vue 采用响应式数据，底层通过 new Proxy()进行监控，灵活性更高</p><p>React 采用 state 状态，通过 setState()方法进行内部 re-render，可控性更强</p><h2 id="生命周期对比" tabindex="-1">生命周期对比 <a class="header-anchor" href="#生命周期对比" aria-label="Permalink to &quot;生命周期对比&quot;">​</a></h2><p>Vue 生命周期钩子(常见)</p><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeUnmount</li><li>unmounted</li></ul><p>React 生命周期钩子(常见)</p><ul><li>constructor</li><li>componentDidMount</li><li>componentDidUpdate</li><li>componentWillUnmount</li><li>render</li></ul><p>整体对比来看，Vue 的生命周期会更丰富一些，React 生命周期会更简约一些。</p><h2 id="副作用处理对比" tabindex="-1">副作用处理对比 <a class="header-anchor" href="#副作用处理对比" aria-label="Permalink to &quot;副作用处理对比&quot;">​</a></h2><p>vue 使用，watchEffect()</p><p>react 使用，useEffect()</p><p>都是处理副作用的方法，用法上还是有很大区别的。</p><p>watchEffect 会自动根据所依赖的值进行重渲染，而 useEffect 要明确指定对应的值才能进行重渲染，React 团队已经给出在未来的版本中可能会改成根据所依赖的值自动进行重渲染的操作，但暂时还不行。</p><p>watchEffect 在更新前和卸载前触发的方式是通过回调函数的参数被调用来实现的，而 useEffect 是通过 return 的返回值来指定的。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Vue</span></span>
<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">cb</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">cb</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//更新前的触发</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// React</span></span>
<span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//更新前的触发</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,18),t=[p];function o(c,r,i,u,y,d){return a(),n("div",null,t)}const _=s(l,[["render",o]]);export{D as __pageData,_ as default};
