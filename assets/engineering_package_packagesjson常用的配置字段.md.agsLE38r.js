import{_ as s,c as n,o as e,V as t}from"./chunks/framework.hxTji2_l.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/package/packagesjson常用的配置字段.md","filePath":"engineering/package/packagesjson常用的配置字段.md","lastUpdated":1719478304000}'),o={name:"engineering/package/packagesjson常用的配置字段.md"},i=t(`<p><code>packages.json</code>这个文件中有很多的字段，但是其实很多开发者只知道那几个字段的意思：</p><ul><li><p><strong>version</strong>：版本号</p></li><li><p><strong>dependencies</strong>：生产依赖</p></li><li><p><strong>devDependencies</strong>：开发依赖</p></li></ul><p>其他就一概不知了，但是如果你想要实现前端进阶的话，<strong>前端工程化</strong>是绕不过去的一环，而<code>packages.json</code>则是<strong>前端工程化</strong>中重要的一部分！</p><h2 id="必需字段" tabindex="-1">必需字段 <a class="header-anchor" href="#必需字段" aria-label="Permalink to &quot;必需字段&quot;">​</a></h2><ul><li><p><strong>name：</strong> 定义你的项目的名称，不能使用<code>.</code>或<code>_</code>开头，并且不能包含大写字母</p></li><li><p><strong>version：</strong> 定义你的项目的版本号，格式为 ：<code>大版本号.次版本号.修订号</code></p></li></ul><h2 id="描述字段" tabindex="-1">描述字段 <a class="header-anchor" href="#描述字段" aria-label="Permalink to &quot;描述字段&quot;">​</a></h2><ul><li><p><strong>description：</strong> 项目的描述</p></li><li><p><strong>keywords：</strong> 项目的关键词，会在 NPM 文档上显示</p></li><li><p><strong>author：</strong> 项目的作者</p></li><li><p><strong>contributors：</strong> 项目的贡献者</p></li><li><p><strong>homepage：</strong> 项目的主页地址，一般放 github 的地址</p></li><li><p><strong>repository：</strong> 项目的源码地址，一般放 github 的地址</p></li><li><p><strong>bug：</strong> 项目提交问题的地址</p></li><li><p><strong>funding：</strong> 项目捐赠支持的地址</p></li></ul><h2 id="依赖字段" tabindex="-1">依赖字段 <a class="header-anchor" href="#依赖字段" aria-label="Permalink to &quot;依赖字段&quot;">​</a></h2><ul><li><p><strong>dependencies：</strong> 生产依赖</p></li><li><p><strong>devDependencies：</strong> 开发依赖</p></li><li><p><strong>peerDependencies：</strong> 对等依赖，比如你开发一个库需要依赖vue，你的项目也需要依赖vue，这个时候peerDependencies里的vue就会忽略安装，提高安装效率</p></li><li><p><strong>peerDependenciesMeta：</strong> 对等依赖标记</p></li><li><p><strong>engines：</strong> 声明对 npm 或 node 的版本要求</p></li><li><p><strong>workspaces：</strong> 单代码库管理多个子项目，pnpm 的 workspace 就是依赖了这个字段</p></li></ul><h2 id="脚本字段" tabindex="-1">脚本字段 <a class="header-anchor" href="#脚本字段" aria-label="Permalink to &quot;脚本字段&quot;">​</a></h2><ul><li><p><strong>scripts：</strong> 放一些项目运行的命令，比如 start、dev、build、prepare、test等等</p></li><li><p><strong>config：</strong> 项目的一些配置，比如设置环境变量</p></li></ul><h2 id="入口-文件-类型-字段" tabindex="-1">入口 &amp; 文件 &amp; 类型 字段 <a class="header-anchor" href="#入口-文件-类型-字段" aria-label="Permalink to &quot;入口 &amp; 文件 &amp; 类型 字段&quot;">​</a></h2><ul><li><p><strong>bin：</strong> 定义命令行执行的文件</p></li><li><p><strong>main：</strong> 指定你项目的入口文件</p></li><li><p><strong>module：</strong> 指定项目的 esmodule 入口文件</p></li><li><p><strong>browser：</strong> 指定浏览器引入时使用的入口文件（umd）</p></li><li><p><strong>types：</strong> 指定项目的类型声明文件（.d.ts）</p></li><li><p><strong>type：</strong> 一般要设置成 module，项目才能使用 esmodule 语法</p></li><li><p><strong>exports：</strong> 当打包工具支持exports字段时（webpack、Rollup 等），以上main，browser，module，types四个字段都被忽略</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;exports&quot;: {</span></span>
<span class="line"><span>      &quot;.&quot;: {</span></span>
<span class="line"><span>      &quot;import&quot;: &quot;./dist/index.esm.js&quot;,</span></span>
<span class="line"><span>      &quot;require&quot;: &quot;./dist/index.cjs.js&quot;,</span></span>
<span class="line"><span>      &quot;browser&quot;: &quot;./dist/index.umd.js&quot;,</span></span>
<span class="line"><span>      &quot;types&quot;: &quot;./dist/index.d.ts&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>&quot;.&quot; 表示默认导出</p></li><li><p>&quot;import&quot;: 指定了 ES module (ESM) 规范下的导出文件路径</p></li><li><p>&quot;require&quot;: 指定了 CommonJS 规范下的导出文件路径</p></li><li><p>&quot;browser&quot;: 指定了用于浏览器环境的导出文件路径</p></li><li><p>&quot;types&quot;: 指定了类型声明文件的路径</p></li></ul><h2 id="发包字段" tabindex="-1">发包字段 <a class="header-anchor" href="#发包字段" aria-label="Permalink to &quot;发包字段&quot;">​</a></h2><ul><li><p><strong>files：</strong> 指明哪些文件需要发包到 NPM 上</p></li><li><p><strong>private：</strong> 设置是否要发到私有库上，发公共库的话 false</p></li><li><p><strong>publishConfig：</strong> 指定发包到某个位置</p></li><li><p><strong>os：</strong> 指定你的包适用于什么操作系统</p></li><li><p><strong>cpu：</strong> 与 os 类似</p></li><li><p><strong>license：</strong> 指定你的包的开源协议，各个协议允许做什么事情，如下图</p></li></ul><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noreferrer">http://www.w3.org/1999/xlink</a>&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><h2 id="第三方字段-非官方" tabindex="-1">第三方字段（非官方） <a class="header-anchor" href="#第三方字段-非官方" aria-label="Permalink to &quot;第三方字段（非官方）&quot;">​</a></h2><ul><li><p><strong>eslintConfig：</strong> eslint配置，但是现在都不用这个区配置了，都是用 .eslintrc</p></li><li><p><strong>babel：</strong> babel配置，现在不用了，都用 .babelrc</p></li><li><p><strong>unpkg：</strong> 指定通过 cdn 使用你的包的时候的入口文件</p></li><li><p><strong>lint-staged：</strong> 一般配合 githooks 一起对暂存区的文件进行代码校验</p></li><li><p><strong>browserslist：</strong> 告知支持哪些浏览器</p></li><li><p><strong>sideEffects：</strong> 说明项目是否有副作用，配合 webpoack 或者 rollup进行 tree-shaking</p></li></ul>`,18),r=[i];function l(a,p,g,u,d,c){return e(),n("div",null,r)}const m=s(o,[["render",l]]);export{b as __pageData,m as default};
