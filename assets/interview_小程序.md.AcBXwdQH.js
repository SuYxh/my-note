import{_ as a,c as t,o as i,V as e}from"./chunks/framework.hxTji2_l.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/小程序.md","filePath":"interview/小程序.md","lastUpdated":1707404422000}'),l={name:"interview/小程序.md"},n=e(`<h3 id="说说微信小程序的实现原理" tabindex="-1">说说微信小程序的实现原理? <a class="header-anchor" href="#说说微信小程序的实现原理" aria-label="Permalink to &quot;说说微信小程序的实现原理?&quot;">​</a></h3><p>网页开发，渲染线程和脚本是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应的原因，本质就是我们常说的 JS，是单线程的 而在小程序中，选择了 Hybrid 的渲染方式，将视图层和逻辑层是分开的，双线程同时运行，视图层的界面使用webView进行渲染，逻辑层运行在JSCore中</p><p><img src="https://qn.huat.xyz/mac/202402082253022.png" alt="图片.png"></p><ul><li>渲染层: 界面渲染相关的任务全都在 WebView 线程里执行。一个小程序存在多个界面，所以渲染层存在多个 WebView 线程</li><li>逻辑层: 采用 JsCore 线程运行 JS 脚本，在这个环境下执行的都是有关小程序业务逻辑的代码</li></ul><h4 id="通信" tabindex="-1">通信 <a class="header-anchor" href="#通信" aria-label="Permalink to &quot;通信&quot;">​</a></h4><p>小程序在渲染层，宿主环境会把|wxmL转化成对应的 JS 对象 在逻辑层发生数据变更的时候，通过宿主环境提供的:setData 方法把数据从逻辑层传递到渲染层，再经过对比前后差异，把差异应用在原来的:Dom 树上，渲染出正确的视图</p><p><img src="https://qn.huat.xyz/mac/202402082253990.png" alt="图片.png"></p><p>当视图存在交互的时候，例如用户点击你界面上某个按钮，这类反馈应该通知给开发者的逻辑层，需要将对应的处理状态呈现给用户 对于事件的分发处理，微信进行了特殊的处理，将所有的事件拦截后，丢到逻辑层交给JavaScript 进行处理</p><p><img src="https://qn.huat.xyz/mac/202402082253187.png" alt="图片.png"></p><p>由于小程序是基于双线程的，也就是任何在视图层和逻辑层之间的数据传递都是线程间的通信，会有一定的延时，因此在小程序中，页面更新成了异步操作 异步会使得各部分的运行时序变得复杂一些，比如在渲染首屏的时候，逻辑层与渲染层会同时开始初始化工作，但是渲染层需要有逻辑层的数据才能把界面渲染出来 如果渲染层初始化工作较快完成，就要等逻辑层的指令才能进行下一步工作 因此逻辑层与渲染层需要有一定的机制保证时序下确，在每个小程序页面的生命周期中，存在着若干次页面数据通信</p><p><img src="https://qn.huat.xyz/mac/202402082253520.png" alt="图片.png"></p><h4 id="运行机制" tabindex="-1">运行机制 <a class="header-anchor" href="#运行机制" aria-label="Permalink to &quot;运行机制&quot;">​</a></h4><p>小程序启动运行两种情况:</p><ul><li>冷启动(重新开始): 用户首次打开或者小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动，即为冷启动</li><li>热启动:用户已经打开过小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需要将后台态的小程序切换到前台，这个过程就是热启动</li></ul><h4 id="需要注意" tabindex="-1">需要注意 <a class="header-anchor" href="#需要注意" aria-label="Permalink to &quot;需要注意&quot;">​</a></h4><p>1.小程序没有重启的概念 2.当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后会被微信主动销毁 3.短时间内收到系统两次以上内存警告，也会对小程序进行销毁，这也就为什么一旦页面内存溢出，页面会奔溃的本质原因了</p><p><img src="https://qn.huat.xyz/mac/202402082253758.png" alt="图片.png"></p><p>开发者在后台发布新版本之后，无法立刻影响到所有现网用户，但最差情况下，也在发布之后 24 小时之内下发新版本信息到用户 每次冷启动时，都会检查是否有更新版本，如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上</p><h3 id="说说微信小程序的生命周期函数有哪些" tabindex="-1">说说微信小程序的生命周期函数有哪些? <a class="header-anchor" href="#说说微信小程序的生命周期函数有哪些" aria-label="Permalink to &quot;说说微信小程序的生命周期函数有哪些?&quot;">​</a></h3><h4 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h4><p>跟 vue 、react 框架一样，微信小程序框架也存在生命周期，实质也是一堆会在特定时期执行的函数 小程序中，生命周期主要分成了三部分:</p><ul><li>应用的生命周期</li></ul><p>小程序的生命周期函数是在 app.js 里面调用的，通过 App(Object)函数用来注册一个小程序，指定其小程序的生命周期回调</p><ul><li>页面的生命周期</li></ul><p>页面生命周期函数就是当你每进入/切换到一个新的页面的时候，就会调用的生命周期函数，同样通过App(Object)函数用来注册一个页面</p><ul><li>组件的生命周期</li></ul><p>组件的生命周期，指的是组件自身的一些函数，这些函数在特殊的时间点或遇到一些特殊的框架事件时被自动触发，通过 Component(0bject)进行注册组件</p><h4 id="应用的生命周期" tabindex="-1">应用的生命周期 <a class="header-anchor" href="#应用的生命周期" aria-label="Permalink to &quot;应用的生命周期&quot;">​</a></h4><table><thead><tr><th>生命周期</th><th></th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td></td><td>小程序初始化完成时触发 ，全局只触发一次</td></tr><tr><td>onshow</td><td></td><td>小程序启动 或从后台进入前台显示时触发</td></tr><tr><td>onHide</td><td></td><td>小程序从前台进入后台时触发</td></tr><tr><td>onError</td><td></td><td>小程序发生脚本错误或 API 调用报错时触发</td></tr><tr><td>onpageNotFound</td><td></td><td>小程序要打开的页面不存在时触发</td></tr><tr><td>onunhandledRejection()</td><td></td><td>小程序有未处理的 promise 拒绝时触发</td></tr><tr><td>onThemechange</td><td></td><td>系统切换主题时触发</td></tr></tbody></table><h4 id="页面生命周期" tabindex="-1">页面生命周期 <a class="header-anchor" href="#页面生命周期" aria-label="Permalink to &quot;页面生命周期&quot;">​</a></h4><table><thead><tr><th>生命周期</th><th>说明</th><th>作用</th></tr></thead><tbody><tr><td>onLoad</td><td>生命周期回调一监听页面加载</td><td>发送请求获取数据</td></tr><tr><td>onshow</td><td>生命周期回调一监听页面显示</td><td>请求数据</td></tr></tbody></table><table><thead><tr><th>onReady</th><th>生命周期回调 ~~ ~~ 监听页面初次渲染完成</th><th>获取页面元素 (少用)</th></tr></thead><tbody><tr><td>onHide</td><td>生命周期回调 ~~ ~~ 监听页面隐藏</td><td>终止任务， 如定时器或者播放器</td></tr><tr><td>onunload</td><td>生命周期回调 ~~ ~~ 监听页面卸载</td><td>终止任务</td></tr></tbody></table><h4 id="组件的生命周期" tabindex="-1">组件的生命周期 <a class="header-anchor" href="#组件的生命周期" aria-label="Permalink to &quot;组件的生命周期&quot;">​</a></h4><table><thead><tr><th>生命周期</th><th></th><th>说明</th></tr></thead><tbody><tr><td>created</td><td></td><td>生命周期回调一监听页面加载</td></tr><tr><td>attached</td><td></td><td>生命周期回调-监听页面显示</td></tr><tr><td>ready</td><td></td><td>生命周期回调-监听页面初次渲染完成</td></tr><tr><td>moved</td><td></td><td>生命周期回调-监听页面隐藏</td></tr><tr><td>detached</td><td></td><td>生命周期回调-监听页面卸载</td></tr><tr><td>error</td><td></td><td>每当组件方法抛出错误时执行</td></tr></tbody></table><p>注意的是:</p><ul><li>组件实例刚刚被创建好时， created 生命周期被触发，此时，组件数据 this.data 就是在Component 构造器中定义的数据 data ，此时不能调用 setData</li><li>在组件完全初始化完毕、进入页面节点树后，attached 生命周期被触发。此时， this.data 已被初始化为组件的当前值。这个生命周期很有用，绝大多数初始化工作可以在这个时机进行</li><li>在组件离开页面节点树后， detached 生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则 detached 会被触发</li></ul><p>还有一些特殊的生命周期，它们并非与组件有很强的关联，但有时组件需要获知，以便组件内部处理这样的生命周期称为“组件所在页面的生命周期”，在pageLifetimes 定义段中定义，如下:</p><table><thead><tr><th>生命周期</th><th>说明</th></tr></thead><tbody><tr><td>show</td><td>组件所在的页面被展示时执行</td></tr><tr><td>hide</td><td>组件所在的页面被隐藏时执行</td></tr></tbody></table><p>代码如下：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageLifetimes: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-label="Permalink to &quot;执行过程&quot;">​</a></h4><h5 id="应用的生命周期执行过程" tabindex="-1">应用的生命周期执行过程 <a class="header-anchor" href="#应用的生命周期执行过程" aria-label="Permalink to &quot;应用的生命周期执行过程&quot;">​</a></h5><ul><li>用户首次打开小程序，触发 onLaunch (全局只触发一次)</li><li>小程序初始化完成后，触发onShow方法，监听小程序显示</li><li>小程序从前台进入后台，触发 onHide方法</li><li>小程序从后台进入前台显示，触发 onShow方法</li><li>小程序后台运行一定时间，或系统资源占用过高，会被销毁</li></ul><h5 id="页面生命周期的执行过程" tabindex="-1">页面生命周期的执行过程 <a class="header-anchor" href="#页面生命周期的执行过程" aria-label="Permalink to &quot;页面生命周期的执行过程&quot;">​</a></h5><ul><li>小程序注册完成后，加载页面，触发onLoad方法</li><li>页面载入后触发onShow方法，显示页面</li><li>首次显示页面，会触发onReady方法，渲染页面元素和样式，一个页面只会调用一次</li><li>当小程序后台运行或跳转到其他页面时，触发onHide方法</li><li>当小程序有后台进入到前台运行或重新进入页面时，触发onShow方法</li><li>当使用重定向方法 wx.redirectTo()或关闭当前页返回上一页wx.navigateBack()，触发onUnload</li></ul><p>当存在也应用生命周期和页面周期的时候，相关的执行顺序如下:</p><ul><li>打开小程序: (App)onLaunch --&gt;(App)onShow --&gt;(Pages)onLoad--&gt;(Pages)onShow --&gt;(pages)onRead</li><li>进入下一个页面:(Pages)onHide --&gt; (Next)onLoad --&gt;(Next)onShow --&gt; (Next)onReady</li><li>返回上一个页面:(curr)onUnload --&gt;(pre)onShow</li><li>离开小程序:(App)onHide</li><li>再次进入: 小程序未销毁 --&gt;(App)onShow(执行上面的顺序) ，小程序被销毁(App)onLaunch重新开始执行.</li></ul><h3 id="说说微信小程序的登录流程" tabindex="-1">说说微信小程序的登录流程? <a class="header-anchor" href="#说说微信小程序的登录流程" aria-label="Permalink to &quot;说说微信小程序的登录流程?&quot;">​</a></h3><h4 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h4><p><img src="https://qn.huat.xyz/mac/202402082254034.png" alt="图片.png"></p><ul><li>通过 wx.login() 获取到用户的code判断用户是否授权读取用户信息，调用wx.getUserlnfo 读取用户数据</li><li>由于小程序后台授权域名无法授权微信的域名，所以需要自身后端调用微信服务器获取用户信息</li><li>通过 wx.request() 方法请求业务方服务器，后端把 appid,appsecret 和 code 一起发送到微信服务器。 appid 和 appsecret 都是微信提供的，可以在管理员后台找到</li><li>微信服务器返回了 openid 及本次登录的会话密钥 session key</li><li>后端从数据库中查找 openid ，如果没有查到记录，说明该用户没有注册，如果有记录，则继续往下走</li><li>session key 是对用户数据进行加密签名的密钥。为了自身应用安全，session key 不应该在网络上传输</li><li>然后生成 session并返回给小程序</li><li>小程序把 session 存到 storage 里面，</li><li>下次请求时，先从 storage 里面读取，然后带给服务端</li><li>服务端对比 session 对应的记录，然后校验有效期</li></ul><p>更加详细的功能图如下所示</p><p><img src="https://qn.huat.xyz/mac/202402082254132.png" alt="图片.png"></p><h4 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h4><p>实际业务中，我们还需要登录态是否过期，通常的做法是在登录态(临时令牌)中保存有效期数据，该有效期数据应该在服务端校验登录态时和约定的时间(如服务端本地的系统时间或时间服务器上的标准时间)做对比 这种方法需要将本地存储的登录态发送到小程序的服务端，服务端判断为无效登录态时再返回需重新执行登录过程的消息给小程 另一种方式可以通过调用wx.checkSession 检查微信登陆态是否过期:</p><ul><li>如果过期，则发起完整的登录流程</li><li>如果不过期，则继续使用本地保存的自定义登录态</li></ul><p>这种方式的好处是不需要小程序服务端来参与校验，而是在小程序端调用AP，流程如下所示:</p><p><img src="https://qn.huat.xyz/mac/202402082254455.png" alt="图片.png"></p><h3 id="说说微信小程序中路由跳转的方式有哪些-区别" tabindex="-1">说说微信小程序中路由跳转的方式有哪些?区别? <a class="header-anchor" href="#说说微信小程序中路由跳转的方式有哪些-区别" aria-label="Permalink to &quot;说说微信小程序中路由跳转的方式有哪些?区别?&quot;">​</a></h3><h4 id="是什么-1" tabindex="-1">是什么 <a class="header-anchor" href="#是什么-1" aria-label="Permalink to &quot;是什么&quot;">​</a></h4><p>微信小程序拥有web 网页和 Application 共同的特征，我们的页面都不是孤立存在的，而是通过和其他页面进行交互，来共同完成系统的功能在微信小程序中，每个页面可以看成是一个 pageModel， pageModel全部以栈的形式进行管理</p><h4 id="有哪些" tabindex="-1">有哪些 <a class="header-anchor" href="#有哪些" aria-label="Permalink to &quot;有哪些&quot;">​</a></h4><p>常见的微信小程序页面跳转方式有如下：</p><ul><li>wx.navigateTo(Object)</li><li>wx.redirectTo(Object)</li><li>wx.switchTab(Object)</li><li>wx.navigateBack(Obiect)</li><li>wx.relaunch(Obiect)</li></ul><h5 id="wx-navigateto-object" tabindex="-1">wx.navigateTo(Object) <a class="header-anchor" href="#wx-navigateto-object" aria-label="Permalink to &quot;wx.navigateTo(Object)&quot;">​</a></h5><p>wx.navigateTo()用于保留当前页面、跳转到应用内的某个页面，使用 wx.navigateBack可以返回到原页面 wx.navigateTo 进行跳转， 以便返回原页面，以提高对于页面不是特别多的小程序，通常推荐使用加载速度。当页面特别多时，则不推荐使用</p><p><img src="https://qn.huat.xyz/mac/202402082254373.png" alt="图片.png"></p><h5 id="wx-redirectto-object" tabindex="-1">wx.redirectTo(Object) <a class="header-anchor" href="#wx-redirectto-object" aria-label="Permalink to &quot;wx.redirectTo(Object)&quot;">​</a></h5><p>重定向，当页面过多时，被保留页面会挤占微信分配给小程序的内存，或是达到微信所限制的 10 层页面栈的情况下，我们应该考虑选择wx.redirectTo() wx.redirectTo()用于关闭当前页面，跳转到应用内的某个页面 这样的跳转，可以避免跳转前页面占据运行内存，但返回时页面需要重新加载，增加了返回页面的显示时间</p><p><img src="https://qn.huat.xyz/mac/202402082254945.png" alt="图片.png"></p><h5 id="wx-switchtab-object" tabindex="-1">wx.switchTab(Object) <a class="header-anchor" href="#wx-switchtab-object" aria-label="Permalink to &quot;wx.switchTab(Object)&quot;">​</a></h5><p>跳转到tabBar;页面，并关闭其他所有非页面tabBar!</p><h5 id="wx-navigateback-object" tabindex="-1">wx.navigateBack(Object) <a class="header-anchor" href="#wx-navigateback-object" aria-label="Permalink to &quot;wx.navigateBack(Object)&quot;">​</a></h5><p>wx.navigateBack() 用于关闭当前页面，并返回上一页面或多级页面，开发者可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层则设置对象的 deltai属性即可</p><h5 id="wx-relaunch-object" tabindex="-1">wx.reLaunch(Object) <a class="header-anchor" href="#wx-relaunch-object" aria-label="Permalink to &quot;wx.reLaunch(Object)&quot;">​</a></h5><p>关闭所有页面，打开到应用内的某个页面，返回的时候跳到首页</p><p><img src="https://qn.huat.xyz/mac/202402082255930.png" alt="图片.png"></p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>关于上述五种跳转方式，做下总结:</p><ul><li>navigateTo 保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原页</li><li>redirectTo 关闭当前页面，跳转到应用内的某个页面</li><li>switchTab 跳转到 tabBar 页面，同时关闭其他非 tabBar 页面</li><li>navigateBack 返回上一页面</li><li>reLanch 关闭所有页面，打开到应用内的某个页面</li></ul><p>其中关于它们的页面栈的关系如下:</p><ul><li>navigateTo 新页面入栈</li><li>redirectTo 当前页面出栈，新页面入栈</li><li>navigateBack 页面不断出栈，直到目标返回页，新页面入栈</li><li>switchTab 页面全部出栈，只留下新的 Tab 页面</li><li>reLanch 页面全部出栈，只留下新的页面</li></ul><h3 id="说说微信小程序的支付流程" tabindex="-1">说说微信小程序的支付流程? <a class="header-anchor" href="#说说微信小程序的支付流程" aria-label="Permalink to &quot;说说微信小程序的支付流程?&quot;">​</a></h3><h4 id="流程-1" tabindex="-1">流程 <a class="header-anchor" href="#流程-1" aria-label="Permalink to &quot;流程&quot;">​</a></h4><p><img src="https://qn.huat.xyz/mac/202402082255680.png" alt="图片.png"></p><p>具体的做法</p><ul><li>打开某小程序，点击直接下单</li><li>wx.login获取用户临时登录凭证code，发送到后端服务器换取openld</li><li>在下单时，小程序需要将购买的商品ld，商品数量，以及用户的openld传送到服务器</li><li>服务器在接收到商品Id、商品数量、openld后，生成服务期订单数据，同时经过一定的签名算法向微信支付发送请求，获取预付单信息(prepay_id)，同时将获取的数据再次进行相应规则的签名，向小程序端响应必要的信息</li><li>小程序端在获取对应的参数后，调用wx.requestPayment()发起微信支付，唤醒支付工作台，进行支付</li><li>接下来的一些列操作都是由用户来操作的包括了微信支付密码，指纹等验证，确认支付之后执行鉴权调起支付</li><li>鉴权调起支付:在微信后台进行鉴权，微信后台直接返回给前端支付的结果，前端收到返回数据后对支付结果进行展示</li><li>推送支付结果:微信后台在给前端返回支付的结果后，也会向后台也返回一个支付结果，后台通过这个支付结果来更新订单的状态</li></ul><h3 id="说说提高微信小程序的应用速度的手段有哪些" tabindex="-1">说说提高微信小程序的应用速度的手段有哪些? <a class="header-anchor" href="#说说提高微信小程序的应用速度的手段有哪些" aria-label="Permalink to &quot;说说提高微信小程序的应用速度的手段有哪些?&quot;">​</a></h3><p>小程序首次启动前，微信会在小程序启动前为小程序准备好通用的运行环境，如运行中的线程和一些基础库的初始化 然后才开始进入启动状态，展示一个固定的启动界面，界面内包含小程序的图标、名称和加载提示图标。此时，微信会在背后完成几项工作:</p><ul><li>下载小程序代码包</li><li>加载小程序代码包</li><li>初始化小程序首页</li></ul><p>下载到的小程序代码包不是小程序的源代码，而是编译、压缩、打包之后的代码包</p><p><img src="https://qn.huat.xyz/mac/202402082255909.png" alt="图片.png"></p><h4 id="手段" tabindex="-1">手段 <a class="header-anchor" href="#手段" aria-label="Permalink to &quot;手段&quot;">​</a></h4><p>围绕上图小程序的启动流程， 我们可以从加载、渲染两个纬度进行切入:</p><h5 id="加载" tabindex="-1">加载 <a class="header-anchor" href="#加载" aria-label="Permalink to &quot;加载&quot;">​</a></h5><p>提升体验最直接的方法是控制小程序包的大小，常见手段有如下:</p><ul><li>代码包的体积压缩可以通过勾选开发者工具中“上传代码时，压缩代码”选项</li><li>及时清理无用的代码和资源文件</li><li>减少资源包中的图片等资源的数量和大小(理论上除了小icon，其他图片资源从网络下载)，图片资源压缩率有限</li></ul><p>并且可以采取分包加载的操作，将用户访问率高的页面放在主包里，将访问率低的页面放入子包里，按需加载 当用户点击到子包的目录时，还是有一个代码包下载的过程，这会感觉到明显的卡顿，所以子包也不建议拆的太大，当然我们可以采用子包预加载技术，并不需要等到用户点击到子包页面后在下载子包</p><p><img src="https://qn.huat.xyz/mac/202402082255749.png" alt="图片.png"></p><h5 id="渲染" tabindex="-1">渲染 <a class="header-anchor" href="#渲染" aria-label="Permalink to &quot;渲染&quot;">​</a></h5><p>关于微信小程序首屏渲染优化的手段如下：</p><ul><li>请求可以在页面onLoad就加载，不需要等页面ready后在异步请求数据</li><li>尽量减少不必要的https请求，可使用 getStorageSync()及 setStorageSync()方法将数据存储在本地</li><li>可以在前置页面将一些有用的字段带到当前页，进行首次渲染(列表页的某些数据--&gt;详情页)，没有数据的模块可以进行骨架屏的占位</li></ul><p>在微信小程序中，提高页面的多次渲染效率主要在于正确使用 setData：</p><ul><li>不要过于频繁调用setData，应考虑将多次setData合并成一次setData调用</li><li>数据通信的性能与数据量正相关，因而如果有一些数据字段不在界面中展示且数据结构比较复杂或包含长字符串，则不应使用 setData 来设置这些数据</li><li>与界面渲染无关的数据最好不要设置在data中，可以考虑设置在page对象的其他字段下</li></ul><p>除此之外，对于一些独立的模块我们尽可能抽离出来，这是因为自定义组件的更新并不会影响页面上其他元素的更新 各个组件也将具有各自独立的逻辑空间。每个组件都分别拥有自己的独立的数据、setData调用</p><h4 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>小程序启动加载性能:</p><ul><li>控制代码包的大小</li><li>分包加载</li><li>首屏体验 (预请求，利用缓存，避免白屏，及时反馈</li></ul><p>小程序渲染性能:</p><ul><li>避免不当的使用setData</li><li>使用自定义组件</li></ul>`,110),s=[n];function r(d,h,o,p,c,u){return i(),t("div",null,s)}const k=a(l,[["render",r]]);export{g as __pageData,k as default};
